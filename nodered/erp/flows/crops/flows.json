[
    {
        "id": "3c2cba0b.681486",
        "type": "tab",
        "label": "Flow 8",
        "disabled": true,
        "info": ""
    },
    {
        "id": "7e0847c3.4a4d18",
        "type": "tab",
        "label": "MATMAS",
        "disabled": false,
        "info": "PDST - 20211103 - Masterdata creation\nDDWR - 20211213 - update and extension\n",
        "env": []
    },
    {
        "id": "363c53b3.cabc2c",
        "type": "tab",
        "label": "DELIVERY",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1541bf07.4e6891",
        "type": "tab",
        "label": "LOIPRO",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b9d45f72.fdae2",
        "type": "tab",
        "label": "QCDownload",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6b777b1f31c1b35c",
        "type": "tab",
        "label": "CUSTOMERDOWNLOADER",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "29afaf8580d8a87f",
        "type": "tab",
        "label": "Flow 1",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "efeb392078a408b4",
        "type": "tab",
        "label": "SUPPLIERDOWNLOADER",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "7572dd85c30fac5f",
        "type": "tab",
        "label": "CheckFreshInbound",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0ed3fbcc7ca1ad55",
        "type": "tab",
        "label": "Flow 3",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4cf7a170bd3086fc",
        "type": "tab",
        "label": "StockDownload",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0a28eaaf4a84fa3d",
        "type": "tab",
        "label": "CheckASNCreation",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "16409cda02999332",
        "type": "tab",
        "label": "FreshInboundTrinature",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "9ac5e7d9bdac33ea",
        "type": "tab",
        "label": "StockQCstatusDownload",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6ad93671.a35278",
        "type": "subflow",
        "name": "Gateway CALL (Old Version)",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 120,
                "wires": [
                    {
                        "id": "61ac37ca.1d6848"
                    },
                    {
                        "id": "9395204.94439e"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1480,
                "y": 80,
                "wires": [
                    {
                        "id": "fb4660e0.4a173",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "66352614.be4db8",
        "type": "subflow",
        "name": "Send email",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 260,
                "wires": [
                    {
                        "id": "a9c008a6.937458"
                    },
                    {
                        "id": "6ff24068.a3672"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "8a0198ba.8aa2b8",
        "type": "subflow",
        "name": "Pre API Call Log",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 100,
                "wires": [
                    {
                        "id": "a468a192.32a3c"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 800,
                "y": 100,
                "wires": [
                    {
                        "id": "594a3539.1f6f4c",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "eb038fec.a7394",
        "type": "subflow",
        "name": "Post API Call Log",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 120,
                "wires": [
                    {
                        "id": "5a8c5d9f.5c1c44"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1380,
                "y": 320,
                "wires": [
                    {
                        "id": "4240cddcd084d1ba",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "f510047e.e49ad8",
        "type": "subflow",
        "name": "Scan Interface Folder 'SAP_TO_OBJ'",
        "info": "",
        "category": "",
        "in": [],
        "out": [
            {
                "x": 740,
                "y": 140,
                "wires": [
                    {
                        "id": "eec904c87131136c",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "e240094c.8dfd48",
        "type": "subflow",
        "name": "Read Kafka Payload",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "d9b92989.05c468"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 960,
                "y": 80,
                "wires": [
                    {
                        "id": "d852239b3471d921",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "a10f5bb2.0ca548",
        "type": "subflow",
        "name": "CarrierDownloader",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "2c27315a.ca831e"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1240,
                "y": 220,
                "wires": [
                    {
                        "id": "c1e760e4.555fe",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "1e8bac5.3bd6254",
        "type": "subflow",
        "name": "ShipmentDownloader",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "949d14e0.c574f8"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 820,
                "y": 120,
                "wires": [
                    {
                        "id": "f2369115.433d",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "3f1439ff.274276",
        "type": "subflow",
        "name": "OutboundOrderDownloader",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "91fdc1.6773224"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1080,
                "y": 320,
                "wires": [
                    {
                        "id": "109fc901.0da8e7",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "af0e5779.77fe48",
        "type": "subflow",
        "name": "AddOutboundOrderToShipment",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "ba69c35a.27d27"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1360,
                "y": 160,
                "wires": [
                    {
                        "id": "70fa3eb5.25ac8",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "4bfe965d.e41428",
        "type": "subflow",
        "name": "SupplierDownloader",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "5a68056a.d2efac"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1080,
                "y": 240,
                "wires": [
                    {
                        "id": "d35d26c0.205898",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "fc598934.190128",
        "type": "subflow",
        "name": "ReturnOrderDownloader",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 120,
                "y": 60,
                "wires": [
                    {
                        "id": "b1262e68.eca1b"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1020,
                "y": 460,
                "wires": [
                    {
                        "id": "a3ab645.cce6598",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "3d042f59.b938e",
        "type": "subflow",
        "name": "getOutboundOrdersInObjective",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "285a0e0c.6606a2"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 920,
                "y": 480,
                "wires": [
                    {
                        "id": "3752953f.75c12a",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "5b600531.9e834c",
        "type": "subflow",
        "name": "RemoveOutboundOrderFromShipment",
        "info": "// nrlint no-loops:off\n",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "58036103.4a8b2"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1380,
                "y": 420,
                "wires": [
                    {
                        "id": "c85d6bd7.0e6708",
                        "port": 0
                    },
                    {
                        "id": "58036103.4a8b2",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "e5d52753.a3e378",
        "type": "subflow",
        "name": "API GW CALL no error",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "3d85b334.81e94c"
                    },
                    {
                        "id": "799ba87c.c5a498"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1560,
                "y": 140,
                "wires": [
                    {
                        "id": "6ce21817.927258",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "4cb0a8d8.353488",
        "type": "subflow",
        "name": "DeleteProductionOrder",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "e4621d52.d0e02"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1260,
                "y": 240,
                "wires": [
                    {
                        "id": "b219963a.9a0468",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "41ffb55d.ec50bc",
        "type": "subflow",
        "name": "AddContainerType",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 55,
                "y": 28,
                "wires": [
                    {
                        "id": "1c02b215.fa060e"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1045,
                "y": 398,
                "wires": [
                    {
                        "id": "c58317de.d9eac8",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "9165d03b.8ba1",
        "type": "subflow",
        "name": "AddPackConfig",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "7ffae6b5.91c0d8"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1220,
                "y": 260,
                "wires": [
                    {
                        "id": "eefc6ac6.e6b268",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "da45371f.14a148",
        "type": "subflow",
        "name": "AddItem",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "2c9c1814.e39378"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1220,
                "y": 400,
                "wires": [
                    {
                        "id": "92f56c92.74763",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "cb35eeda.3713f",
        "type": "subflow",
        "name": "ApplyPackConfig",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "458102e2.d92acc"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 840,
                "y": 200,
                "wires": [
                    {
                        "id": "fcb2f3c3.cdadd",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "c32ccc5d.5d3cc",
        "type": "subflow",
        "name": "CreatePO",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "6a9bff0d.90f33"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1160,
                "y": 260,
                "wires": [
                    {
                        "id": "87a13e75.5ec46",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "1540ec98.e32783",
        "type": "subflow",
        "name": "UpdateLotQC",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "d52d13fd.47125"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1160,
                "y": 320,
                "wires": [
                    {
                        "id": "75a9e4f1d2d832c3",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "3226c621.b984ca",
        "type": "subflow",
        "name": "getItem",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "c715b163.5b559"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1020,
                "y": 360,
                "wires": [
                    {
                        "id": "f4ef7f7d.c229",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "4da577a93a5543d4",
        "type": "subflow",
        "name": "InboundOrderDownloader",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 40,
                "wires": [
                    {
                        "id": "5de640dd0c715738"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 960,
                "y": 360,
                "wires": [
                    {
                        "id": "daa2ffd938ed76ee",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "b0eb94854a31f04c",
        "type": "subflow",
        "name": "ReturnOrderDL",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "4f2ad1a96a08a1fd"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 2300,
                "y": 820,
                "wires": [
                    {
                        "id": "540df05bb874cd44",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "b28f8550.ec044",
        "type": "subflow",
        "name": "OAUTH OBJT",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 43,
                "y": 90,
                "wires": [
                    {
                        "id": "576119c8.7d75f8"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1940,
                "y": 340,
                "wires": [
                    {
                        "id": "ee8ca8c0.fc169",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "status": {
            "x": 1320,
            "y": 40,
            "wires": [
                {
                    "id": "edac0015.0a1bf8",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "8f03e792bb175e0e",
        "type": "subflow",
        "name": "ELK Log",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 160,
                "y": 140,
                "wires": [
                    {
                        "id": "10130dac.f7894a"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1100,
                "y": 140,
                "wires": [
                    {
                        "id": "b015bf82.d43b1",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "ee7c6c85b250bda0",
        "type": "subflow",
        "name": "Gateway CALL (New Version)",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 140,
                "wires": [
                    {
                        "id": "4e8307354d331e82"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1140,
                "y": 520,
                "wires": [
                    {
                        "id": "cb03d70d.f9c748",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1140,
                "y": 640,
                "wires": [
                    {
                        "id": "6785d1bda5f5b335",
                        "port": 0
                    },
                    {
                        "id": "6c5da03c4169fde8",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "METHOD",
                "type": "str",
                "value": "true",
                "ui": {
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "GET"
                                },
                                "v": "GET"
                            },
                            {
                                "l": {
                                    "en-US": "PUT"
                                },
                                "v": "PUT"
                            },
                            {
                                "l": {
                                    "en-US": "POST"
                                },
                                "v": "POST"
                            },
                            {
                                "l": {
                                    "en-US": "PATCH"
                                },
                                "v": "PATCH"
                            },
                            {
                                "l": {
                                    "en-US": "DELETE"
                                },
                                "v": "DELETE"
                            }
                        ]
                    }
                }
            },
            {
                "name": "PATH",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "d0c9570654afa242",
        "type": "subflow",
        "name": "Search QC status",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 100,
                "y": 140,
                "wires": [
                    {
                        "id": "0451be8c4ebd3d46"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 800,
                "y": 140,
                "wires": [
                    {
                        "id": "c09c1a15afe55a80",
                        "port": 0
                    },
                    {
                        "id": "c09c1a15afe55a80",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "c604d7611424d075",
        "type": "subflow",
        "name": "Search QC status by name",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 160,
                "wires": [
                    {
                        "id": "899c77ea2cdef3b2"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 2000,
                "y": 180,
                "wires": [
                    {
                        "id": "69cd7f61bb153328",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "f8154ed1dd94890b",
        "type": "subflow",
        "name": "planProductionOrder",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "038474eb709c4c05"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 860,
                "y": 520,
                "wires": [
                    {
                        "id": "c423478c622840da",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "2af33fd4844355a7",
        "type": "subflow",
        "name": "getRecipe",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "10c252e3352a4e52"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 820,
                "y": 360,
                "wires": [
                    {
                        "id": "6a35c29c8974f9a7",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "9d4da4af07865061",
        "type": "subflow",
        "name": "getInboundOrders",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "871bbbea8e12306b"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1080,
                "y": 340,
                "wires": [
                    {
                        "id": "b8422cc8eef552d6",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "2696630a8bfd33d3",
        "type": "subflow",
        "name": "CloseFreshInbounds",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "5c0c1c9b45acbe0d"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1040,
                "y": 520,
                "wires": [
                    {
                        "id": "88a50545d6965ca4",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "9448532d880def76",
        "type": "subflow",
        "name": "getItemsForMap",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "3aa3d2298ad542d2"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1060,
                "y": 540,
                "wires": [
                    {
                        "id": "4595b452caa05fa8",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "bd9c4e48e2e07bf6",
        "type": "subflow",
        "name": "Create ASN",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "f14ef1fd3a6fa1f2"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1220,
                "y": 480,
                "wires": [
                    {
                        "id": "8db7bf3601fe32f2",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "9427480f.947f38",
        "type": "subflow",
        "name": "Find tag",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 120,
                "y": 120,
                "wires": [
                    {
                        "id": "8572af74.39562"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 900,
                "y": 120,
                "wires": [
                    {
                        "id": "8572af74.39562",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "TYPE",
                "type": "str",
                "value": "PLC_IDNR"
            }
        ],
        "color": "#DDAA99"
    },
    {
        "id": "31ab2e331f379432",
        "type": "subflow",
        "name": "GetItemPackagingInfo",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "6ef5c3312050883b"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1200,
                "y": 540,
                "wires": [
                    {
                        "id": "47e05bfe24872775",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "51da8aadacf633ba",
        "type": "subflow",
        "name": "CreatePhantom",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "88c785c83f2e4fd1"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1300,
                "y": 240,
                "wires": [
                    {
                        "id": "9ef2ab80e3a95c96",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "ab54f22932ac167f",
        "type": "subflow",
        "name": "CheckAsnCreation",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "48f6c0e197ae23f1"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 900,
                "y": 320,
                "wires": [
                    {
                        "id": "f12b0cf258dac197",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "860b725b28b14c5e",
        "type": "subflow",
        "name": "PrereceiveASNlpn",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "7a93b4a1a64d735e"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 940,
                "y": 260,
                "wires": [
                    {
                        "id": "ef35a29f8211aa26",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "66c592ae4bdebe98",
        "type": "subflow",
        "name": "getContainerTypes",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 100,
                "wires": [
                    {
                        "id": "607771e1b3e2d925"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1300,
                "y": 100,
                "wires": [
                    {
                        "id": "90b9d3ea0bc9e4da",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "a3987006252c27b3",
        "type": "subflow",
        "name": "getQCStatusses",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "46b0ae2ee05b8693"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1140,
                "y": 40,
                "wires": [
                    {
                        "id": "535fef922ab4274f",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "1f5d8b704aa78a4b",
        "type": "subflow",
        "name": "getMachine_Group_Operation",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "d6fc6e28143a6588"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1160,
                "y": 140,
                "wires": [
                    {
                        "id": "8f950a54d37767e0",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "3a5d69670370d7ac",
        "type": "subflow",
        "name": "getObjectiveLotID",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "be085a48317d4168"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 980,
                "y": 360,
                "wires": [
                    {
                        "id": "341c528998fa3fc5",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "5dae959254452f97",
        "type": "subflow",
        "name": "getObjectiveLotIDforMap",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "06e005016024ee57"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1100,
                "y": 320,
                "wires": [
                    {
                        "id": "52a53d7b639c47ad",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "e2dafa3d42a6d9a8",
        "type": "subflow",
        "name": "CreateAndApplyPackConfig",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "f7fecb6b3e0901e0"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1220,
                "y": 360,
                "wires": [
                    {
                        "id": "b0d9aa019445c6b7",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "a134d3847bdd336b",
        "type": "subflow",
        "name": "getMachineWipInLocations",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "57c62609fd266fce"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1160,
                "y": 420,
                "wires": [
                    {
                        "id": "12bd971671ba2059",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "436dd2ee6d1e0587",
        "type": "subflow",
        "name": "CustomerDownloader",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "91a3a8048128211e"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1180,
                "y": 440,
                "wires": [
                    {
                        "id": "5939d092701fcbf5",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "1a3593e9db49782d",
        "type": "subflow",
        "name": "AdjustQCLPN",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "ecb59f89a0b624c6"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 980,
                "y": 400,
                "wires": [
                    {
                        "id": "c8a2d7f74dc20ad1",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "99f7d9ef22663ce3",
        "type": "subflow",
        "name": "ReceiveFreshTrinature",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "0cb04f96fdd7aeb4"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 660,
                "y": 620,
                "wires": [
                    {
                        "id": "07944ef3f8715164",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "348825a4ced52803",
        "type": "group",
        "z": "c604d7611424d075",
        "name": "SEARCH QC STATUS BY NAME",
        "style": {
            "fill": "#bfdbef",
            "label": true
        },
        "nodes": [
            "ee154d1406e72c0e",
            "6c105a9d0872d25c",
            "58e3d132df8f1fcd",
            "95926b92e4ae2fe6",
            "16d304f436314185",
            "b9711960d20b6e73",
            "69cd7f61bb153328",
            "13dc41774fc6f7d3",
            "5a3c5b1d77adb030",
            "e7e370bed3b41e67",
            "fa8291e2df13c5eb",
            "fa497d1cc73cf344",
            "e0de6ee849a26c72",
            "899c77ea2cdef3b2",
            "37bca13544c2873f"
        ],
        "x": 94,
        "y": 19
    },
    {
        "id": "ba27338732d11b37",
        "type": "group",
        "z": "29afaf8580d8a87f",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "b12b5d09cd2e095e",
            "c819f8386a4a0d13",
            "e6351cdc769ec034"
        ],
        "x": 54,
        "y": 79
    },
    {
        "id": "2c935d8d.e39c82",
        "type": "MSSQL-CN",
        "tdsVersion": "7_4",
        "name": "OBJT DB Connection",
        "server": "${OBJT_DB_HOST}",
        "port": "1433",
        "encyption": true,
        "trustServerCertificate": true,
        "database": "${OBJT_DB_NAME}",
        "useUTC": true,
        "connectTimeout": "15000",
        "requestTimeout": "15000",
        "cancelTimeout": "5000",
        "pool": "5",
        "parseJSON": false,
        "enableArithAbort": true
    },
    {
        "id": "b1098f32.a154c",
        "type": "kafkajs-client",
        "name": "Interne Kafka",
        "brokers": "${KAFKA_OBJT_BROKER_INT}",
        "clientid": "${KAFKA_CLIENT_ID}",
        "connectiontimeout": "3000",
        "requesttimeout": "25000",
        "advancedretry": false,
        "maxretrytime": "30000",
        "initialretrytime": "300",
        "factor": "0.2",
        "multiplier": "2",
        "retries": "5",
        "auth": "none",
        "tlsselfsign": false,
        "tlscacert": "",
        "tlsclientcert": "",
        "tlsprivatekey": "",
        "tlspassphrase": "",
        "saslssl": true,
        "saslmechanism": "plain",
        "loglevel": "error"
    },
    {
        "id": "9f2e1f0c.45d84",
        "type": "kafkajs-client",
        "name": "Externe Kafka",
        "brokers": "${KAFKA_OBJT_BROKER_EXT}",
        "clientid": "${KAFKA_CLIENT_ID}",
        "connectiontimeout": "3000",
        "requesttimeout": "25000",
        "advancedretry": false,
        "maxretrytime": "30000",
        "initialretrytime": "300",
        "factor": "0.2",
        "multiplier": "2",
        "retries": "5",
        "auth": "none",
        "tlsselfsign": false,
        "tlscacert": "",
        "tlsclientcert": "",
        "tlsprivatekey": "",
        "tlspassphrase": "",
        "saslssl": true,
        "saslmechanism": "plain",
        "loglevel": "error"
    },
    {
        "id": "cdbbe51.3ba5e18",
        "type": "log-elk-logger",
        "name": "ELK",
        "url": "${ELASTIC_URL}",
        "username": "",
        "password": "",
        "filename": "log-elk.log",
        "maxsize": "1",
        "maxfiles": "10",
        "logelk": true,
        "logfile": false,
        "logconsole": false,
        "logdebug": false
    },
    {
        "id": "eba68759.b440c8",
        "type": "OpcUa-Endpoint",
        "endpoint": "${OPC_UA_ENDPOINT}",
        "secpol": "None",
        "secmode": "None",
        "login": false
    },
    {
        "id": "8dfc8cef4b579bbb",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "b4894d125982024d",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "055d803bad3e3f0c",
        "type": "ui_group",
        "name": "WeighingBridge",
        "tab": "8dfc8cef4b579bbb",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "61ac37ca.1d6848",
        "type": "debug",
        "z": "6ad93671.a35278",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 90,
        "y": 60,
        "wires": []
    },
    {
        "id": "b5250289.1f258",
        "type": "debug",
        "z": "6ad93671.a35278",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 250,
        "y": 60,
        "wires": []
    },
    {
        "id": "4d50e01.f3da02",
        "type": "change",
        "z": "6ad93671.a35278",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "baseurl",
                "pt": "msg",
                "to": "OBJT_APIGW_URL",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "baseurl&urlsubpath",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "apipayload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 440,
        "y": 120,
        "wires": [
            [
                "2fc4e4ee.97de2c"
            ]
        ]
    },
    {
        "id": "2fc4e4ee.97de2c",
        "type": "subflow:8a0198ba.8aa2b8",
        "z": "6ad93671.a35278",
        "name": "",
        "env": [],
        "x": 640,
        "y": 120,
        "wires": [
            [
                "72f0ee36.ebcc",
                "9bccc31.d58be4"
            ]
        ]
    },
    {
        "id": "72f0ee36.ebcc",
        "type": "debug",
        "z": "6ad93671.a35278",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 60,
        "wires": []
    },
    {
        "id": "9bccc31.d58be4",
        "type": "http request",
        "z": "6ad93671.a35278",
        "name": "Execute API",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 870,
        "y": 120,
        "wires": [
            [
                "38e2eb72.761794",
                "77d57e04.6afec"
            ]
        ]
    },
    {
        "id": "38e2eb72.761794",
        "type": "subflow:eb038fec.a7394",
        "z": "6ad93671.a35278",
        "name": "",
        "env": [],
        "x": 1090,
        "y": 120,
        "wires": [
            [
                "fb4660e0.4a173"
            ]
        ]
    },
    {
        "id": "fb4660e0.4a173",
        "type": "switch",
        "z": "6ad93671.a35278",
        "name": "API call succesful?",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1310,
        "y": 120,
        "wires": [
            [],
            [
                "374f82bd.a6a45e"
            ]
        ]
    },
    {
        "id": "374f82bd.a6a45e",
        "type": "function",
        "z": "6ad93671.a35278",
        "name": "Raise error",
        "func": "var error = {\n    \"topic\": msg.topic,\n    \"category\": msg.category,\n    \"api\": {\n        \"url\": msg.url,\n        \"payload\": msg.apipayload\n    },\n    \"apiResponse\": {\n        \"statusCode\": msg.statusCode,\n        \"message\": msg.payload.errorMessage\n    }\n}\n\nthrow error;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1530,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "9395204.94439e",
        "type": "subflow:b28f8550.ec044",
        "z": "6ad93671.a35278",
        "name": "",
        "env": [],
        "x": 220,
        "y": 120,
        "wires": [
            [
                "4d50e01.f3da02",
                "b5250289.1f258"
            ]
        ]
    },
    {
        "id": "77d57e04.6afec",
        "type": "debug",
        "z": "6ad93671.a35278",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 60,
        "wires": []
    },
    {
        "id": "a9c008a6.937458",
        "type": "debug",
        "z": "66352614.be4db8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 110,
        "y": 200,
        "wires": []
    },
    {
        "id": "6ff24068.a3672",
        "type": "e-mail",
        "z": "66352614.be4db8",
        "server": "smtp.server.vmv.lan",
        "port": "25",
        "secure": false,
        "tls": false,
        "name": "glenn.boudaer@objt.com",
        "dname": "",
        "x": 480,
        "y": 260,
        "wires": []
    },
    {
        "id": "594a3539.1f6f4c",
        "type": "change",
        "z": "8a0198ba.8aa2b8",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "log",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "a468a192.32a3c",
        "type": "change",
        "z": "8a0198ba.8aa2b8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "log.meta.api",
                "pt": "msg",
                "to": "url",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "log.meta.method",
                "pt": "msg",
                "to": "method",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "log.meta.identifier",
                "pt": "msg",
                "to": "APICALL",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "log.meta.category",
                "pt": "msg",
                "to": "category",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 200,
        "y": 100,
        "wires": [
            [
                "974367ac11c92436"
            ]
        ]
    },
    {
        "id": "974367ac11c92436",
        "type": "subflow:8f03e792bb175e0e",
        "z": "8a0198ba.8aa2b8",
        "name": "",
        "x": 440,
        "y": 100,
        "wires": [
            [
                "594a3539.1f6f4c"
            ]
        ]
    },
    {
        "id": "8a0f4c659b63d819",
        "type": "comment",
        "z": "8a0198ba.8aa2b8",
        "name": "Manual",
        "info": "Purpose:\nLogging the payload which is sent to the API separately\n\nThis flow takes following inputs:\n\nrequired:\n - msg.payload  (The main message which is logged)\n\nThe flow will prepare following msg.log.meta object:\n{\n    \"api\": msg.url,\n    \"method\": msg.method,\n    \"identifier\": \"APICALL\",\n    \"category\": msg.category\n}",
        "x": 170,
        "y": 40,
        "wires": []
    },
    {
        "id": "5a8c5d9f.5c1c44",
        "type": "switch",
        "z": "eb038fec.a7394",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 210,
        "y": 120,
        "wires": [
            [
                "400f48de.0c90d8"
            ],
            [
                "7e9e89fdbfedf88c"
            ]
        ]
    },
    {
        "id": "400f48de.0c90d8",
        "type": "change",
        "z": "eb038fec.a7394",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 400,
        "y": 60,
        "wires": [
            [
                "7e9e89fdbfedf88c"
            ]
        ]
    },
    {
        "id": "98369c35c355e6bb",
        "type": "switch",
        "z": "eb038fec.a7394",
        "name": "Check If Api call was succesfull",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "neq",
                "v": "200",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 630,
        "y": 360,
        "wires": [
            [
                "c1d110bf8ac95b9e"
            ],
            [
                "b7f90c1c07956098"
            ]
        ]
    },
    {
        "id": "b7f90c1c07956098",
        "type": "change",
        "z": "eb038fec.a7394",
        "name": "API NOK => Set Level ERROR",
        "rules": [
            {
                "t": "set",
                "p": "log.level",
                "pt": "msg",
                "to": "error",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 950,
        "y": 480,
        "wires": [
            [
                "c1d110bf8ac95b9e"
            ]
        ]
    },
    {
        "id": "7e9e89fdbfedf88c",
        "type": "json",
        "z": "eb038fec.a7394",
        "name": "Convert payload to object",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 670,
        "y": 120,
        "wires": [
            [
                "7135046144553f23"
            ]
        ]
    },
    {
        "id": "2d88ebf483256e8e",
        "type": "comment",
        "z": "eb038fec.a7394",
        "name": "Manual",
        "info": "Purpose:\nELK Logging which mimics the 'Download Events'. It groups the api call payload, sourcepayload and result in one log element.\n\nThis flow takes following inputs:\n\nrequired:\n - msg.payload  (The main message which is logged)\n\noptional:\n - msg.sourcepayload  (eg. The full untransformed payload received from external party)\n - msg.apipayload   (eg. The transformed payload sent to execute API call)\n - msg.category (eg. 'ITEMS' or 'PRODUCTIONORDERS')\n \n\nThe flow will prepare following msg.log.meta object:\n{\n    \"api\": msg.url,\n    \"method\": msg.method,\n    \"identifier\": \"APIRESULT\",\n    \"sourcepayload\": msg.log.sourcepayload,\n    \"apipayload\": msg.log.apipayload,\n    \"category\": msg.category\n}",
        "x": 110,
        "y": 40,
        "wires": []
    },
    {
        "id": "7135046144553f23",
        "type": "change",
        "z": "eb038fec.a7394",
        "name": "Copy sourcepayload and apipayload",
        "rules": [
            {
                "t": "set",
                "p": "sourcepayloadlog",
                "pt": "msg",
                "to": "sourcepayload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "apipayloadlog",
                "pt": "msg",
                "to": "apipayload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1010,
        "y": 120,
        "wires": [
            [
                "cfb53012627e5943"
            ]
        ]
    },
    {
        "id": "cfb53012627e5943",
        "type": "json",
        "z": "eb038fec.a7394",
        "name": "Convert sourcepayload to string",
        "property": "sourcepayloadlog",
        "action": "",
        "pretty": false,
        "x": 610,
        "y": 240,
        "wires": [
            [
                "1a1aeddfc2f2a28e"
            ]
        ]
    },
    {
        "id": "1a1aeddfc2f2a28e",
        "type": "json",
        "z": "eb038fec.a7394",
        "name": "Convert api payload to string",
        "property": "apipayloadlog",
        "action": "str",
        "pretty": false,
        "x": 920,
        "y": 240,
        "wires": [
            [
                "ce89029d6df336d9"
            ]
        ]
    },
    {
        "id": "ce89029d6df336d9",
        "type": "change",
        "z": "eb038fec.a7394",
        "name": "Fill log.meta",
        "rules": [
            {
                "t": "set",
                "p": "log.meta.api",
                "pt": "msg",
                "to": "url",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "log.meta.method",
                "pt": "msg",
                "to": "method",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "log.meta.identifier",
                "pt": "msg",
                "to": "APIRESULT",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "log.meta.sourcepayload",
                "pt": "msg",
                "to": "sourcepayloadlog",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "log.meta.apipayload",
                "pt": "msg",
                "to": "apipayloadlog",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "log.meta.category",
                "pt": "msg",
                "to": "category",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1170,
        "y": 240,
        "wires": [
            [
                "98369c35c355e6bb"
            ]
        ]
    },
    {
        "id": "4240cddcd084d1ba",
        "type": "change",
        "z": "eb038fec.a7394",
        "name": "Cleanup",
        "rules": [
            {
                "t": "delete",
                "p": "sourcepayloadlog",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "apipayloadlog",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "log",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1220,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "c13422e79bb41312",
        "type": "catch",
        "z": "eb038fec.a7394",
        "name": "",
        "scope": [
            "7e9e89fdbfedf88c"
        ],
        "uncaught": false,
        "x": 510,
        "y": 480,
        "wires": [
            [
                "22345a17061e1909"
            ]
        ]
    },
    {
        "id": "22345a17061e1909",
        "type": "change",
        "z": "eb038fec.a7394",
        "name": "Set errorMessage",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "payload.errorMessage",
                "pt": "msg",
                "to": "Gateway server did not respond correctly",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 690,
        "y": 480,
        "wires": [
            [
                "b7f90c1c07956098"
            ]
        ]
    },
    {
        "id": "c1d110bf8ac95b9e",
        "type": "subflow:8f03e792bb175e0e",
        "z": "eb038fec.a7394",
        "name": "",
        "x": 1000,
        "y": 340,
        "wires": [
            [
                "4240cddcd084d1ba"
            ]
        ]
    },
    {
        "id": "6b40bb34.a0ca44",
        "type": "debug",
        "z": "f510047e.e49ad8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 60,
        "wires": []
    },
    {
        "id": "fa91d920.2f04a8",
        "type": "change",
        "z": "f510047e.e49ad8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "archivedir",
                "pt": "msg",
                "to": "msg.filedir & '/archive'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 390,
        "y": 140,
        "wires": [
            [
                "eec904c87131136c"
            ]
        ]
    },
    {
        "id": "1c59c09.abbb93f",
        "type": "watch-directory",
        "z": "f510047e.e49ad8",
        "folder": "${INTERFACE_SAP_TO_OBJ_DIR}",
        "recursive": 0,
        "typeEvent": "create",
        "ignoreInitial": true,
        "ignoredFiles": "",
        "ignoredFilesType": "re",
        "name": "Interface: SAP_TO_OBJ",
        "x": 150,
        "y": 60,
        "wires": [
            [
                "6b40bb34.a0ca44",
                "fa91d920.2f04a8"
            ]
        ]
    },
    {
        "id": "eec904c87131136c",
        "type": "change",
        "z": "f510047e.e49ad8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "errordir",
                "pt": "msg",
                "to": "msg.filedir & '/error'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 600,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "d9b92989.05c468",
        "type": "change",
        "z": "e240094c.8dfd48",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.value",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 200,
        "y": 80,
        "wires": [
            [
                "8ecf0aa2.99de68",
                "731e3cdb.1557a4"
            ]
        ]
    },
    {
        "id": "8ecf0aa2.99de68",
        "type": "json",
        "z": "e240094c.8dfd48",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 390,
        "y": 80,
        "wires": [
            [
                "dc2cefbe.fd779",
                "700ed5e6.c0f73c"
            ]
        ]
    },
    {
        "id": "dc2cefbe.fd779",
        "type": "debug",
        "z": "e240094c.8dfd48",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 140,
        "wires": []
    },
    {
        "id": "700ed5e6.c0f73c",
        "type": "change",
        "z": "e240094c.8dfd48",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "meta.identifier",
                "pt": "msg",
                "to": "KAFKA",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "meta.api",
                "pt": "msg",
                "to": "topic",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 580,
        "y": 80,
        "wires": [
            [
                "7786365a.6914d8",
                "d852239b3471d921"
            ]
        ]
    },
    {
        "id": "731e3cdb.1557a4",
        "type": "debug",
        "z": "e240094c.8dfd48",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 350,
        "y": 140,
        "wires": []
    },
    {
        "id": "7786365a.6914d8",
        "type": "debug",
        "z": "e240094c.8dfd48",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 140,
        "wires": []
    },
    {
        "id": "d852239b3471d921",
        "type": "subflow:8f03e792bb175e0e",
        "z": "e240094c.8dfd48",
        "name": "",
        "env": [],
        "x": 800,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "da4b9db0.3b33b",
        "type": "change",
        "z": "a10f5bb2.0ca548",
        "name": "Prepare API Call params",
        "rules": [
            {
                "t": "set",
                "p": "call.path",
                "pt": "msg",
                "to": "/api/v1/carriers/",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "call.resource",
                "pt": "msg",
                "to": "payload.id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "urlsubpath",
                "pt": "msg",
                "to": "call.path&call.resource",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "PUT",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "category",
                "pt": "msg",
                "to": "Create Carrier",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 470,
        "y": 100,
        "wires": [
            [
                "ceac947.a403068"
            ]
        ]
    },
    {
        "id": "6f7cbb48.2d6424",
        "type": "template",
        "z": "a10f5bb2.0ca548",
        "name": "templateCarrier",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n  \"description\":\"{{{payload.objcarrier.NAME}}}\",\n  \"id\": \"{{{payload.objcarrier.ID}}}\",\n  \"languageISOCode\": \"{{{payload.objcarrier.LANGUAGEISOCODE}}}\",\n  \"postalAddresses\": [\n    {\n      \"name\": \"{{{payload.objcarrier.NAME}}}\",\n      \"city\": \"{{{payload.objcarrier.CITY}}}\",\n      \"countryISO2Code\": \"{{{payload.objcarrier.LANGUAGEISOCODE}}}\",\n      \"countryName\": \"{{{payload.objcarrier.COUNTRY}}}\",\n      \"languageISOCode\": \"{{{payload.objcarrier.LANGUAGEISOCODE}}}\",\n      \"street\": \"{{{payload.objcarrier.STREET}}}\",\n      \"zipPostalCode\": \"{{{payload.objcarrier.POSTALCODE}}}\"\n    }\n  ]\n  }",
        "output": "json",
        "x": 360,
        "y": 180,
        "wires": [
            [
                "da4b9db0.3b33b"
            ]
        ]
    },
    {
        "id": "ceac947.a403068",
        "type": "subflow:6ad93671.a35278",
        "z": "a10f5bb2.0ca548",
        "name": "",
        "env": [],
        "x": 680,
        "y": 220,
        "wires": [
            [
                "cfa7990f.80c518"
            ]
        ]
    },
    {
        "id": "2c27315a.ca831e",
        "type": "change",
        "z": "a10f5bb2.0ca548",
        "name": "SaveInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "sourcepayload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 150,
        "y": 140,
        "wires": [
            [
                "6f7cbb48.2d6424"
            ]
        ]
    },
    {
        "id": "c1e760e4.555fe",
        "type": "change",
        "z": "a10f5bb2.0ca548",
        "name": "restoreInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sourcepayload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1060,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "cfa7990f.80c518",
        "type": "function",
        "z": "a10f5bb2.0ca548",
        "name": "AddResultToMessage",
        "func": "if (msg.payload.key){\n    if (msg.sourcepayload)\n    {\n        msg.sourcepayload.CarrierDownloadResult = msg.payload.key\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 340,
        "wires": [
            [
                "c1e760e4.555fe"
            ]
        ]
    },
    {
        "id": "949d14e0.c574f8",
        "type": "change",
        "z": "1e8bac5.3bd6254",
        "name": "SaveInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "sourcepayload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 150,
        "y": 120,
        "wires": [
            [
                "44b06552.85f06c"
            ]
        ]
    },
    {
        "id": "c565ad97.e4728",
        "type": "subflow:6ad93671.a35278",
        "z": "1e8bac5.3bd6254",
        "name": "",
        "env": [],
        "x": 760,
        "y": 340,
        "wires": [
            [
                "bdc9b938.225fb8"
            ]
        ]
    },
    {
        "id": "bdc9b938.225fb8",
        "type": "function",
        "z": "1e8bac5.3bd6254",
        "name": "AddResultToMessage",
        "func": "if (msg.payload.key){\n    if (msg.sourcepayload)\n    {\n        msg.sourcepayload.DeliveryOrderDownloadResult = msg.payload.key\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 460,
        "wires": [
            [
                "f2369115.433d"
            ]
        ]
    },
    {
        "id": "f2369115.433d",
        "type": "change",
        "z": "1e8bac5.3bd6254",
        "name": "restoreInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sourcepayload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1140,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "44b06552.85f06c",
        "type": "template",
        "z": "1e8bac5.3bd6254",
        "name": "templateShipment",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n \"id\": \"{{{payload.shipmentID}}}\",\n  \"carrierKey\": \"{{{payload.CarrierDownloadResult}}}\",\n  \"description\": \"{{{payload.plantID}}}\",\n \"dtsDueBefore\": \"{{{payload.shipmentDtsDueBefore}}}\"\n}",
        "output": "json",
        "x": 450,
        "y": 140,
        "wires": [
            [
                "cb15ce88.ed8af"
            ]
        ]
    },
    {
        "id": "cb15ce88.ed8af",
        "type": "change",
        "z": "1e8bac5.3bd6254",
        "name": "Prepare API Call params",
        "rules": [
            {
                "t": "set",
                "p": "call.path",
                "pt": "msg",
                "to": "/api/v2/shipment-orders/",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "call.resource",
                "pt": "msg",
                "to": "payload.id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "urlsubpath",
                "pt": "msg",
                "to": "call.path&call.resource",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "PUT",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "category",
                "pt": "msg",
                "to": "Create DeliveryOrder",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 690,
        "y": 240,
        "wires": [
            [
                "c565ad97.e4728"
            ]
        ]
    },
    {
        "id": "f03a4601.eeda08",
        "type": "function",
        "z": "3f1439ff.274276",
        "name": "AddResultToMessage",
        "func": "if (msg.payload.key){\n    if (msg.sourcepayload)\n    {\n       msg.sourcepayload.arrProcessedOutboundOrderKeys[msg.sourcepayload.nrOfProcessedOutboundOrders] = msg.payload.key\n        msg.sourcepayload.nrOfProcessedOutboundOrders = msg.sourcepayload.nrOfProcessedOutboundOrders + 1\n \n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 180,
        "wires": [
            [
                "a52cbc8.5b5b44"
            ]
        ]
    },
    {
        "id": "109fc901.0da8e7",
        "type": "change",
        "z": "3f1439ff.274276",
        "name": "restoreInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sourcepayload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 860,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "91fdc1.6773224",
        "type": "change",
        "z": "3f1439ff.274276",
        "name": "SaveInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "sourcepayload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 250,
        "y": 40,
        "wires": [
            [
                "8c10ef8b.1e001"
            ]
        ]
    },
    {
        "id": "af5b4b20.040a98",
        "type": "change",
        "z": "3f1439ff.274276",
        "name": "Prepare API Call params",
        "rules": [
            {
                "t": "set",
                "p": "call.path",
                "pt": "msg",
                "to": "/api/v1/outbound-orders/",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "call.resource",
                "pt": "msg",
                "to": "payload.id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "urlsubpath",
                "pt": "msg",
                "to": "call.path&call.resource",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "PUT",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "category",
                "pt": "msg",
                "to": "Create OutboundOrder",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 870,
        "y": 40,
        "wires": [
            [
                "641e97d7.48ffa8"
            ]
        ]
    },
    {
        "id": "641e97d7.48ffa8",
        "type": "subflow:6ad93671.a35278",
        "z": "3f1439ff.274276",
        "name": "",
        "env": [],
        "x": 180,
        "y": 180,
        "wires": [
            [
                "f03a4601.eeda08"
            ]
        ]
    },
    {
        "id": "8c10ef8b.1e001",
        "type": "change",
        "z": "3f1439ff.274276",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sourcepayload.arrObjOutboundOrder[msg.sourcepayload.nrOfProcessedOutboundOrders]",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 520,
        "y": 60,
        "wires": [
            [
                "af5b4b20.040a98"
            ]
        ]
    },
    {
        "id": "a52cbc8.5b5b44",
        "type": "switch",
        "z": "3f1439ff.274276",
        "name": "",
        "property": "sourcepayload.nrOfProcessedOutboundOrders",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "sourcepayload.nrOfOutboundOrdersToProcess",
                "vt": "msg"
            },
            {
                "t": "gte",
                "v": "sourcepayload.nrOfOutboundOrdersToProcess",
                "vt": "msg"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 590,
        "y": 180,
        "wires": [
            [
                "8c10ef8b.1e001"
            ],
            [
                "109fc901.0da8e7"
            ]
        ]
    },
    {
        "id": "ba69c35a.27d27",
        "type": "change",
        "z": "af0e5779.77fe48",
        "name": "SaveInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "sourcepayload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 230,
        "y": 60,
        "wires": [
            [
                "b1e0c297.a38b8"
            ]
        ]
    },
    {
        "id": "70fa3eb5.25ac8",
        "type": "change",
        "z": "af0e5779.77fe48",
        "name": "restoreInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sourcepayload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1160,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "6a1fac.52818054",
        "type": "subflow:6ad93671.a35278",
        "z": "af0e5779.77fe48",
        "name": "",
        "env": [],
        "x": 480,
        "y": 320,
        "wires": [
            [
                "6744d819.fc23b8"
            ]
        ]
    },
    {
        "id": "6744d819.fc23b8",
        "type": "function",
        "z": "af0e5779.77fe48",
        "name": "AddResultToMessage",
        "func": "msg.sourcepayload.nrOfLinkedOutboundOrdersToDelivery =  msg.sourcepayload.nrOfLinkedOutboundOrdersToDelivery + 1\nmsg.sourcepayload.DoInsert = false\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 300,
        "wires": [
            [
                "e6c36c1f.9277a"
            ]
        ]
    },
    {
        "id": "dd6501db.c01e6",
        "type": "template",
        "z": "af0e5779.77fe48",
        "name": "templateDelOutbound",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n \"shipmentOrderKey\": \"{{{sourcepayload.DeliveryOrderDownloadResult}}}\",\n  \"outboundOrderKey\": \"{{{sourcepayload.OutboundOrderKey}}}\"\n}",
        "output": "json",
        "x": 400,
        "y": 180,
        "wires": [
            [
                "bc27cb6b.a11598"
            ]
        ]
    },
    {
        "id": "e6c36c1f.9277a",
        "type": "switch",
        "z": "af0e5779.77fe48",
        "name": "",
        "property": "sourcepayload.nrOfLinkedOutboundOrdersToDelivery",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "sourcepayload.nrOfOutboundOrdersToProcess",
                "vt": "msg"
            },
            {
                "t": "gte",
                "v": "sourcepayload.nrOfOutboundOrdersToProcess",
                "vt": "msg"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 930,
        "y": 320,
        "wires": [
            [
                "b1e0c297.a38b8"
            ],
            [
                "70fa3eb5.25ac8"
            ]
        ]
    },
    {
        "id": "bc27cb6b.a11598",
        "type": "change",
        "z": "af0e5779.77fe48",
        "name": "Prepare API Call params",
        "rules": [
            {
                "t": "set",
                "p": "urlsubpath",
                "pt": "msg",
                "to": "/api/v1/shipment/add-outbound-order",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "POST",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "category",
                "pt": "msg",
                "to": "Create Delivery",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 230,
        "y": 320,
        "wires": [
            [
                "6a1fac.52818054"
            ]
        ]
    },
    {
        "id": "b1e0c297.a38b8",
        "type": "change",
        "z": "af0e5779.77fe48",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "sourcepayload.OutboundOrderKey",
                "pt": "msg",
                "to": "sourcepayload.arrProcessedOutboundOrderKeys[msg.sourcepayload.nrOfLinkedOutboundOrdersToDelivery]",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 640,
        "y": 80,
        "wires": [
            [
                "c56bc39b.e5ec7"
            ]
        ]
    },
    {
        "id": "c56bc39b.e5ec7",
        "type": "function",
        "z": "af0e5779.77fe48",
        "name": "validateInsert",
        "func": "msg.sourcepayload.OutboundOrderKey\n  msg.sourcepayload.DoInsert = false\n  \nif (msg.sourcepayload.OutboundOrderKey){\n    \n    var localOutboundOrder\n    \n        for (let i = 0; i < msg.sourcepayload.arrObjOutboundOrder.length; i++) {\n            localOutboundOrder =  msg.sourcepayload.arrObjOutboundOrder[i]\n     \n                    if (localOutboundOrder)\n                    {\n                        if (localOutboundOrder.id == msg.sourcepayload.OutboundOrderKey)\n                        {\n             \n                            if (localOutboundOrder.usrFlg1 == false)\n                             {\n                                msg.sourcepayload.DoInsert = false\n                             \n                                }\n                                else\n                                {\n                                    msg.sourcepayload.DoInsert = true\n                                }\n                                  \n                                break;\n                         }\n         \n         \n                    }\n        }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 100,
        "wires": [
            [
                "a9838851.f77898",
                "ae494e57.c0bba"
            ]
        ]
    },
    {
        "id": "a9838851.f77898",
        "type": "switch",
        "z": "af0e5779.77fe48",
        "name": "",
        "property": "sourcepayload.DoInsert",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 150,
        "y": 160,
        "wires": [
            [
                "dd6501db.c01e6"
            ],
            [
                "6744d819.fc23b8"
            ]
        ]
    },
    {
        "id": "ae494e57.c0bba",
        "type": "debug",
        "z": "af0e5779.77fe48",
        "name": "AddToDeliveryAfterValidation",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1240,
        "y": 80,
        "wires": []
    },
    {
        "id": "55514873.2f46c8",
        "type": "change",
        "z": "4bfe965d.e41428",
        "name": "Prepare API Call params",
        "rules": [
            {
                "t": "set",
                "p": "call.path",
                "pt": "msg",
                "to": "/api/v1/suppliers/",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "call.resource",
                "pt": "msg",
                "to": "payload.id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "urlsubpath",
                "pt": "msg",
                "to": "call.path&call.resource",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "PUT",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "category",
                "pt": "msg",
                "to": "Create Supplier",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 410,
        "y": 100,
        "wires": [
            [
                "d6ccbf74.8881a"
            ]
        ]
    },
    {
        "id": "39b2664f.01bbda",
        "type": "template",
        "z": "4bfe965d.e41428",
        "name": "templateSupplier",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n  \"description\":\"{{{payload.objsupplier.NAME}}}\",\n  \"id\": \"{{{payload.objsupplier.ID}}}\",\n  \"assetControlled\": true,\n  \"languageISOCode\": \"{{{payload.objsupplier.LANGUAGEISOCODE}}}\",\n  \"postalAddresses\": [\n    {\n      \"name\": \"{{{payload.objsupplier.NAME}}}\",\n      \"city\": \"{{{payload.objsupplier.CITY}}}\",\n      \"countryISO2Code\": \"{{{payload.objsupplier.LANGUAGEISOCODE}}}\",\n      \"countryName\": \"{{{payload.objsupplier.COUNTRY}}}\",\n      \"languageISOCode\": \"{{{payload.objsupplier.LANGUAGEISOCODE}}}\",\n      \"street\": \"{{{payload.objsupplier.STREET}}}\",\n      \"zipPostalCode\": \"{{{payload.objsupplier.POSTALCODE}}}\"\n    }\n  ]\n  }",
        "output": "json",
        "x": 310,
        "y": 180,
        "wires": [
            [
                "55514873.2f46c8"
            ]
        ]
    },
    {
        "id": "d6ccbf74.8881a",
        "type": "subflow:6ad93671.a35278",
        "z": "4bfe965d.e41428",
        "name": "",
        "env": [],
        "x": 620,
        "y": 220,
        "wires": [
            [
                "b7b1ec7d.51641"
            ]
        ]
    },
    {
        "id": "5a68056a.d2efac",
        "type": "change",
        "z": "4bfe965d.e41428",
        "name": "SaveInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "sourcepayload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 150,
        "y": 100,
        "wires": [
            [
                "39b2664f.01bbda"
            ]
        ]
    },
    {
        "id": "d35d26c0.205898",
        "type": "change",
        "z": "4bfe965d.e41428",
        "name": "restoreInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sourcepayload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 920,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "b7b1ec7d.51641",
        "type": "function",
        "z": "4bfe965d.e41428",
        "name": "AddResultToMessage",
        "func": "if (msg.payload.key){\n    if (msg.sourcepayload)\n    {\n        msg.sourcepayload.SupplierDownloadResult = msg.payload.key\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 140,
        "wires": [
            [
                "d35d26c0.205898"
            ]
        ]
    },
    {
        "id": "a3ab645.cce6598",
        "type": "change",
        "z": "fc598934.190128",
        "name": "restoreInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sourcepayload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 880,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "cb15f0ba.9c916",
        "type": "switch",
        "z": "fc598934.190128",
        "name": "",
        "property": "sourcepayload.nrOfProcessedinboundOrders",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "sourcepayload.nrOfinboundOrdersToProcess",
                "vt": "msg"
            },
            {
                "t": "gte",
                "v": "sourcepayload.nrOfinboundOrdersToProcess",
                "vt": "msg"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 630,
        "y": 220,
        "wires": [
            [
                "5e7ddac3.3a5524"
            ],
            [
                "a3ab645.cce6598"
            ]
        ]
    },
    {
        "id": "b7f0d95.94d8828",
        "type": "function",
        "z": "fc598934.190128",
        "name": "AddResultToMessage",
        "func": "\n     \nmsg.sourcepayload.nrOfProcessedinboundOrders = msg.sourcepayload.nrOfProcessedinboundOrders + 1\n \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 340,
        "wires": [
            [
                "cb15f0ba.9c916"
            ]
        ]
    },
    {
        "id": "8e17829d.6c278",
        "type": "subflow:6ad93671.a35278",
        "z": "fc598934.190128",
        "name": "",
        "env": [],
        "x": 200,
        "y": 240,
        "wires": [
            [
                "b7f0d95.94d8828"
            ]
        ]
    },
    {
        "id": "b1262e68.eca1b",
        "type": "change",
        "z": "fc598934.190128",
        "name": "SaveInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "sourcepayload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 270,
        "y": 100,
        "wires": [
            [
                "5e7ddac3.3a5524"
            ]
        ]
    },
    {
        "id": "5e7ddac3.3a5524",
        "type": "change",
        "z": "fc598934.190128",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sourcepayload.arrObjInboundOrder[msg.sourcepayload.nrOfProcessedinboundOrders]",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 540,
        "y": 120,
        "wires": [
            [
                "fa87762b.bf62f8"
            ]
        ]
    },
    {
        "id": "fa87762b.bf62f8",
        "type": "change",
        "z": "fc598934.190128",
        "name": "Prepare API Call params",
        "rules": [
            {
                "t": "set",
                "p": "call.path",
                "pt": "msg",
                "to": "/api/v1/return-orders/",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "call.resource",
                "pt": "msg",
                "to": "payload.id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "urlsubpath",
                "pt": "msg",
                "to": "call.path&call.resource",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "PUT",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "category",
                "pt": "msg",
                "to": "Create ReturnOrder",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 890,
        "y": 100,
        "wires": [
            [
                "8e17829d.6c278"
            ]
        ]
    },
    {
        "id": "1acfbdac.1fad92",
        "type": "function",
        "z": "3d042f59.b938e",
        "name": "AddResultToMessage",
        "func": "if (msg.payload){\n    if (msg.sourcepayload)\n    {\n       msg.sourcepayload.arrUploadedOutboundOrders[msg.sourcepayload.uploadOutboundOrderCounter] = msg.payload\n       \n    }\n}\n\nmsg.sourcepayload.uploadOutboundOrderCounter = msg.sourcepayload.uploadOutboundOrderCounter + 1\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 300,
        "wires": [
            [
                "c811a38f.d923a"
            ]
        ]
    },
    {
        "id": "3752953f.75c12a",
        "type": "change",
        "z": "3d042f59.b938e",
        "name": "restoreInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sourcepayload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 840,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "285a0e0c.6606a2",
        "type": "change",
        "z": "3d042f59.b938e",
        "name": "SaveInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "sourcepayload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 230,
        "y": 100,
        "wires": [
            [
                "4460b83e.32c2b8"
            ]
        ]
    },
    {
        "id": "117a821d.d2b2be",
        "type": "change",
        "z": "3d042f59.b938e",
        "name": "Prepare API Call params",
        "rules": [
            {
                "t": "set",
                "p": "call.path",
                "pt": "msg",
                "to": "/api/v1/outbound-orders/",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "call.resource",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "urlsubpath",
                "pt": "msg",
                "to": "call.path&call.resource",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "GET",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "category",
                "pt": "msg",
                "to": "Get OutboundOrder",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 850,
        "y": 100,
        "wires": [
            [
                "89610d88.6b13d"
            ]
        ]
    },
    {
        "id": "4460b83e.32c2b8",
        "type": "change",
        "z": "3d042f59.b938e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sourcepayload.arrObjOutboundOrder[msg.sourcepayload.uploadOutboundOrderCounter].id",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 120,
        "wires": [
            [
                "117a821d.d2b2be"
            ]
        ]
    },
    {
        "id": "c811a38f.d923a",
        "type": "switch",
        "z": "3d042f59.b938e",
        "name": "",
        "property": "sourcepayload.uploadOutboundOrderCounter",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "sourcepayload.nrOfOutboundOrdersToProcess",
                "vt": "msg"
            },
            {
                "t": "gte",
                "v": "sourcepayload.nrOfOutboundOrdersToProcess",
                "vt": "msg"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 590,
        "y": 240,
        "wires": [
            [
                "4460b83e.32c2b8"
            ],
            [
                "3752953f.75c12a"
            ]
        ]
    },
    {
        "id": "89610d88.6b13d",
        "type": "subflow:e5d52753.a3e378",
        "z": "3d042f59.b938e",
        "name": "",
        "env": [],
        "x": 120,
        "y": 240,
        "wires": [
            [
                "1acfbdac.1fad92",
                "600ba68dd93b9e54"
            ]
        ]
    },
    {
        "id": "600ba68dd93b9e54",
        "type": "debug",
        "z": "3d042f59.b938e",
        "name": "getOutboundOrder",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 420,
        "wires": []
    },
    {
        "id": "c4248e91.2f74f",
        "type": "change",
        "z": "5b600531.9e834c",
        "name": "SaveInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "sourcepayload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 310,
        "y": 80,
        "wires": [
            [
                "50d6a46a.bae9ec"
            ]
        ]
    },
    {
        "id": "c85d6bd7.0e6708",
        "type": "change",
        "z": "5b600531.9e834c",
        "name": "restoreInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sourcepayload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1260,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "7136b2fb.2d6cac",
        "type": "subflow:6ad93671.a35278",
        "z": "5b600531.9e834c",
        "name": "",
        "env": [],
        "x": 560,
        "y": 340,
        "wires": [
            [
                "2a5fc127.3e297e"
            ]
        ]
    },
    {
        "id": "2a5fc127.3e297e",
        "type": "function",
        "z": "5b600531.9e834c",
        "name": "AddResultToMessage",
        "func": "if (msg.payload.key){\n    if (msg.sourcepayload)\n    {\n        msg.sourcepayload.deliveryRelationToDeleteCounter =  msg.sourcepayload.deliveryRelationToDeleteCounter + 1\n\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 340,
        "wires": [
            [
                "238f1742.14e928"
            ]
        ]
    },
    {
        "id": "a94cabe4.a29e58",
        "type": "template",
        "z": "5b600531.9e834c",
        "name": "templateDelOutbound",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n \"shipmentOrderKey\": \"{{{sourcepayload.DeliveryOrderKey}}}\",\n  \"outboundOrderKey\": \"{{{sourcepayload.OutboundOrderKey}}}\"\n}",
        "output": "json",
        "x": 860,
        "y": 100,
        "wires": [
            [
                "465c6199.f8d44"
            ]
        ]
    },
    {
        "id": "238f1742.14e928",
        "type": "switch",
        "z": "5b600531.9e834c",
        "name": "",
        "property": "sourcepayload.deliveryRelationToDeleteCounter",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lte",
                "v": "sourcepayload.numberOfDeliveryRelationsToDelete",
                "vt": "msg"
            },
            {
                "t": "gte",
                "v": "sourcepayload.numberOfDeliveryRelationsToDelete",
                "vt": "msg"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 970,
        "y": 340,
        "wires": [
            [
                "50d6a46a.bae9ec"
            ],
            [
                "c85d6bd7.0e6708"
            ]
        ]
    },
    {
        "id": "465c6199.f8d44",
        "type": "change",
        "z": "5b600531.9e834c",
        "name": "Prepare API Call params",
        "rules": [
            {
                "t": "set",
                "p": "urlsubpath",
                "pt": "msg",
                "to": "/api/v1/shipment/remove-outbound-order",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "POST",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "category",
                "pt": "msg",
                "to": "Remove OutboundOrder From Deliver",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1250,
        "y": 100,
        "wires": [
            [
                "7136b2fb.2d6cac"
            ]
        ]
    },
    {
        "id": "50d6a46a.bae9ec",
        "type": "change",
        "z": "5b600531.9e834c",
        "name": "SetKeys",
        "rules": [
            {
                "t": "set",
                "p": "sourcepayload.DeliveryOrderKey",
                "pt": "msg",
                "to": "sourcepayload.arrDeliveryRelationToDelete[msg.sourcepayload.deliveryRelationToDeleteCounter].deliveryid",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "sourcepayload.OutboundOrderKey",
                "pt": "msg",
                "to": "sourcepayload.arrDeliveryRelationToDelete[msg.sourcepayload.deliveryRelationToDeleteCounter].outboundOrderid",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 530,
        "y": 100,
        "wires": [
            [
                "a94cabe4.a29e58"
            ]
        ]
    },
    {
        "id": "58036103.4a8b2",
        "type": "switch",
        "z": "5b600531.9e834c",
        "name": "",
        "property": "sourcepayload.numberOfDeliveryRelationsToDelete",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 90,
        "y": 420,
        "wires": [
            [
                "c4248e91.2f74f"
            ],
            []
        ]
    },
    {
        "id": "799ba87c.c5a498",
        "type": "debug",
        "z": "e5d52753.a3e378",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 170,
        "y": 100,
        "wires": []
    },
    {
        "id": "9c3ac553.742be8",
        "type": "debug",
        "z": "e5d52753.a3e378",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 430,
        "y": 100,
        "wires": []
    },
    {
        "id": "f5abe220.20501",
        "type": "change",
        "z": "e5d52753.a3e378",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "baseurl",
                "pt": "msg",
                "to": "OBJT_APIGW_URL",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "baseurl&urlsubpath",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "apipayload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 440,
        "y": 180,
        "wires": [
            [
                "532c0da.4273ef4"
            ]
        ]
    },
    {
        "id": "532c0da.4273ef4",
        "type": "subflow:8a0198ba.8aa2b8",
        "z": "e5d52753.a3e378",
        "name": "",
        "env": [],
        "x": 660,
        "y": 180,
        "wires": [
            [
                "62af4125.0987e",
                "6ce21817.927258"
            ]
        ]
    },
    {
        "id": "62af4125.0987e",
        "type": "debug",
        "z": "e5d52753.a3e378",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 120,
        "wires": []
    },
    {
        "id": "6ce21817.927258",
        "type": "http request",
        "z": "e5d52753.a3e378",
        "name": "Execute API",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 910,
        "y": 180,
        "wires": [
            [
                "be806f61.dbe26",
                "9c1bed0b.6f91a"
            ]
        ]
    },
    {
        "id": "be806f61.dbe26",
        "type": "subflow:eb038fec.a7394",
        "z": "e5d52753.a3e378",
        "name": "",
        "env": [],
        "x": 1120,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "3d85b334.81e94c",
        "type": "subflow:b28f8550.ec044",
        "z": "e5d52753.a3e378",
        "name": "",
        "env": [],
        "x": 220,
        "y": 180,
        "wires": [
            [
                "f5abe220.20501",
                "9c3ac553.742be8"
            ]
        ]
    },
    {
        "id": "9c1bed0b.6f91a",
        "type": "debug",
        "z": "e5d52753.a3e378",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 120,
        "wires": []
    },
    {
        "id": "b219963a.9a0468",
        "type": "subflow:6ad93671.a35278",
        "z": "4cb0a8d8.353488",
        "name": "",
        "env": [],
        "x": 720,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "e3644f3c.f0211",
        "type": "change",
        "z": "4cb0a8d8.353488",
        "name": "Prepare API Call params",
        "rules": [
            {
                "t": "set",
                "p": "call.path",
                "pt": "msg",
                "to": "/api/v1/production-orders/",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "call.resource",
                "pt": "msg",
                "to": "payload.id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "urlsubpath",
                "pt": "msg",
                "to": "call.path&call.resource",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "DELETE",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "category",
                "pt": "msg",
                "to": "Delete ProductionOrder",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 510,
        "y": 100,
        "wires": [
            [
                "b219963a.9a0468"
            ]
        ]
    },
    {
        "id": "e4621d52.d0e02",
        "type": "change",
        "z": "4cb0a8d8.353488",
        "name": "SaveInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "sourcepayload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 190,
        "y": 140,
        "wires": [
            [
                "43bf3708.d8c3c8"
            ]
        ]
    },
    {
        "id": "43bf3708.d8c3c8",
        "type": "change",
        "z": "4cb0a8d8.353488",
        "name": "SetKeys",
        "rules": [
            {
                "t": "set",
                "p": "payload.id",
                "pt": "msg",
                "to": "sourcepayload.poData.ProductionOrderID",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 400,
        "y": 180,
        "wires": [
            [
                "e3644f3c.f0211"
            ]
        ]
    },
    {
        "id": "2a7924b.cc11edc",
        "type": "function",
        "z": "41ffb55d.ec50bc",
        "name": "AddResultToMessage",
        "func": "if (msg.payload.key){\n    if (msg.sourcepayload)\n    {\n        msg.sourcepayload.ContainerLayerType = msg.payload.key\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 885,
        "y": 178,
        "wires": [
            [
                "c58317de.d9eac8"
            ]
        ]
    },
    {
        "id": "286b260b.8920ca",
        "type": "subflow:6ad93671.a35278",
        "z": "41ffb55d.ec50bc",
        "name": "",
        "env": [],
        "x": 685,
        "y": 258,
        "wires": [
            [
                "2a7924b.cc11edc"
            ]
        ]
    },
    {
        "id": "c58317de.d9eac8",
        "type": "change",
        "z": "41ffb55d.ec50bc",
        "name": "restoreInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sourcepayload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 985,
        "y": 278,
        "wires": [
            []
        ]
    },
    {
        "id": "b3d952bc.ae52",
        "type": "change",
        "z": "41ffb55d.ec50bc",
        "name": "Prepare API Call params",
        "rules": [
            {
                "t": "set",
                "p": "call.path",
                "pt": "msg",
                "to": "/api/v1/container-types/",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "call.resource",
                "pt": "msg",
                "to": "payload.id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "urlsubpath",
                "pt": "msg",
                "to": "call.path&call.resource",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "PUT",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "category",
                "pt": "msg",
                "to": "Create ContainerType ",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 475,
        "y": 138,
        "wires": [
            [
                "286b260b.8920ca"
            ]
        ]
    },
    {
        "id": "a550efa6.6fd29",
        "type": "template",
        "z": "41ffb55d.ec50bc",
        "name": "templateLayerContainerType",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n  \"cubics\": \"{{{payload.itemData.boxBrutoHeight}}}\",\n  \"id\":  \"{{{payload.itemData.boxLayerName}}}\",\n  \"name\":  \"{{{payload.itemData.boxLayerName}}}\",\n  \"uomKey\": \"each\"\n}",
        "output": "json",
        "x": 405,
        "y": 218,
        "wires": [
            [
                "b3d952bc.ae52"
            ]
        ]
    },
    {
        "id": "1c02b215.fa060e",
        "type": "change",
        "z": "41ffb55d.ec50bc",
        "name": "SaveInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "sourcepayload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 215,
        "y": 138,
        "wires": [
            [
                "a550efa6.6fd29"
            ]
        ]
    },
    {
        "id": "db30e7f7.5c0058",
        "type": "function",
        "z": "9165d03b.8ba1",
        "name": "AddResultToMessage",
        "func": "if (msg.payload.key){\n    if (msg.sourcepayload)\n    {\n        msg.sourcepayload.PackConfigTemplateName = msg.payload.key\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 180,
        "wires": [
            [
                "eefc6ac6.e6b268"
            ]
        ]
    },
    {
        "id": "56a61c87.f6a9d4",
        "type": "subflow:6ad93671.a35278",
        "z": "9165d03b.8ba1",
        "name": "",
        "env": [],
        "x": 680,
        "y": 260,
        "wires": [
            [
                "db30e7f7.5c0058"
            ]
        ]
    },
    {
        "id": "eefc6ac6.e6b268",
        "type": "change",
        "z": "9165d03b.8ba1",
        "name": "restoreInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sourcepayload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 980,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "9342c256.9e8d4",
        "type": "change",
        "z": "9165d03b.8ba1",
        "name": "Prepare API Call params",
        "rules": [
            {
                "t": "set",
                "p": "call.path",
                "pt": "msg",
                "to": "/api/v2/packaging-templates/",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "call.resource",
                "pt": "msg",
                "to": "payload.name",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "urlsubpath",
                "pt": "msg",
                "to": "call.path&call.resource",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "PUT",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "category",
                "pt": "msg",
                "to": "Create Packconfig ",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 140,
        "wires": [
            [
                "56a61c87.f6a9d4"
            ]
        ]
    },
    {
        "id": "7ffae6b5.91c0d8",
        "type": "change",
        "z": "9165d03b.8ba1",
        "name": "SaveInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "sourcepayload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 210,
        "y": 140,
        "wires": [
            [
                "70b111d4.ed243"
            ]
        ]
    },
    {
        "id": "70b111d4.ed243",
        "type": "change",
        "z": "9165d03b.8ba1",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sourcepayload.packConfig",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 220,
        "wires": [
            [
                "9342c256.9e8d4"
            ]
        ]
    },
    {
        "id": "e9cbc342.0876c",
        "type": "function",
        "z": "da45371f.14a148",
        "name": "AddResultToMessage",
        "func": "if (msg.payload.key){\n    if (msg.sourcepayload)\n    {\n        msg.sourcepayload.ItemKey = msg.payload.key\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 220,
        "wires": [
            [
                "92f56c92.74763"
            ]
        ]
    },
    {
        "id": "323d77f6.539798",
        "type": "subflow:6ad93671.a35278",
        "z": "da45371f.14a148",
        "name": "",
        "env": [],
        "x": 680,
        "y": 300,
        "wires": [
            [
                "e9cbc342.0876c"
            ]
        ]
    },
    {
        "id": "92f56c92.74763",
        "type": "change",
        "z": "da45371f.14a148",
        "name": "restoreInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sourcepayload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 980,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "b4617029.9e14a",
        "type": "change",
        "z": "da45371f.14a148",
        "name": "Prepare API Call params",
        "rules": [
            {
                "t": "set",
                "p": "call.path",
                "pt": "msg",
                "to": "/api/v1/items/",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "call.resource",
                "pt": "msg",
                "to": "payload.name",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "urlsubpath",
                "pt": "msg",
                "to": "call.path&call.resource",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "PUT",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "category",
                "pt": "msg",
                "to": "Create Item",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 180,
        "wires": [
            [
                "323d77f6.539798"
            ]
        ]
    },
    {
        "id": "2c9c1814.e39378",
        "type": "change",
        "z": "da45371f.14a148",
        "name": "SaveInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "sourcepayload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 210,
        "y": 180,
        "wires": [
            [
                "402199b2.795a58"
            ]
        ]
    },
    {
        "id": "402199b2.795a58",
        "type": "change",
        "z": "da45371f.14a148",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sourcepayload.itemToJason",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 260,
        "wires": [
            [
                "b4617029.9e14a"
            ]
        ]
    },
    {
        "id": "45b77592.a16bec",
        "type": "change",
        "z": "cb35eeda.3713f",
        "name": "Prepare API Call params",
        "rules": [
            {
                "t": "set",
                "p": "call.path",
                "pt": "msg",
                "to": "/api/v1/item-service/apply-packaging-template",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "urlsubpath",
                "pt": "msg",
                "to": "call.path",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "POST",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "category",
                "pt": "msg",
                "to": "Apply packConfig",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 670,
        "y": 120,
        "wires": [
            [
                "e125cae2.91bbe8"
            ]
        ]
    },
    {
        "id": "d5ab8794.f610a8",
        "type": "template",
        "z": "cb35eeda.3713f",
        "name": "templateApplyPackConfig",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n  \"itemKey\": \"{{{payload.ItemKey}}}\",\n  \"packagingTemplateKey\":  \"{{{payload.PackConfigTemplateName}}}\",\n  \"packagingLevels\": [\n    {\n      \"factor\": \"{{{payload.packConfigFactor}}}\",\n      \"level\": 2\n      }\n    ]\n}",
        "output": "json",
        "x": 390,
        "y": 120,
        "wires": [
            [
                "45b77592.a16bec"
            ]
        ]
    },
    {
        "id": "e125cae2.91bbe8",
        "type": "subflow:6ad93671.a35278",
        "z": "cb35eeda.3713f",
        "name": "",
        "env": [],
        "x": 120,
        "y": 200,
        "wires": [
            [
                "fcb2f3c3.cdadd"
            ]
        ]
    },
    {
        "id": "458102e2.d92acc",
        "type": "change",
        "z": "cb35eeda.3713f",
        "name": "SaveInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "sourcepayload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 110,
        "y": 120,
        "wires": [
            [
                "d5ab8794.f610a8"
            ]
        ]
    },
    {
        "id": "fcb2f3c3.cdadd",
        "type": "change",
        "z": "cb35eeda.3713f",
        "name": "restoreInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sourcepayload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "424cce68.8f7e5",
        "type": "subflow:6ad93671.a35278",
        "z": "c32ccc5d.5d3cc",
        "name": "",
        "env": [],
        "x": 660,
        "y": 240,
        "wires": [
            [
                "d69522e7.24eff"
            ]
        ]
    },
    {
        "id": "e7a47cc5.45c23",
        "type": "change",
        "z": "c32ccc5d.5d3cc",
        "name": "Prepare API Call params",
        "rules": [
            {
                "t": "set",
                "p": "call.path",
                "pt": "msg",
                "to": "/api/v2/production-orders/",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "call.resource",
                "pt": "msg",
                "to": "payload.id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "urlsubpath",
                "pt": "msg",
                "to": "call.path&call.resource",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "PUT",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "category",
                "pt": "msg",
                "to": "Create ProductionOrder",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 590,
        "y": 100,
        "wires": [
            [
                "424cce68.8f7e5",
                "afd1c6d99facb964"
            ]
        ]
    },
    {
        "id": "d69522e7.24eff",
        "type": "function",
        "z": "c32ccc5d.5d3cc",
        "name": "AddResultToMessage",
        "func": "if (msg.payload.key){\n    if (msg.sourcepayload)\n    {\n        msg.sourcepayload.PO = msg.payload.key\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 160,
        "wires": [
            [
                "87a13e75.5ec46"
            ]
        ]
    },
    {
        "id": "87a13e75.5ec46",
        "type": "change",
        "z": "c32ccc5d.5d3cc",
        "name": "restoreInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sourcepayload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 960,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "6a9bff0d.90f33",
        "type": "change",
        "z": "c32ccc5d.5d3cc",
        "name": "SaveInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "sourcepayload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 190,
        "y": 120,
        "wires": [
            [
                "4d01bf66.44885"
            ]
        ]
    },
    {
        "id": "4d01bf66.44885",
        "type": "change",
        "z": "c32ccc5d.5d3cc",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sourcepayload.productionOrder",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 240,
        "wires": [
            [
                "e7a47cc5.45c23"
            ]
        ]
    },
    {
        "id": "bbd09ba86bd234f5",
        "type": "comment",
        "z": "c32ccc5d.5d3cc",
        "name": "",
        "info": "apicall v1 <-> v2",
        "x": 1250,
        "y": 100,
        "wires": []
    },
    {
        "id": "afd1c6d99facb964",
        "type": "debug",
        "z": "c32ccc5d.5d3cc",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 80,
        "wires": []
    },
    {
        "id": "d52d13fd.47125",
        "type": "change",
        "z": "1540ec98.e32783",
        "name": "SaveInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "sourcepayload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 150,
        "y": 140,
        "wires": [
            [
                "523627d0.c8d438"
            ]
        ]
    },
    {
        "id": "523627d0.c8d438",
        "type": "change",
        "z": "1540ec98.e32783",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sourcepayload.arrAdjustQCLotRequest[msg.sourcepayload.adjustLotReqCounter]",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 440,
        "y": 140,
        "wires": [
            [
                "e56f84c5.047758"
            ]
        ]
    },
    {
        "id": "e56f84c5.047758",
        "type": "change",
        "z": "1540ec98.e32783",
        "name": "Prepare API Call params",
        "rules": [
            {
                "t": "set",
                "p": "call.path",
                "pt": "msg",
                "to": "/api/v2/inventory/adjust-qc-lot",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "call.resource",
                "pt": "msg",
                "to": "payload.id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "urlsubpath",
                "pt": "msg",
                "to": "call.path&call.resource",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "POST",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "category",
                "pt": "msg",
                "to": "Update lot qc",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 140,
        "wires": [
            [
                "b109de0c.ef433"
            ]
        ]
    },
    {
        "id": "b109de0c.ef433",
        "type": "subflow:6ad93671.a35278",
        "z": "1540ec98.e32783",
        "name": "",
        "env": [],
        "x": 200,
        "y": 280,
        "wires": [
            [
                "05f173421ea397a3"
            ]
        ]
    },
    {
        "id": "05f173421ea397a3",
        "type": "function",
        "z": "1540ec98.e32783",
        "name": "AddResultToMessage",
        "func": "\nmsg.sourcepayload.adjustLotReqCounter = msg.sourcepayload.adjustLotReqCounter + 1\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 280,
        "wires": [
            [
                "8a5a5dbbf042d09e"
            ]
        ]
    },
    {
        "id": "8a5a5dbbf042d09e",
        "type": "switch",
        "z": "1540ec98.e32783",
        "name": "",
        "property": "sourcepayload.adjustLotReqCounter",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "sourcepayload.adjustLotReqArrLength",
                "vt": "msg"
            },
            {
                "t": "gte",
                "v": "sourcepayload.adjustLotReqArrLength",
                "vt": "msg"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 750,
        "y": 280,
        "wires": [
            [
                "523627d0.c8d438"
            ],
            [
                "75a9e4f1d2d832c3"
            ]
        ]
    },
    {
        "id": "75a9e4f1d2d832c3",
        "type": "change",
        "z": "1540ec98.e32783",
        "name": "restoreInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sourcepayload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 960,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "c715b163.5b559",
        "type": "change",
        "z": "3226c621.b984ca",
        "name": "SaveInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "sourcepayload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 270,
        "y": 100,
        "wires": [
            [
                "c83d1f00.533d9"
            ]
        ]
    },
    {
        "id": "c83d1f00.533d9",
        "type": "change",
        "z": "3226c621.b984ca",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sourcepayload.poData.OutputItem",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 540,
        "y": 120,
        "wires": [
            [
                "ccb67387.70fe1"
            ]
        ]
    },
    {
        "id": "ccb67387.70fe1",
        "type": "change",
        "z": "3226c621.b984ca",
        "name": "Prepare API Call params",
        "rules": [
            {
                "t": "set",
                "p": "call.path",
                "pt": "msg",
                "to": "/api/v1/items/",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "call.resource",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "urlsubpath",
                "pt": "msg",
                "to": "call.path&call.resource",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "GET",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "category",
                "pt": "msg",
                "to": "Get Item",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 830,
        "y": 120,
        "wires": [
            [
                "fc983bf0.2a11c8"
            ]
        ]
    },
    {
        "id": "fc983bf0.2a11c8",
        "type": "subflow:e5d52753.a3e378",
        "z": "3226c621.b984ca",
        "name": "",
        "x": 273,
        "y": 418,
        "wires": [
            [
                "e3e38fa7.b7dc6"
            ]
        ]
    },
    {
        "id": "e3e38fa7.b7dc6",
        "type": "function",
        "z": "3226c621.b984ca",
        "name": "AddResultToMessage",
        "func": "if (msg.payload.key){\n    if (msg.sourcepayload)\n    {\n       msg.sourcepayload.po_outputitem = msg.payload\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 533,
        "y": 418,
        "wires": [
            [
                "f4ef7f7d.c229"
            ]
        ]
    },
    {
        "id": "f4ef7f7d.c229",
        "type": "change",
        "z": "3226c621.b984ca",
        "name": "restoreInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sourcepayload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "daa2ffd938ed76ee",
        "type": "change",
        "z": "4da577a93a5543d4",
        "name": "restoreInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sourcepayload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 800,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "b950412c8d900094",
        "type": "subflow:6ad93671.a35278",
        "z": "4da577a93a5543d4",
        "name": "",
        "env": [],
        "x": 480,
        "y": 280,
        "wires": [
            [
                "daa2ffd938ed76ee"
            ]
        ]
    },
    {
        "id": "5de640dd0c715738",
        "type": "change",
        "z": "4da577a93a5543d4",
        "name": "SaveInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "sourcepayload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 190,
        "y": 120,
        "wires": [
            [
                "be47aae0d9cf6461"
            ]
        ]
    },
    {
        "id": "be47aae0d9cf6461",
        "type": "change",
        "z": "4da577a93a5543d4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sourcepayload.objInboundorder",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 140,
        "wires": [
            [
                "78aa9dd231628006"
            ]
        ]
    },
    {
        "id": "78aa9dd231628006",
        "type": "change",
        "z": "4da577a93a5543d4",
        "name": "Prepare API Call params",
        "rules": [
            {
                "t": "set",
                "p": "call.path",
                "pt": "msg",
                "to": "/api/v1/receipt-orders/",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "call.resource",
                "pt": "msg",
                "to": "payload.id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "urlsubpath",
                "pt": "msg",
                "to": "call.path&call.resource",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "PUT",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "category",
                "pt": "msg",
                "to": "Create InboundOrder",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 810,
        "y": 120,
        "wires": [
            [
                "b950412c8d900094"
            ]
        ]
    },
    {
        "id": "16fc5f2153d21ccf",
        "type": "comment",
        "z": "b0eb94854a31f04c",
        "name": "ReturnOrder",
        "info": "ReturnOrder",
        "x": 290,
        "y": 20,
        "wires": []
    },
    {
        "id": "3191be0558203f8c",
        "type": "debug",
        "z": "b0eb94854a31f04c",
        "name": "AfterInboundorderDL",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1820,
        "y": 900,
        "wires": []
    },
    {
        "id": "40a2d36209cd33b6",
        "type": "subflow:4bfe965d.e41428",
        "z": "b0eb94854a31f04c",
        "name": "",
        "env": [],
        "x": 1140,
        "y": 700,
        "wires": [
            [
                "b731a95bdf301ed4"
            ]
        ]
    },
    {
        "id": "191ee8a6521bd0e5",
        "type": "subflow:a10f5bb2.0ca548",
        "z": "b0eb94854a31f04c",
        "name": "",
        "env": [],
        "x": 1570,
        "y": 740,
        "wires": [
            [
                "540df05bb874cd44"
            ]
        ]
    },
    {
        "id": "b731a95bdf301ed4",
        "type": "switch",
        "z": "b0eb94854a31f04c",
        "name": "switchCarrier",
        "property": "payload.objcarrier",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1350,
        "y": 780,
        "wires": [
            [
                "191ee8a6521bd0e5"
            ],
            []
        ]
    },
    {
        "id": "3dd5f283fe5a73ca",
        "type": "switch",
        "z": "b0eb94854a31f04c",
        "name": "switchSupplier",
        "property": "payload.objsupplier",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 900,
        "y": 740,
        "wires": [
            [
                "40a2d36209cd33b6"
            ],
            [
                "b731a95bdf301ed4"
            ]
        ]
    },
    {
        "id": "540df05bb874cd44",
        "type": "subflow:fc598934.190128",
        "z": "b0eb94854a31f04c",
        "name": "",
        "env": [],
        "x": 2070,
        "y": 820,
        "wires": [
            [
                "3191be0558203f8c"
            ]
        ]
    },
    {
        "id": "4f2ad1a96a08a1fd",
        "type": "function",
        "z": "b0eb94854a31f04c",
        "name": "FilterRETURNObjects",
        "func": "var listOfInboundOrders = msg.payload.ZDES.IDOC[0].E1EDL20\n\nvar objsupplier\nvar objcarrier\nvar nrOfInboundOrders = 0\n\n\nfunction convertToDate(x){\nvar year = x.substr(0,4)\nvar month = x.substr(4,2)\nvar day = x.substr(6,2)\n\n//var result = new Date()\n//result.setYear(year)\n//result.setMonth(month - 1)\n//result.setDate(day)\n//result.setHours(2)\n//result.setMinutes(1)\n\nreturn year + \"-\" + month + \"-\" + day   \n}\n\n\n\n\n\n\nvar arrInboundOrder =[];\nfor (var index in listOfInboundOrders) {\n    \n    \n    var objReturnorder = {\n    \"carrierKey\" : \"\",\n  //  \"customerKey\" : \"\",\n    \"description\" : \"\",\n    \"dtsDueBefore\" : \"\",\n    \"id\" : \"\",\n    \"returnType\": \"DEFAULT\",\n    \"key\" : \"\",\n    \"name\" : \"\",\n    \"returnLines\": [],\n    \"usrTxt1\" : \"\",\n    \"usrTxt2\" : \"\"\n    };\n    \n\n    \n\n    objReturnorder.id = listOfInboundOrders[index]. VBELN[0]\n    \n\n     try{\n    objReturnorder.dtsDueBefore = listOfInboundOrders[index].E1EDT13[4].NTANF[0]\n    objReturnorder.dtsDueBefore = convertToDate(objReturnorder.dtsDueBefore)\n     }catch(err){\n        \n    }\n     try{\n   // SAPUSER = \n    objReturnorder.usrTxt2 = listOfInboundOrders[index].E1EDL21[0].ZE1EDL21[0].ERNAM[0]\n     }catch(err){\n        \n    }\n  \n     try{\n   //PurchaseOrderNr \n    objReturnorder.usrTxt1 = listOfInboundOrders[index].E1EDL24[0].VGBEL[0]\n   \n     }catch(err){\n        \n    }\n\n\n\n    var listOfPartnerAddresses = listOfInboundOrders[index].E1ADRM1\n    if (listOfPartnerAddresses){\n        \n         for (var indexAddresses in listOfPartnerAddresses) {\n                 var objPartnerAddress = {\n                    TYPE : \"\",\n                    ID : \"\",\n                    NAME : \"\",\n                    STREET : \"\",\n                    POSTALCODE : \"\",\n                    CITY : \"\",\n                    COUNTRY: \"\",\n                    LANGUAGEISOCODE: \"\"\n                    }; \n        \n         objPartnerAddress.TYPE = listOfPartnerAddresses[indexAddresses].PARTNER_Q[0]\n         objPartnerAddress.ID = listOfPartnerAddresses[indexAddresses].PARTNER_ID[0]\n         objPartnerAddress.NAME = listOfPartnerAddresses[indexAddresses].NAME1[0]\n         objPartnerAddress.STREET = listOfPartnerAddresses[indexAddresses].STREET1[0]\n         objPartnerAddress.POSTALCODE = listOfPartnerAddresses[indexAddresses].POSTL_COD1[0]\n         objPartnerAddress.CITY = listOfPartnerAddresses[indexAddresses].CITY1[0]\n         objPartnerAddress.COUNTRY = listOfPartnerAddresses[indexAddresses].COUNTRY1[0]\n         if (objPartnerAddress.COUNTRY){\n                if (objPartnerAddress.COUNTRY == 'PL'){\n                         objPartnerAddress.LANGUAGEISOCODE = 'pl'\n                    }\n                    else{\n                        objPartnerAddress.LANGUAGEISOCODE = 'en'\n                                }\n         }\n         else {\n              objPartnerAddress.LANGUAGEISOCODE = 'en'\n         }\n        \n      \n            if (objPartnerAddress.TYPE){\n                if (objPartnerAddress.TYPE == 'LF'){\n                    objReturnorder.supplierKey = objPartnerAddress.ID\n                    objsupplier =   objPartnerAddress\n                }\n            }\n            \n            if (objPartnerAddress.TYPE){\n                if (objPartnerAddress.TYPE == 'SP'){\n                    objReturnorder.carrierKey = objPartnerAddress.ID\n                    objcarrier =   objPartnerAddress\n                }\n            }\n    \n             \n         }\n         \n    }\n    \n    \n\n    \n     var listOfInboundOperations = listOfInboundOrders[index].E1EDL24\n    \n    \n    if (listOfInboundOperations){\n        \n        for (var indexOperation in listOfInboundOperations) {\n            \n        \n           var objInboundOperation = {\n            \"name\" : \"\",\n            \"description\": \"\",\n            \"itemKey\": \"\",\n            \"quantity\" : \"\",\n            \"lotId\" : \"\",\n            \"qcKey\" : \"\",\n            \"uomKey\" : \"\",\n            \"inventoryCode5\": \"\"\n        }; \n            \n            \n            \n            \n              objInboundOperation.name = listOfInboundOperations[indexOperation].POSNR[0]\n              objInboundOperation.description = listOfInboundOperations[indexOperation].ARKTX[0]\n              objInboundOperation.itemKey = listOfInboundOperations[indexOperation].MATNR[0]\n              objInboundOperation.quantity = listOfInboundOperations[indexOperation].LFIMG[0]\n              objInboundOperation.lotId = listOfInboundOperations[indexOperation].CHARG[0]\n             // objOutboundOperation.uomKey = listOfInboundOperations[indexOperation].VRKME[0]\n             objInboundOperation.uomKey = \"kg\"\n              //objOutboundOperation.QCID = listOfInboundOperations[indexOperation].CHARG[0]\n              objInboundOperation.qcKey = \"QualityInspection\"\n              objInboundOperation.inventoryCode5 = listOfInboundOperations[indexOperation].WERKS[0]\n              \n              //add result\n              objReturnorder.returnLines[indexOperation] = objInboundOperation  \n            \n            \n        }\n        \n        \n    }\n\n    \n    nrOfInboundOrders = nrOfInboundOrders +1\n\n    arrInboundOrder[index] = objReturnorder\n}\n\n\ndelete msg.payload.ZDES\n//msg.payload.listOfInboundOperations =listOfInboundOperations\n//msg.payload.listOfInboundOrders = listOfInboundOrders\nmsg.payload.nrOfinboundOrdersToProcess  = nrOfInboundOrders\n\n\n\nmsg.payload.nrOfProcessedinboundOrders  =  0\nmsg.payload.inboundOrderKey = \"\"\nmsg.payload.objcarrier = objcarrier\nmsg.payload.objsupplier = objsupplier\n\nmsg.payload.arrObjInboundOrder = arrInboundOrder\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 200,
        "wires": [
            [
                "3dd5f283fe5a73ca"
            ]
        ]
    },
    {
        "id": "78576a94.2cd6dc",
        "type": "switch",
        "z": "b28f8550.ec044",
        "name": "Existing OauthSession?",
        "property": "oauthSession",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 150,
        "y": 240,
        "wires": [
            [
                "506a86a1.6a42e",
                "1288161581746123"
            ],
            [
                "6c970e67.5fc01"
            ]
        ]
    },
    {
        "id": "506a86a1.6a42e",
        "type": "template",
        "z": "b28f8550.ec044",
        "name": "NewTokenTemplate",
        "field": "payload",
        "fieldType": "msg",
        "format": "json",
        "syntax": "mustache",
        "template": "username={{{oauthRequest.OAUTH_USERNAME}}}&password={{{oauthRequest.OAUTH_PASSWORD}}}&client_id={{{oauthRequest.OAUTH_CLIENTID}}}&client_secret={{{oauthRequest.OAUTH_SECRET}}}&grant_type=password",
        "output": "str",
        "x": 493,
        "y": 230,
        "wires": [
            [
                "d27748f2.e0aaf8"
            ]
        ]
    },
    {
        "id": "d27748f2.e0aaf8",
        "type": "http request",
        "z": "b28f8550.ec044",
        "name": "Get New Token",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 703,
        "y": 230,
        "wires": [
            [
                "6191c242.2e2b0c",
                "e7e0a7f3f581519c"
            ]
        ]
    },
    {
        "id": "6191c242.2e2b0c",
        "type": "switch",
        "z": "b28f8550.ec044",
        "name": "200",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 990,
        "y": 240,
        "wires": [
            [
                "61f94834.41783",
                "9570cd5a.abeec8"
            ],
            [
                "f104ea94.afd85"
            ]
        ]
    },
    {
        "id": "61f94834.41783",
        "type": "function",
        "z": "b28f8550.ec044",
        "name": "Save OauthSession",
        "func": "msg.oauthSession = {};\n\nvar now = Date.now();\n\nmsg.oauthSession.access_token = msg.payload.access_token;\nmsg.oauthSession.refresh_token = msg.payload.refresh_token;\n\nmsg.oauthSession.access_token_expires_at = msg.payload.expires_in * 1000 + now;\nmsg.oauthSession.refresh_access_token_at = (msg.payload.expires_in * 1000 * 0.75) + now;\n\nmsg.oauthSession.refresh_token_expires_at = msg.payload.refresh_expires_in * 1000 + now;\nmsg.oauthSession.reauthenticate_at = (msg.payload.refresh_expires_in * 1000 * 0.75) + now;\n\n\nmsg.oauthSession.access_token_expires_at_hr = new Date(msg.oauthSession.access_token_expires_at).toString(); \nmsg.oauthSession.refresh_access_token_at_hr = new Date(msg.oauthSession.refresh_access_token_at).toString();\n\nmsg.oauthSession.refresh_token_expires_at_hr = new Date(msg.oauthSession.refresh_token_expires_at).toString();\nmsg.oauthSession.reauthenticate_at_hr = new Date(msg.oauthSession.reauthenticate_at).toString();\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 220,
        "wires": [
            [
                "7ebf867e.387998"
            ]
        ]
    },
    {
        "id": "6c970e67.5fc01",
        "type": "function",
        "z": "b28f8550.ec044",
        "name": "Check Refresh/Reauthentication Dates",
        "func": "var oauthSession = msg.oauthSession;\n\nvar now = Date.now();\n\nif (now >= oauthSession.reauthenticate_at) {\n  msg.reauthenticate = true;\n}\nelse if(now >= oauthSession.refresh_access_token_at)\n{\n  msg.refresh = true;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 203,
        "y": 390,
        "wires": [
            [
                "18f00ebd.e98bb9"
            ]
        ]
    },
    {
        "id": "18f00ebd.e98bb9",
        "type": "switch",
        "z": "b28f8550.ec044",
        "name": "Reauthentication Needed?",
        "property": "reauthenticate",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 323,
        "y": 490,
        "wires": [
            [
                "506a86a1.6a42e"
            ],
            [
                "82087a2a.6f83e8"
            ]
        ]
    },
    {
        "id": "82087a2a.6f83e8",
        "type": "switch",
        "z": "b28f8550.ec044",
        "name": "Refresh Needed?",
        "property": "refresh",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 193,
        "y": 630,
        "wires": [
            [
                "e93dd16f.07b65"
            ],
            [
                "7ebf867e.387998",
                "2f2323d1.5b71c4"
            ]
        ]
    },
    {
        "id": "e93dd16f.07b65",
        "type": "template",
        "z": "b28f8550.ec044",
        "name": "RefreshTokenTemplate",
        "field": "payload",
        "fieldType": "msg",
        "format": "json",
        "syntax": "mustache",
        "template": "refresh_token={{{oauthSession.refresh_token}}}&client_id={{{oauthRequest.OAUTH_CLIENTID}}}&client_secret={{{oauthRequest.OAUTH_SECRET}}}&grant_type=refresh_token",
        "output": "str",
        "x": 573,
        "y": 710,
        "wires": [
            [
                "b00cbbac.615718"
            ]
        ]
    },
    {
        "id": "b00cbbac.615718",
        "type": "http request",
        "z": "b28f8550.ec044",
        "name": "Refresh Token",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 803,
        "y": 710,
        "wires": [
            [
                "4d7f8e2d.daf0c8"
            ]
        ]
    },
    {
        "id": "4d7f8e2d.daf0c8",
        "type": "switch",
        "z": "b28f8550.ec044",
        "name": "200",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 973,
        "y": 710,
        "wires": [
            [
                "61f94834.41783",
                "be2478ac.7570c8"
            ],
            [
                "506a86a1.6a42e"
            ]
        ]
    },
    {
        "id": "7ebf867e.387998",
        "type": "function",
        "z": "b28f8550.ec044",
        "name": "Update Headers",
        "func": "// add authorization headers\nvar headers = {\n    \"content-type\" : \"application/json\",\n    \"Authorization\" : \"Bearer \" + msg.oauthSession.access_token\n}\n\nmsg.headers = headers;\nmsg.request_headers = headers;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1303,
        "y": 350,
        "wires": [
            [
                "ee8ca8c0.fc169"
            ]
        ]
    },
    {
        "id": "edac0015.0a1bf8",
        "type": "status",
        "z": "b28f8550.ec044",
        "name": "",
        "scope": [
            "2f2323d1.5b71c4",
            "be2478ac.7570c8",
            "9570cd5a.abeec8",
            "f104ea94.afd85"
        ],
        "x": 1200,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "9570cd5a.abeec8",
        "type": "debug",
        "z": "b28f8550.ec044",
        "name": "Token From Creds",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "'got new AT with credentials'",
        "targetType": "jsonata",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1010,
        "y": 200,
        "wires": []
    },
    {
        "id": "be2478ac.7570c8",
        "type": "debug",
        "z": "b28f8550.ec044",
        "name": "Token from Refresh",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "'got new AT through refresh'",
        "targetType": "jsonata",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 803,
        "y": 650,
        "wires": []
    },
    {
        "id": "2f2323d1.5b71c4",
        "type": "debug",
        "z": "b28f8550.ec044",
        "name": "Token From Session",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "'Reused stored AT'",
        "targetType": "jsonata",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 243,
        "y": 710,
        "wires": []
    },
    {
        "id": "f104ea94.afd85",
        "type": "debug",
        "z": "b28f8550.ec044",
        "name": "Error during Token From Creds",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "'ERR: get new AT with credentials'",
        "targetType": "jsonata",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1070,
        "y": 300,
        "wires": []
    },
    {
        "id": "576119c8.7d75f8",
        "type": "function",
        "z": "b28f8550.ec044",
        "name": "Save Input data",
        "func": "msg.inputHttpData = {\n    \"url\": msg.url,\n    \"method\": msg.method\n};\ndelete msg.url;\ndelete msg.method;\n\nmsg.inputPayload=msg.payload;\n\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 40,
        "wires": [
            [
                "de95bc9.df062c"
            ]
        ]
    },
    {
        "id": "de95bc9.df062c",
        "type": "function",
        "z": "b28f8550.ec044",
        "name": "Prepare OauthRequest",
        "func": "msg.oauthSession=global.get(\"oauthSession\");\n\nmsg.oauthRequest={\n    \"OAUTH_USERNAME\": env.get(\"OAUTH_USERNAME\"),\n    \"OAUTH_PASSWORD\": env.get(\"OAUTH_PASSWORD\"),\n    \"OAUTH_CLIENTID\": env.get(\"OAUTH_CLIENTID\"),\n    \"OAUTH_SECRET\": env.get(\"OAUTH_SECRET\")\n};\n\nmsg.url = env.get(\"OAUTH_TOKEN_URL\");\nmsg.headers = {\n    \"Content-Type\": \"application/x-www-form-urlencoded\"};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 40,
        "wires": [
            [
                "78576a94.2cd6dc",
                "e2fe0f9e6b421b6f"
            ]
        ]
    },
    {
        "id": "ee8ca8c0.fc169",
        "type": "function",
        "z": "b28f8550.ec044",
        "name": "Cleanup/Restore Input Data/Store OauthSession Globally",
        "func": "delete msg.oauthRequest;\ndelete msg.reauthenticate;\ndelete msg.refresh;\n\nmsg.payload = msg.inputPayload;\ndelete msg.inputPayload;\n\nglobal.set(\"oauthSession\", msg.oauthSession);\n\n\nmsg.url = msg.inputHttpData.url;\nmsg.method = msg.inputHttpData.method;\n\ndelete msg.inputHttpData;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "451eed87.3ed51c",
        "type": "comment",
        "z": "b28f8550.ec044",
        "name": "GET or REFRESH bearer token and store it in message header",
        "info": "",
        "x": 850,
        "y": 40,
        "wires": []
    },
    {
        "id": "fcb7a49f.f88d8",
        "type": "comment",
        "z": "b28f8550.ec044",
        "name": "Please Read This First! (Manual)",
        "info": "Uses following Environment Variables\n\n - OAUTH_TOKEN_URL (example: https://uxdev.objt.com:444/auth/realms/germanedge/protocol/openid-connect/token)\n - OAUTH_USERNAME\n - OAUTH_PASSWORD\n - OAUTH_CLIENTID (example: objt-api-gateway)\n - OAUTH_SECRET",
        "x": 900,
        "y": 100,
        "wires": []
    },
    {
        "id": "1288161581746123",
        "type": "debug",
        "z": "b28f8550.ec044",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 330,
        "y": 180,
        "wires": []
    },
    {
        "id": "e2fe0f9e6b421b6f",
        "type": "debug",
        "z": "b28f8550.ec044",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 120,
        "wires": []
    },
    {
        "id": "e7e0a7f3f581519c",
        "type": "debug",
        "z": "b28f8550.ec044",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 180,
        "wires": []
    },
    {
        "id": "4cefc480.5f93ac",
        "type": "log-elk",
        "z": "8f03e792bb175e0e",
        "name": "ELK LOG",
        "logger": "cdbbe51.3ba5e18",
        "complete": "payload",
        "loglevel": "log.level",
        "x": 820,
        "y": 120,
        "wires": []
    },
    {
        "id": "10130dac.f7894a",
        "type": "change",
        "z": "8f03e792bb175e0e",
        "name": "Read msg.log.meta and feed instanceName",
        "rules": [
            {
                "t": "set",
                "p": "meta",
                "pt": "msg",
                "to": "log.meta",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "meta.appname",
                "pt": "msg",
                "to": "INSTANCE_NAME",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 470,
        "y": 140,
        "wires": [
            [
                "b015bf82.d43b1",
                "4cefc480.5f93ac"
            ]
        ]
    },
    {
        "id": "b015bf82.d43b1",
        "type": "change",
        "z": "8f03e792bb175e0e",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "meta",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 830,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "8f28799.0b98308",
        "type": "comment",
        "z": "8f03e792bb175e0e",
        "name": "Manual",
        "info": "Consumes msg.log object for logging directives (not required)\n\n - msg.log.level (Defines log level. debug if ommitted)\n - msg.log.meta  (All other data which must be sent to ElasticSearch)\n - msg.payload (The actual message which needs to be logged)\n\n\nThis subflow adds the Environmental variable INSTANCE_NAME to the meta as 'appname'\n\n\nThis flow uses following configuration environmental variables:\n - ELASTIC_URL",
        "x": 510,
        "y": 80,
        "wires": []
    },
    {
        "id": "4e8307354d331e82",
        "type": "change",
        "z": "ee7c6c85b250bda0",
        "name": "set path and method",
        "rules": [
            {
                "t": "set",
                "p": "path",
                "pt": "msg",
                "to": "PATH",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "METHOD",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 240,
        "y": 140,
        "wires": [
            [
                "b3d56444b6d7f4d4"
            ]
        ]
    },
    {
        "id": "b3d56444b6d7f4d4",
        "type": "function",
        "z": "ee7c6c85b250bda0",
        "name": "replace keys",
        "func": "// find all keys (everything in the path between curly brackets)\nconst regexp = '{(.*?)}';\nlet pathKeys = [...msg.path.matchAll(regexp)];\n\n// replace key with correct param \nif (pathKeys) {\n    for (let key of pathKeys) {\n        msg.path = msg.path.replace(key[0], msg.keys[key[1]]);\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 140,
        "wires": [
            [
                "26e38ce76163546a"
            ]
        ]
    },
    {
        "id": "ccb37b5.fd30088",
        "type": "change",
        "z": "ee7c6c85b250bda0",
        "name": "Construct API URL + Set api payload",
        "rules": [
            {
                "t": "set",
                "p": "baseurl",
                "pt": "msg",
                "to": "OBJT_APIGW_URL",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "baseurl&path",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "request",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "apipayload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 290,
        "y": 240,
        "wires": [
            [
                "54d73080b724350a"
            ]
        ]
    },
    {
        "id": "b33d4eb226771d63",
        "type": "subflow:b28f8550.ec044",
        "z": "ee7c6c85b250bda0",
        "name": "",
        "env": [],
        "x": 940,
        "y": 140,
        "wires": [
            [
                "ccb37b5.fd30088"
            ]
        ]
    },
    {
        "id": "54d73080b724350a",
        "type": "function",
        "z": "ee7c6c85b250bda0",
        "name": "Set query params",
        "func": "if (!msg.query) return msg;\n\nlet firstItem = true;\n\nfor (let queryKey in msg.query) {\n    if (firstItem) {\n        msg.url += '?'\n        firstItem = false;\n    } else {\n        msg.url += '&'\n    }\n    msg.url += encodeURIComponent(queryKey)\n    msg.url += '='\n    msg.url += encodeURIComponent(msg.query[queryKey])\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 240,
        "wires": [
            [
                "6c67cd509ef7099c"
            ]
        ]
    },
    {
        "id": "2e1b88cf7a5f7b4e",
        "type": "http request",
        "z": "ee7c6c85b250bda0",
        "name": "Execute API",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 450,
        "y": 520,
        "wires": [
            [
                "2ce456da5b0969e6"
            ]
        ]
    },
    {
        "id": "4fc98bc989cd676c",
        "type": "catch",
        "z": "ee7c6c85b250bda0",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 680,
        "y": 660,
        "wires": [
            [
                "6c5da03c4169fde8",
                "e0e6dd073265b9fb"
            ]
        ]
    },
    {
        "id": "cb03d70d.f9c748",
        "type": "switch",
        "z": "ee7c6c85b250bda0",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "btwn",
                "v": "200",
                "vt": "num",
                "v2": "299",
                "v2t": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 970,
        "y": 520,
        "wires": [
            [],
            [
                "6785d1bda5f5b335"
            ]
        ]
    },
    {
        "id": "6c5da03c4169fde8",
        "type": "change",
        "z": "ee7c6c85b250bda0",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "errorMessage",
                "pt": "msg",
                "to": "error.errorMessage",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 900,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "6785d1bda5f5b335",
        "type": "change",
        "z": "ee7c6c85b250bda0",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "errorMessage",
                "pt": "msg",
                "to": "payload.errorMessage",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 900,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "3d1a013a35203198",
        "type": "link out",
        "z": "ee7c6c85b250bda0",
        "name": "TRIGGER QUEUE",
        "mode": "link",
        "links": [
            "2683a1bf9ce97288"
        ],
        "x": 1010,
        "y": 480,
        "wires": [],
        "l": true
    },
    {
        "id": "e0e6dd073265b9fb",
        "type": "link out",
        "z": "ee7c6c85b250bda0",
        "name": "TRIGGER QUEUE",
        "mode": "link",
        "links": [
            "2683a1bf9ce97288"
        ],
        "x": 890,
        "y": 700,
        "wires": [],
        "l": true
    },
    {
        "id": "6c67cd509ef7099c",
        "type": "simple-queue",
        "z": "ee7c6c85b250bda0",
        "name": "",
        "firstMessageBypass": true,
        "bypassInterval": "0",
        "x": 670,
        "y": 340,
        "wires": [
            [
                "44f38717189bc2d0"
            ]
        ]
    },
    {
        "id": "c3bdd67e1f64959d",
        "type": "change",
        "z": "ee7c6c85b250bda0",
        "name": "Trigger Queue",
        "rules": [
            {
                "t": "set",
                "p": "trigger",
                "pt": "msg",
                "to": "true",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 440,
        "y": 340,
        "wires": [
            [
                "6c67cd509ef7099c"
            ]
        ]
    },
    {
        "id": "2683a1bf9ce97288",
        "type": "link in",
        "z": "ee7c6c85b250bda0",
        "name": "TRIGGER QUEUE",
        "links": [
            "3d1a013a35203198",
            "e0e6dd073265b9fb"
        ],
        "x": 210,
        "y": 320,
        "wires": [
            [
                "c3bdd67e1f64959d"
            ]
        ],
        "l": true
    },
    {
        "id": "4cda27a1255ceb88",
        "type": "inject",
        "z": "ee7c6c85b250bda0",
        "name": "Manual Trigger",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 200,
        "y": 380,
        "wires": [
            [
                "c3bdd67e1f64959d"
            ]
        ]
    },
    {
        "id": "26e38ce76163546a",
        "type": "string",
        "z": "ee7c6c85b250bda0",
        "name": "delete 'apigw/' in path",
        "methods": [
            {
                "name": "replaceAll",
                "params": [
                    {
                        "type": "str",
                        "value": "apigw/"
                    },
                    {
                        "type": "str",
                        "value": ""
                    }
                ]
            }
        ],
        "prop": "path",
        "propout": "path",
        "object": "msg",
        "objectout": "msg",
        "x": 700,
        "y": 140,
        "wires": [
            [
                "b33d4eb226771d63"
            ]
        ]
    },
    {
        "id": "44f38717189bc2d0",
        "type": "subflow:8a0198ba.8aa2b8",
        "z": "ee7c6c85b250bda0",
        "name": "",
        "env": [],
        "x": 240,
        "y": 520,
        "wires": [
            [
                "2e1b88cf7a5f7b4e"
            ]
        ]
    },
    {
        "id": "2ce456da5b0969e6",
        "type": "subflow:eb038fec.a7394",
        "z": "ee7c6c85b250bda0",
        "name": "",
        "env": [],
        "x": 710,
        "y": 520,
        "wires": [
            [
                "cb03d70d.f9c748",
                "3d1a013a35203198"
            ]
        ]
    },
    {
        "id": "0451be8c4ebd3d46",
        "type": "change",
        "z": "d0c9570654afa242",
        "name": "Set gateway parameters",
        "rules": [
            {
                "t": "set",
                "p": "request",
                "pt": "msg",
                "to": "searchpayload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "query",
                "pt": "msg",
                "to": "searchqueryparameters",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 250,
        "y": 140,
        "wires": [
            [
                "c09c1a15afe55a80"
            ]
        ]
    },
    {
        "id": "c09c1a15afe55a80",
        "type": "subflow:ee7c6c85b250bda0",
        "z": "d0c9570654afa242",
        "name": "",
        "env": [
            {
                "name": "METHOD",
                "value": "POST",
                "type": "str"
            },
            {
                "name": "PATH",
                "value": "/apigw/api/v2/search/quality-control-status",
                "type": "str"
            }
        ],
        "x": 510,
        "y": 140,
        "wires": [
            [
                "5ca5ac1752c88543"
            ],
            [
                "3beb3d075742d2d1"
            ]
        ]
    },
    {
        "id": "5ca5ac1752c88543",
        "type": "debug",
        "z": "d0c9570654afa242",
        "name": "Successfull gateway call",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 100,
        "wires": []
    },
    {
        "id": "3beb3d075742d2d1",
        "type": "debug",
        "z": "d0c9570654afa242",
        "name": "Failed gateway call",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 180,
        "wires": []
    },
    {
        "id": "ee154d1406e72c0e",
        "type": "template",
        "z": "c604d7611424d075",
        "g": "348825a4ced52803",
        "name": "QC status filter",
        "field": "filter",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n    \"filterName\": \"ALL QC Statuses\",\n    \"textFilterFields\": [\n        {\n            \"id\": \"qualitycontrolstatus.name\",\n            \"value\": \"{{{qcStatusName}}}\"\n        }\n    ]\n}",
        "output": "json",
        "x": 720,
        "y": 100,
        "wires": [
            [
                "58e3d132df8f1fcd",
                "6c105a9d0872d25c"
            ]
        ]
    },
    {
        "id": "6c105a9d0872d25c",
        "type": "debug",
        "z": "c604d7611424d075",
        "g": "348825a4ced52803",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 60,
        "wires": []
    },
    {
        "id": "58e3d132df8f1fcd",
        "type": "change",
        "z": "c604d7611424d075",
        "g": "348825a4ced52803",
        "name": "Set searchqueryparameters & searchpayload",
        "rules": [
            {
                "t": "set",
                "p": "searchqueryparameter",
                "pt": "msg",
                "to": "query",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "searchpayload",
                "pt": "msg",
                "to": "filter",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1010,
        "y": 100,
        "wires": [
            [
                "95926b92e4ae2fe6",
                "16d304f436314185"
            ]
        ]
    },
    {
        "id": "95926b92e4ae2fe6",
        "type": "debug",
        "z": "c604d7611424d075",
        "g": "348825a4ced52803",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 60,
        "wires": []
    },
    {
        "id": "16d304f436314185",
        "type": "subflow:d0c9570654afa242",
        "z": "c604d7611424d075",
        "g": "348825a4ced52803",
        "name": "",
        "env": [],
        "x": 1310,
        "y": 100,
        "wires": [
            [
                "b9711960d20b6e73",
                "69cd7f61bb153328"
            ]
        ]
    },
    {
        "id": "b9711960d20b6e73",
        "type": "debug",
        "z": "c604d7611424d075",
        "g": "348825a4ced52803",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1490,
        "y": 60,
        "wires": []
    },
    {
        "id": "69cd7f61bb153328",
        "type": "change",
        "z": "c604d7611424d075",
        "g": "348825a4ced52803",
        "name": "Set searchresult & restore payload",
        "rules": [
            {
                "t": "set",
                "p": "searchresult",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "inputpayload",
                "tot": "msg"
            },
            {
                "t": "delete",
                "p": "inputpayload",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "searchqueryparameters",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "searchpayload",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "filter",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1620,
        "y": 180,
        "wires": [
            [
                "13dc41774fc6f7d3"
            ]
        ]
    },
    {
        "id": "13dc41774fc6f7d3",
        "type": "debug",
        "z": "c604d7611424d075",
        "g": "348825a4ced52803",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1850,
        "y": 140,
        "wires": []
    },
    {
        "id": "5a3c5b1d77adb030",
        "type": "switch",
        "z": "c604d7611424d075",
        "g": "348825a4ced52803",
        "name": "Check if QC status is not NULL",
        "property": "qcStatusName",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 450,
        "y": 160,
        "wires": [
            [
                "ee154d1406e72c0e",
                "fa8291e2df13c5eb"
            ],
            [
                "e7e370bed3b41e67",
                "fa497d1cc73cf344"
            ]
        ]
    },
    {
        "id": "e7e370bed3b41e67",
        "type": "change",
        "z": "c604d7611424d075",
        "g": "348825a4ced52803",
        "name": "Clear payload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1000,
        "y": 220,
        "wires": [
            [
                "69cd7f61bb153328",
                "e0de6ee849a26c72"
            ]
        ]
    },
    {
        "id": "fa8291e2df13c5eb",
        "type": "debug",
        "z": "c604d7611424d075",
        "g": "348825a4ced52803",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 60,
        "wires": []
    },
    {
        "id": "fa497d1cc73cf344",
        "type": "debug",
        "z": "c604d7611424d075",
        "g": "348825a4ced52803",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 240,
        "wires": []
    },
    {
        "id": "e0de6ee849a26c72",
        "type": "debug",
        "z": "c604d7611424d075",
        "g": "348825a4ced52803",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 180,
        "wires": []
    },
    {
        "id": "899c77ea2cdef3b2",
        "type": "change",
        "z": "c604d7611424d075",
        "g": "348825a4ced52803",
        "name": "Save payload",
        "rules": [
            {
                "t": "set",
                "p": "inputpayload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 200,
        "y": 160,
        "wires": [
            [
                "5a3c5b1d77adb030",
                "37bca13544c2873f"
            ]
        ]
    },
    {
        "id": "37bca13544c2873f",
        "type": "debug",
        "z": "c604d7611424d075",
        "g": "348825a4ced52803",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 120,
        "wires": []
    },
    {
        "id": "038474eb709c4c05",
        "type": "change",
        "z": "f8154ed1dd94890b",
        "name": "SaveInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "sourcepayload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 247,
        "y": 179,
        "wires": [
            [
                "70da3086bae887ad"
            ]
        ]
    },
    {
        "id": "c423478c622840da",
        "type": "change",
        "z": "f8154ed1dd94890b",
        "name": "restoreInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sourcepayload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "65d3263be2ae9340",
        "type": "change",
        "z": "f8154ed1dd94890b",
        "name": "Prepare API Call params",
        "rules": [
            {
                "t": "set",
                "p": "urlsubpath",
                "pt": "msg",
                "to": "/api/v1/production/plan-production-operation",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "POST",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "category",
                "pt": "msg",
                "to": "Plan productionOrder",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 930,
        "y": 200,
        "wires": [
            [
                "9d9e50a6b1374e69"
            ]
        ]
    },
    {
        "id": "9d9e50a6b1374e69",
        "type": "subflow:6ad93671.a35278",
        "z": "f8154ed1dd94890b",
        "name": "",
        "env": [],
        "x": 220,
        "y": 340,
        "wires": [
            [
                "a35d9e68d09fb058"
            ]
        ]
    },
    {
        "id": "70da3086bae887ad",
        "type": "change",
        "z": "f8154ed1dd94890b",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sourcepayload.arrPlanningOperation[msg.sourcepayload.planningCounter]",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 540,
        "y": 200,
        "wires": [
            [
                "65d3263be2ae9340"
            ]
        ]
    },
    {
        "id": "a35d9e68d09fb058",
        "type": "function",
        "z": "f8154ed1dd94890b",
        "name": "AddResultToMessage",
        "func": "if (msg.payload.key){\n    if (msg.sourcepayload)\n    {\n       \n        msg.sourcepayload.planningCounter = msg.sourcepayload.planningCounter + 1\n \n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 320,
        "wires": [
            [
                "83c180565c50e040"
            ]
        ]
    },
    {
        "id": "83c180565c50e040",
        "type": "switch",
        "z": "f8154ed1dd94890b",
        "name": "",
        "property": "sourcepayload.planningCounter",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "sourcepayload.arrPlanningOperation.length",
                "vt": "msg"
            },
            {
                "t": "gte",
                "v": "sourcepayload.arrPlanningOperation.length",
                "vt": "msg"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 890,
        "y": 320,
        "wires": [
            [
                "70da3086bae887ad"
            ],
            [
                "c423478c622840da"
            ]
        ]
    },
    {
        "id": "10c252e3352a4e52",
        "type": "change",
        "z": "2af33fd4844355a7",
        "name": "SaveInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "sourcepayload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 310,
        "y": 80,
        "wires": [
            [
                "5360453a555981bf"
            ]
        ]
    },
    {
        "id": "5360453a555981bf",
        "type": "change",
        "z": "2af33fd4844355a7",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sourcepayload.po_outputitem.category",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 580,
        "y": 80,
        "wires": [
            [
                "c2deb590ba293c75"
            ]
        ]
    },
    {
        "id": "c2deb590ba293c75",
        "type": "change",
        "z": "2af33fd4844355a7",
        "name": "Prepare API Call params",
        "rules": [
            {
                "t": "set",
                "p": "call.path",
                "pt": "msg",
                "to": "/api/v1/items/",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "call.resource",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "urlsubpath",
                "pt": "msg",
                "to": "call.path&call.resource",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "GET",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "category",
                "pt": "msg",
                "to": "Get Item",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 790,
        "y": 220,
        "wires": [
            [
                "4772ebd7d09c838d"
            ]
        ]
    },
    {
        "id": "4772ebd7d09c838d",
        "type": "subflow:e5d52753.a3e378",
        "z": "2af33fd4844355a7",
        "name": "",
        "x": 500,
        "y": 360,
        "wires": [
            [
                "02be4664a9af6314"
            ]
        ]
    },
    {
        "id": "02be4664a9af6314",
        "type": "function",
        "z": "2af33fd4844355a7",
        "name": "AddResultToMessage",
        "func": "if (msg.payload.key){\n    if (msg.sourcepayload)\n    {\n       msg.sourcepayload.po_outputitem = msg.payload\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 493,
        "y": 518,
        "wires": [
            [
                "6a35c29c8974f9a7"
            ]
        ]
    },
    {
        "id": "6a35c29c8974f9a7",
        "type": "change",
        "z": "2af33fd4844355a7",
        "name": "restoreInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sourcepayload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "5d2163b66f44db5e",
        "type": "function",
        "z": "9d4da4af07865061",
        "name": "AddResultToMessage",
        "func": "if (msg.payload){\n   if (msg.sourcepayload)\n    {\n       msg.sourcepayload.arrUploadedInboundOrders[msg.sourcepayload.InboundOrderCounter] = msg.payload\n       \n    }\n}\n\nmsg.sourcepayload.InboundOrderCounter = msg.sourcepayload.InboundOrderCounter + 1\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 320,
        "wires": [
            [
                "dace6863b3fd8d09"
            ]
        ]
    },
    {
        "id": "b8422cc8eef552d6",
        "type": "change",
        "z": "9d4da4af07865061",
        "name": "restoreInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sourcepayload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 900,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "871bbbea8e12306b",
        "type": "change",
        "z": "9d4da4af07865061",
        "name": "SaveInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "sourcepayload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 290,
        "y": 120,
        "wires": [
            [
                "cbbf17fba67b96c0"
            ]
        ]
    },
    {
        "id": "e6c8c89aedab753d",
        "type": "change",
        "z": "9d4da4af07865061",
        "name": "Prepare API Call params",
        "rules": [
            {
                "t": "set",
                "p": "call.path",
                "pt": "msg",
                "to": "/api/v2/receipt-orders/",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "call.resource",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "urlsubpath",
                "pt": "msg",
                "to": "call.path&call.resource",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "GET",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "category",
                "pt": "msg",
                "to": "Get ReceiptOrder",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 910,
        "y": 120,
        "wires": [
            [
                "433297e66420c64c"
            ]
        ]
    },
    {
        "id": "cbbf17fba67b96c0",
        "type": "change",
        "z": "9d4da4af07865061",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sourcepayload.arrInboundOrderInfo[msg.sourcepayload.InboundOrderCounter].InboundID",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 140,
        "wires": [
            [
                "e6c8c89aedab753d",
                "2430942dec7d27b1"
            ]
        ]
    },
    {
        "id": "dace6863b3fd8d09",
        "type": "switch",
        "z": "9d4da4af07865061",
        "name": "",
        "property": "sourcepayload.InboundOrderCounter",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "sourcepayload.nrOfInboundOrdersToProcess",
                "vt": "msg"
            },
            {
                "t": "gte",
                "v": "sourcepayload.nrOfInboundOrdersToProcess",
                "vt": "msg"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 650,
        "y": 260,
        "wires": [
            [
                "cbbf17fba67b96c0"
            ],
            [
                "b8422cc8eef552d6"
            ]
        ]
    },
    {
        "id": "433297e66420c64c",
        "type": "subflow:e5d52753.a3e378",
        "z": "9d4da4af07865061",
        "name": "",
        "env": [],
        "x": 180,
        "y": 260,
        "wires": [
            [
                "5d2163b66f44db5e",
                "3324ef0149a7e758"
            ]
        ]
    },
    {
        "id": "3324ef0149a7e758",
        "type": "debug",
        "z": "9d4da4af07865061",
        "name": "getInboundOrder",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 440,
        "wires": []
    },
    {
        "id": "2430942dec7d27b1",
        "type": "debug",
        "z": "9d4da4af07865061",
        "name": "subGetInboundPayload",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 80,
        "wires": []
    },
    {
        "id": "b4b0cbf71472b84c",
        "type": "function",
        "z": "2696630a8bfd33d3",
        "name": "AddResultToMessage",
        "func": "\n\nmsg.sourcepayload.uploadInboundOrderCounter = msg.sourcepayload.uploadInboundOrderCounter + 1\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 360,
        "wires": [
            [
                "7839e83601d9ae7d"
            ]
        ]
    },
    {
        "id": "88a50545d6965ca4",
        "type": "change",
        "z": "2696630a8bfd33d3",
        "name": "restoreInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sourcepayload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 960,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "5c0c1c9b45acbe0d",
        "type": "change",
        "z": "2696630a8bfd33d3",
        "name": "SaveInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "sourcepayload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 170,
        "y": 160,
        "wires": [
            [
                "76fb93f1d57537ae"
            ]
        ]
    },
    {
        "id": "45f5d0c1715765a3",
        "type": "change",
        "z": "2696630a8bfd33d3",
        "name": "Prepare API Call params",
        "rules": [
            {
                "t": "set",
                "p": "call.path",
                "pt": "msg",
                "to": "/api/v1/receipt/close-receipt-order/",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "call.resource",
                "pt": "msg",
                "to": "payload.message",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "urlsubpath",
                "pt": "msg",
                "to": "call.path&call.resource",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "POST",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "category",
                "pt": "msg",
                "to": "CloseReceiptOrder",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 970,
        "y": 160,
        "wires": [
            [
                "28557af0ce1e3ac2",
                "49a3a25a27efb078"
            ]
        ]
    },
    {
        "id": "7839e83601d9ae7d",
        "type": "switch",
        "z": "2696630a8bfd33d3",
        "name": "",
        "property": "sourcepayload.uploadInboundOrderCounter",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "sourcepayload.nrOfInboundOrdersToProcess",
                "vt": "msg"
            },
            {
                "t": "gte",
                "v": "sourcepayload.nrOfInboundOrdersToProcess",
                "vt": "msg"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 710,
        "y": 300,
        "wires": [
            [
                "76fb93f1d57537ae"
            ],
            [
                "88a50545d6965ca4"
            ]
        ]
    },
    {
        "id": "49a3a25a27efb078",
        "type": "debug",
        "z": "2696630a8bfd33d3",
        "name": "closeFresh2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 100,
        "wires": []
    },
    {
        "id": "76fb93f1d57537ae",
        "type": "change",
        "z": "2696630a8bfd33d3",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sourcepayload.arrInboundOrderMessages[msg.sourcepayload.uploadInboundOrderCounter]",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 400,
        "y": 160,
        "wires": [
            [
                "45f5d0c1715765a3"
            ]
        ]
    },
    {
        "id": "28557af0ce1e3ac2",
        "type": "subflow:6ad93671.a35278",
        "z": "2696630a8bfd33d3",
        "name": "",
        "env": [],
        "x": 280,
        "y": 300,
        "wires": [
            [
                "b4b0cbf71472b84c"
            ]
        ]
    },
    {
        "id": "3aa3d2298ad542d2",
        "type": "change",
        "z": "9448532d880def76",
        "name": "SaveInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "sourcepayload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 290,
        "y": 60,
        "wires": [
            [
                "4330745b1918c092"
            ]
        ]
    },
    {
        "id": "4330745b1918c092",
        "type": "change",
        "z": "9448532d880def76",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sourcepayload.arrItemKeys[msg.sourcepayload.itemkeyCounter]",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 60,
        "wires": [
            [
                "066c1991f1b57af4"
            ]
        ]
    },
    {
        "id": "066c1991f1b57af4",
        "type": "change",
        "z": "9448532d880def76",
        "name": "Prepare API Call params",
        "rules": [
            {
                "t": "set",
                "p": "call.path",
                "pt": "msg",
                "to": "/api/v2/items/",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "call.resource",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "urlsubpath",
                "pt": "msg",
                "to": "call.path&call.resource",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "GET",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "category",
                "pt": "msg",
                "to": "Get Item",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 890,
        "y": 60,
        "wires": [
            [
                "d50995775091bcd9"
            ]
        ]
    },
    {
        "id": "d50995775091bcd9",
        "type": "subflow:e5d52753.a3e378",
        "z": "9448532d880def76",
        "name": "",
        "env": [],
        "x": 840,
        "y": 160,
        "wires": [
            [
                "d8009ba77ab22faf"
            ]
        ]
    },
    {
        "id": "d8009ba77ab22faf",
        "type": "function",
        "z": "9448532d880def76",
        "name": "AddResultToMessage",
        "func": "if (msg.payload.key){\n    if (msg.sourcepayload)\n    {\n    \n    msg.sourcepayload.itemMap.set(msg.payload.name, msg.payload)   \n\n \n    }\n}\n\nmsg.sourcepayload.itemkeyCounter = msg.sourcepayload.itemkeyCounter + 1\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 260,
        "wires": [
            [
                "3531f56591662337"
            ]
        ]
    },
    {
        "id": "4595b452caa05fa8",
        "type": "change",
        "z": "9448532d880def76",
        "name": "restoreInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sourcepayload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 900,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "3531f56591662337",
        "type": "switch",
        "z": "9448532d880def76",
        "name": "",
        "property": "sourcepayload.itemkeyCounter",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "sourcepayload.numberOfItemKeys",
                "vt": "msg"
            },
            {
                "t": "gte",
                "v": "sourcepayload.numberOfItemKeys",
                "vt": "msg"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 710,
        "y": 320,
        "wires": [
            [
                "4330745b1918c092"
            ],
            [
                "4595b452caa05fa8"
            ]
        ]
    },
    {
        "id": "f14ef1fd3a6fa1f2",
        "type": "change",
        "z": "bd9c4e48e2e07bf6",
        "name": "SaveInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "sourcepayload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 190,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "8db7bf3601fe32f2",
        "type": "change",
        "z": "bd9c4e48e2e07bf6",
        "name": "restoreInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sourcepayload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1000,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "d077a1a755f5570a",
        "type": "xml",
        "z": "bd9c4e48e2e07bf6",
        "name": "",
        "property": "payload",
        "attr": "",
        "chr": "",
        "x": 630,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "8572af74.39562",
        "type": "function",
        "z": "9427480f.947f38",
        "name": "Find tags based on location and type",
        "func": "let tagConfig = global.get(\"tagConfig\");\nlet tagList = tagConfig.taglist;\n\n// if no taglist was found, return\nif (!tagList) {\n    delete msg.tag\n    return msg\n}\n\n// check if there is a location given\nif (!msg.location) {\n    delete msg.tag\n    return msg\n}\n\n// filter on location\ntagList = tagList.filter(tag => tag.warehouseLocation === msg.location)\nif (!tagList) {\n    delete msg.tag\n    return msg\n}\n\n// filter on type\nlet filteredTag = tagList.find(tag => tag.type === env.get(\"TYPE\"))\nif (!filteredTag) {\n    delete msg.tag\n    return msg\n}\n\nmsg.tag = filteredTag\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "849b912f.495af",
        "type": "comment",
        "z": "9427480f.947f38",
        "name": "README",
        "info": "Find a tag in tagConfig based on type (Environmental variabel) and location (msg.location). msg.location must be a string with the fullname of the location.\n\noutput is placed in msg.tag. If no tag was found, msg.tag will be cleaned",
        "x": 150,
        "y": 60,
        "wires": []
    },
    {
        "id": "6ef5c3312050883b",
        "type": "change",
        "z": "31ab2e331f379432",
        "name": "SaveInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "sourcepayload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 250,
        "y": 100,
        "wires": [
            [
                "92a5bcab65aaa62c"
            ]
        ]
    },
    {
        "id": "17dea813059fb762",
        "type": "switch",
        "z": "31ab2e331f379432",
        "name": "",
        "property": "sourcepayload.itemkeyCounter",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "sourcepayload.numberOfItemKeys",
                "vt": "msg"
            },
            {
                "t": "gte",
                "v": "sourcepayload.numberOfItemKeys",
                "vt": "msg"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 750,
        "y": 380,
        "wires": [
            [
                "ef43b206f35b891a"
            ],
            [
                "47e05bfe24872775"
            ]
        ]
    },
    {
        "id": "47e05bfe24872775",
        "type": "change",
        "z": "31ab2e331f379432",
        "name": "restoreInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sourcepayload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 980,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "ef43b206f35b891a",
        "type": "change",
        "z": "31ab2e331f379432",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload.itemKey",
                "pt": "msg",
                "to": "sourcepayload.arrItemKeys[msg.sourcepayload.itemkeyCounter]",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 590,
        "y": 120,
        "wires": [
            [
                "9e6a6e0ac903881b"
            ]
        ]
    },
    {
        "id": "c988ed983e76b5c8",
        "type": "function",
        "z": "31ab2e331f379432",
        "name": "AddResultToMessage",
        "func": "/*if (msg.payload.result) {\n    if (msg.sourcepayload) {\n\n        var packInfoResult = msg.payload.result[0]\n\n        if (packInfoResult)\n        {\n            msg.sourcepayload.itemPackagingMap.set(packInfoResult.ItemKey, packInfoResult)\n        }\n\n    }\n}*/\n\nif (msg.payload.result) {\n    if (msg.sourcepayload) {\n\n        msg.sourcepayload.itemPackagingMap.set(msg.sourcepayload.arrItemKeys[msg.sourcepayload.itemkeyCounter], msg.payload.result)\n\n    }\n}\n\nmsg.sourcepayload.itemkeyCounter = msg.sourcepayload.itemkeyCounter + 1\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 300,
        "wires": [
            [
                "17dea813059fb762",
                "8f12770e35548b70"
            ]
        ]
    },
    {
        "id": "92a5bcab65aaa62c",
        "type": "change",
        "z": "31ab2e331f379432",
        "name": "Init Counter",
        "rules": [
            {
                "t": "set",
                "p": "sourcepayload.itemkeyCounter",
                "pt": "msg",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 270,
        "y": 180,
        "wires": [
            [
                "ef43b206f35b891a"
            ]
        ]
    },
    {
        "id": "8f12770e35548b70",
        "type": "debug",
        "z": "31ab2e331f379432",
        "name": "AfterResult",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 540,
        "wires": []
    },
    {
        "id": "453ee14f613013bd",
        "type": "function",
        "z": "31ab2e331f379432",
        "name": "Create query",
        "func": "\nvar packagingQry = \"Select Item.Name as ItemKey, PackTemplate.Name as Packconfig,ContainerType.Name as Container, ContainerType.ID as ContainerSAPID, , ItemPackConfigLink.SEQ as PackConfigSEQ\"\n+ \" From OBJT_PACKAGING AS ItemPackConf  with (nolock)\"\n    + \" left join(Select CHILDOID, PARENTOID, SEQ from OBJT_ITEMLINK with (nolock)\"\n    + \" where OBJT_ITEMLINK.CHILDCLASSNAME = 'objt.common.itemmgt.bo.Packaging'\"\n    + \" and OBJT_ITEMLINK.PARENTCLASSNAME = 'objt.common.itemmgt.bo.Item') as ItemPackConfigLink  on ItemPackConfigLink.CHILDOID = ItemPackConf.OID\"\n    + \" left join OBJT_ITEM as Item with (nolock) on Item.OID = ItemPackConfigLink.PARENTOID\"\n    + \" inner join OBJT_PACKAGING as PackTemplate with (nolock) on PackTemplate.OID = ItemPackConf.TOID\"\n    + \" left join(Select OBJT_CONTAINER.NAME, PACKAGINGOID, OBJT_CONTAINER.ID from OBJT_PACKAGINGLEVEL with (nolock)\"\n    + \" left join OBJT_CONTAINER with (nolock) on OBJT_CONTAINER.OID = OBJT_PACKAGINGLEVEL.CONTAINEROID\"\n    + \" where LEVELNR = 6 ) as ContainerType on ContainerType.PACKAGINGOID = PackTemplate.OID\"\n    + \" where ItemPackConf.DTSVALIDUNTIL is null and Item.NAME = '\"\n    + msg.payload.itemKey + \"'\"\n\nmsg.payload.packagingQry = packagingQry\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 80,
        "wires": [
            [
                "a6c1f9bbfd8f9b0c",
                "b94c71b6c4efba6f"
            ]
        ]
    },
    {
        "id": "a6c1f9bbfd8f9b0c",
        "type": "MSSQL",
        "z": "31ab2e331f379432",
        "mssqlCN": "2c935d8d.e39c82",
        "name": "",
        "outField": "payload.result",
        "returnType": 0,
        "throwErrors": 1,
        "query": "",
        "modeOpt": "",
        "modeOptType": "query",
        "queryOpt": "payload.packagingQry",
        "queryOptType": "msg",
        "paramsOpt": "",
        "paramsOptType": "none",
        "params": [],
        "x": 1300,
        "y": 240,
        "wires": [
            [
                "c988ed983e76b5c8"
            ]
        ]
    },
    {
        "id": "b94c71b6c4efba6f",
        "type": "debug",
        "z": "31ab2e331f379432",
        "name": "Created Qry",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1410,
        "y": 140,
        "wires": []
    },
    {
        "id": "9e6a6e0ac903881b",
        "type": "function",
        "z": "31ab2e331f379432",
        "name": "CreateQryALL",
        "func": "\nvar packagingQry = \"Select Item.Name as ItemKey, PackTemplate.Name as Packconfig,ContainerType.Name as Container, ContainerType.ID as ContainerSAPID From OBJT_PACKAGING AS ItemPackConf with (nolock)\"\n    + \" left join(Select CHILDOID, PARENTOID from OBJT_ITEMLINK with (nolock)\"\n    + \" where OBJT_ITEMLINK.CHILDCLASSNAME = 'objt.common.itemmgt.bo.Packaging'\"\n    + \" and OBJT_ITEMLINK.PARENTCLASSNAME = 'objt.common.itemmgt.bo.Item') as ItemPackConfigLink  on ItemPackConfigLink.CHILDOID = ItemPackConf.OID\"\n    + \" left join OBJT_ITEM as Item with (nolock) on Item.OID = ItemPackConfigLink.PARENTOID\"\n    + \" inner join OBJT_PACKAGING as PackTemplate with (nolock) on PackTemplate.OID = ItemPackConf.TOID\"\n    + \" left join(Select OBJT_CONTAINER.NAME, PACKAGINGOID, OBJT_CONTAINER.ID from OBJT_PACKAGINGLEVEL with (nolock)\"\n    + \" left join OBJT_CONTAINER with (nolock) on OBJT_CONTAINER.OID = OBJT_PACKAGINGLEVEL.CONTAINEROID\"\n    + \" where LEVELNR = 6 ) as ContainerType on ContainerType.PACKAGINGOID = PackTemplate.OID\"\n    + \" where ItemPackConf.DTSVALIDUNTIL is null and Item.NAME = '\"\n    + msg.payload.itemKey + \"'\"\n\nmsg.payload.packagingQry = packagingQry\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 200,
        "wires": [
            [
                "b94c71b6c4efba6f",
                "a6c1f9bbfd8f9b0c"
            ]
        ]
    },
    {
        "id": "9ef2ab80e3a95c96",
        "type": "change",
        "z": "51da8aadacf633ba",
        "name": "restoreInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sourcepayload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1060,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "d88fb285f773d63c",
        "type": "function",
        "z": "51da8aadacf633ba",
        "name": "AddResultToMessage",
        "func": "if (msg.payload){\n    if (msg.sourcepayload)\n    {\n        msg.sourcepayload.PhantomKey = msg.payload.key\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 140,
        "wires": [
            [
                "9ef2ab80e3a95c96"
            ]
        ]
    },
    {
        "id": "7a3064f9349e5ae9",
        "type": "subflow:6ad93671.a35278",
        "z": "51da8aadacf633ba",
        "name": "",
        "env": [],
        "x": 760,
        "y": 220,
        "wires": [
            [
                "d88fb285f773d63c"
            ]
        ]
    },
    {
        "id": "aa18c5c7511448cd",
        "type": "debug",
        "z": "51da8aadacf633ba",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 60,
        "wires": []
    },
    {
        "id": "afe0a01a6f45108b",
        "type": "change",
        "z": "51da8aadacf633ba",
        "name": "Prepare API Call params",
        "rules": [
            {
                "t": "set",
                "p": "call.path",
                "pt": "msg",
                "to": "/api/v1/phantom-items/",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "call.resource",
                "pt": "msg",
                "to": "payload.id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "urlsubpath",
                "pt": "msg",
                "to": "call.path&call.resource",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "PUT",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "category",
                "pt": "msg",
                "to": "Create PhantomItem",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 690,
        "y": 80,
        "wires": [
            [
                "7a3064f9349e5ae9",
                "aa18c5c7511448cd"
            ]
        ]
    },
    {
        "id": "2fa2299fb076dbf6",
        "type": "change",
        "z": "51da8aadacf633ba",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sourcepayload.phantomItem",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 440,
        "y": 220,
        "wires": [
            [
                "afe0a01a6f45108b"
            ]
        ]
    },
    {
        "id": "88c785c83f2e4fd1",
        "type": "change",
        "z": "51da8aadacf633ba",
        "name": "SaveInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "sourcepayload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 290,
        "y": 100,
        "wires": [
            [
                "2fa2299fb076dbf6"
            ]
        ]
    },
    {
        "id": "8cb6dbbe61537930",
        "type": "template",
        "z": "ab54f22932ac167f",
        "name": "getASNData",
        "field": "selectQuery",
        "fieldType": "flow",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Select OBJT_ASNRECORD.LPN as LPN, OBJT_ITEM.NAME as ItemName from OBJT_ASN with (nolock)\nleft join OBJT_ASNRECORD with (nolock) on OBJT_ASNRECORD.ASNOID = OBJT_ASN.OID\nleft join OBJT_ITEM with (nolock) on OBJT_ITEM.OID = OBJT_ASNRECORD.ITEMOID\nwhere OBJT_ASN.DTSVALIDUNTIL is null and OBJT_ASN.STATUS in (0) and OBJT_ASN.ID = '{{{payload.inboundOrderKey}}}'",
        "output": "str",
        "x": 270,
        "y": 160,
        "wires": [
            [
                "d5394d7e608febbb"
            ]
        ]
    },
    {
        "id": "d5394d7e608febbb",
        "type": "MSSQL",
        "z": "ab54f22932ac167f",
        "mssqlCN": "2c935d8d.e39c82",
        "name": "",
        "outField": "payload.result",
        "returnType": 0,
        "throwErrors": 1,
        "query": "",
        "modeOpt": "",
        "modeOptType": "query",
        "queryOpt": "selectQuery",
        "queryOptType": "flow",
        "paramsOpt": "",
        "paramsOptType": "none",
        "params": [],
        "x": 520,
        "y": 180,
        "wires": [
            [
                "e574741c369b13d4"
            ]
        ]
    },
    {
        "id": "48f6c0e197ae23f1",
        "type": "change",
        "z": "ab54f22932ac167f",
        "name": "SaveInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "sourcepayload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 190,
        "y": 80,
        "wires": [
            [
                "8cb6dbbe61537930"
            ]
        ]
    },
    {
        "id": "f12b0cf258dac197",
        "type": "change",
        "z": "ab54f22932ac167f",
        "name": "restoreInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sourcepayload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "e574741c369b13d4",
        "type": "function",
        "z": "ab54f22932ac167f",
        "name": "AddResultToMessage",
        "func": "if (msg.payload.result) {\n    if (msg.sourcepayload) {\n\n    \n    \n            msg.sourcepayload.ASNQryResult = []\n        msg.sourcepayload.ASNQryResult = msg.payload.result\n    }\n}\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 340,
        "wires": [
            [
                "f12b0cf258dac197"
            ]
        ]
    },
    {
        "id": "ef35a29f8211aa26",
        "type": "change",
        "z": "860b725b28b14c5e",
        "name": "restoreInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sourcepayload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 800,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "1064731278a5596a",
        "type": "switch",
        "z": "860b725b28b14c5e",
        "name": "",
        "property": "sourcepayload.ASNCounter",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "sourcepayload.asnPalletDataCount",
                "vt": "msg"
            },
            {
                "t": "gte",
                "v": "sourcepayload.asnPalletDataCount",
                "vt": "msg"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 550,
        "y": 140,
        "wires": [
            [
                "186536e9699d1258"
            ],
            [
                "ef35a29f8211aa26"
            ]
        ]
    },
    {
        "id": "a5fcaf7315b67c71",
        "type": "function",
        "z": "860b725b28b14c5e",
        "name": "AddResultToMessage",
        "func": "if (msg.payload.key){\n    if (msg.sourcepayload)\n    {\n     \n        msg.sourcepayload.ASNCounter = msg.sourcepayload.ASNCounter + 1\n \n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 260,
        "wires": [
            [
                "1064731278a5596a"
            ]
        ]
    },
    {
        "id": "e773630a5b5fd811",
        "type": "subflow:6ad93671.a35278",
        "z": "860b725b28b14c5e",
        "name": "",
        "env": [],
        "x": 240,
        "y": 160,
        "wires": [
            [
                "a5fcaf7315b67c71"
            ]
        ]
    },
    {
        "id": "7a93b4a1a64d735e",
        "type": "change",
        "z": "860b725b28b14c5e",
        "name": "SaveInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "sourcepayload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 190,
        "y": 20,
        "wires": [
            [
                "186536e9699d1258"
            ]
        ]
    },
    {
        "id": "186536e9699d1258",
        "type": "change",
        "z": "860b725b28b14c5e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sourcepayload.arrPreReceiveLPN[msg.sourcepayload.ASNCounter]",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 440,
        "y": 40,
        "wires": [
            [
                "c04ad5783835c2bb",
                "de5cd8330233ba89"
            ]
        ]
    },
    {
        "id": "c04ad5783835c2bb",
        "type": "debug",
        "z": "860b725b28b14c5e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 60,
        "wires": []
    },
    {
        "id": "de5cd8330233ba89",
        "type": "change",
        "z": "860b725b28b14c5e",
        "name": "Prepare API Call params",
        "rules": [
            {
                "t": "set",
                "p": "call.path",
                "pt": "msg",
                "to": "/api/v2/receipt/pre-receive-lpn-from-asn",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "urlsubpath",
                "pt": "msg",
                "to": "call.path",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "POST",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "category",
                "pt": "msg",
                "to": "Create Prereception LPN",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 810,
        "y": 40,
        "wires": [
            [
                "e773630a5b5fd811"
            ]
        ]
    },
    {
        "id": "607771e1b3e2d925",
        "type": "change",
        "z": "66c592ae4bdebe98",
        "name": "SaveInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "sourcepayload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 250,
        "y": 100,
        "wires": [
            [
                "fd5e0c2d87519a8f"
            ]
        ]
    },
    {
        "id": "90b9d3ea0bc9e4da",
        "type": "change",
        "z": "66c592ae4bdebe98",
        "name": "restoreInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sourcepayload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1140,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "1e30104ac3b2d6a5",
        "type": "MSSQL",
        "z": "66c592ae4bdebe98",
        "mssqlCN": "2c935d8d.e39c82",
        "name": "",
        "outField": "payload.result",
        "returnType": 0,
        "throwErrors": 1,
        "query": "",
        "modeOpt": "",
        "modeOptType": "query",
        "queryOpt": "selectQuery",
        "queryOptType": "flow",
        "paramsOpt": "",
        "paramsOptType": "none",
        "params": [],
        "x": 640,
        "y": 100,
        "wires": [
            [
                "44d96ad212730cc6"
            ]
        ]
    },
    {
        "id": "44d96ad212730cc6",
        "type": "function",
        "z": "66c592ae4bdebe98",
        "name": "AddResultToMessage",
        "func": "if (msg.payload.result) {\n    if (msg.sourcepayload) {\n\n        msg.sourcepayload.containerMap = new Map\n\n        for (var index in msg.payload.result)\n        {\n            var obj = msg.payload.result[index]\n            if (!(msg.sourcepayload.containerMap.has(obj.ContainerSAPID))) {\n\n                msg.sourcepayload.containerMap.set(obj.ContainerSAPID, obj.ContainerName )\n            }\n            \n        }\n    \n    }\n}\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 100,
        "wires": [
            [
                "90b9d3ea0bc9e4da"
            ]
        ]
    },
    {
        "id": "fd5e0c2d87519a8f",
        "type": "template",
        "z": "66c592ae4bdebe98",
        "name": "",
        "field": "selectQuery",
        "fieldType": "flow",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Select NAME as ContainerName, ID as ContainerSAPID from OBJT_CONTAINER with (nolock)\nwhere ID Like 'Z%'",
        "output": "str",
        "x": 460,
        "y": 100,
        "wires": [
            [
                "1e30104ac3b2d6a5"
            ]
        ]
    },
    {
        "id": "535fef922ab4274f",
        "type": "change",
        "z": "a3987006252c27b3",
        "name": "restoreInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sourcepayload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1140,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "82120669cfaf81a7",
        "type": "function",
        "z": "a3987006252c27b3",
        "name": "AddResultToMessage",
        "func": "if (msg.payload.result) {\n    if (msg.sourcepayload) {\n\n        msg.sourcepayload.qcStatusMap = new Map\n\n        for (var index in msg.payload.result)\n        {\n            var obj = msg.payload.result[index]\n            if (!(msg.sourcepayload.qcStatusMap.has(obj.QCSAPID))) {\n\n                msg.sourcepayload.qcStatusMap.set(obj.QCSAPID, obj.QCName )\n            }\n            \n        }\n    \n    }\n}\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 140,
        "wires": [
            [
                "535fef922ab4274f"
            ]
        ]
    },
    {
        "id": "cdd7831411316fcb",
        "type": "MSSQL",
        "z": "a3987006252c27b3",
        "mssqlCN": "2c935d8d.e39c82",
        "name": "",
        "outField": "payload.result",
        "returnType": 0,
        "throwErrors": 1,
        "query": "",
        "modeOpt": "",
        "modeOptType": "query",
        "queryOpt": "selectQuery",
        "queryOptType": "flow",
        "paramsOpt": "",
        "paramsOptType": "none",
        "rows": "",
        "rowsType": "msg",
        "params": [],
        "x": 640,
        "y": 140,
        "wires": [
            [
                "82120669cfaf81a7"
            ]
        ]
    },
    {
        "id": "7d057d25a099137e",
        "type": "template",
        "z": "a3987006252c27b3",
        "name": "QCStatussesQry",
        "field": "selectQuery",
        "fieldType": "flow",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Select NAME as QCName, USRTXT1 as QCSAPID \nfrom OBJT_QUALITYCONTROLSTATUS \nwhere DTSVALIDUNTIL is null",
        "output": "str",
        "x": 390,
        "y": 140,
        "wires": [
            [
                "cdd7831411316fcb"
            ]
        ]
    },
    {
        "id": "46b0ae2ee05b8693",
        "type": "change",
        "z": "a3987006252c27b3",
        "name": "SaveInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "sourcepayload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 150,
        "y": 140,
        "wires": [
            [
                "7d057d25a099137e"
            ]
        ]
    },
    {
        "id": "8f950a54d37767e0",
        "type": "change",
        "z": "1f5d8b704aa78a4b",
        "name": "restoreInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sourcepayload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 920,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "4d2de2a644485ee4",
        "type": "function",
        "z": "1f5d8b704aa78a4b",
        "name": "AddResultToMessage",
        "func": "if (msg.payload.result) {\n    if (msg.sourcepayload) {\n\n        for (var index in msg.payload.result)\n        {\n            var obj = msg.payload.result[index]\n            if (!(msg.sourcepayload.machineOperationMapFromOBJT.has(obj.SapID))) {\n\n                msg.sourcepayload.machineOperationMapFromOBJT.set(obj.SapID, obj)\n            }\n            \n        }\n    \n    }\n}\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 260,
        "wires": [
            [
                "8f950a54d37767e0"
            ]
        ]
    },
    {
        "id": "66f9ae5361a60390",
        "type": "MSSQL",
        "z": "1f5d8b704aa78a4b",
        "mssqlCN": "2c935d8d.e39c82",
        "name": "",
        "outField": "payload.result",
        "returnType": 0,
        "throwErrors": 1,
        "query": "",
        "modeOpt": "",
        "modeOptType": "query",
        "queryOpt": "selectQuery",
        "queryOptType": "flow",
        "paramsOpt": "",
        "paramsOptType": "none",
        "params": [],
        "x": 400,
        "y": 260,
        "wires": [
            [
                "4d2de2a644485ee4"
            ]
        ]
    },
    {
        "id": "2f7e0c6222dfbc29",
        "type": "template",
        "z": "1f5d8b704aa78a4b",
        "name": "Machine_Group_OperationQry",
        "field": "selectQuery",
        "fieldType": "flow",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "select Machine.ID as SapID, Machine.Name as MachineName, MachineGroup.Name as MachineGroup, Operation.Name as Operation, Operation.ID as Sequence from OBJT_PROCESSUNIT as Machine with (nolock)\nleft join (select * from OBJT_RESOURCELINK with (nolock) where PARENTCLASSNAME = 'objt.mes.bo.productionmgt.ResourceGroup' and CHILDCLASSNAME = 'dce.pd.sfc.bo.resourcemgt.Machine')as MachineLink on MachineLink.CHILDOID = Machine.OID\nleft join OBJT_RESOURCEGROUP as MachineGroup  with (nolock)  on MachineGroup.OID = MachineLink.PARENTOID\nleft join OBJT_RESOURCEOPERATIONLINK  as GroupOpLink with (nolock) on GroupOpLink.RESOURCEOID = MachineGroup.OID\nleft join OBJT_MANUFACTURINGOPERATION as Operation with (nolock) on Operation.OID = GroupOpLink.OPERATIONOID\nwhere Machine.DTSVALIDUNTIL is null and Operation.NAME is not null and Machine.ID is not null and Operation.DTSVALIDUNTIL is null\n",
        "output": "str",
        "x": 410,
        "y": 140,
        "wires": [
            [
                "66f9ae5361a60390"
            ]
        ]
    },
    {
        "id": "d6fc6e28143a6588",
        "type": "change",
        "z": "1f5d8b704aa78a4b",
        "name": "SaveInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "sourcepayload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 130,
        "y": 140,
        "wires": [
            [
                "2f7e0c6222dfbc29"
            ]
        ]
    },
    {
        "id": "d4cbdc43909c4862",
        "type": "function",
        "z": "3a5d69670370d7ac",
        "name": "AddResultToMessage",
        "func": "if (msg.payload.result) {\n    if (msg.sourcepayload) {\n        msg.sourcepayload.arrObjectiveLot = msg.payload.result\n    }\n}\n\n\n\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 220,
        "wires": [
            [
                "341c528998fa3fc5"
            ]
        ]
    },
    {
        "id": "d3a78b6fe939d2d0",
        "type": "MSSQL",
        "z": "3a5d69670370d7ac",
        "mssqlCN": "2c935d8d.e39c82",
        "name": "",
        "outField": "payload.result",
        "returnType": 0,
        "throwErrors": 1,
        "query": "",
        "modeOpt": "",
        "modeOptType": "query",
        "queryOpt": "selectQuery",
        "queryOptType": "flow",
        "paramsOpt": "",
        "paramsOptType": "none",
        "params": [],
        "x": 640,
        "y": 220,
        "wires": [
            [
                "d4cbdc43909c4862"
            ]
        ]
    },
    {
        "id": "341c528998fa3fc5",
        "type": "change",
        "z": "3a5d69670370d7ac",
        "name": "restoreInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sourcepayload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1140,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "21214d97343a6ec3",
        "type": "template",
        "z": "3a5d69670370d7ac",
        "name": "QCStatussesQry",
        "field": "selectQuery",
        "fieldType": "flow",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "select DISTINCT Lot.LOTID from OBJT_LOT as Lot with (nolock) \nleft join OBJT_ITEM as Item with (nolock) on Item.OID = Lot.ITEMOID\nwhere Lot.SublotID = '{{{sourcepayload.sublotId}}}' and Item.Name = '{{{sourcepayload.itemKey}}}'",
        "output": "str",
        "x": 390,
        "y": 220,
        "wires": [
            [
                "d3a78b6fe939d2d0"
            ]
        ]
    },
    {
        "id": "be085a48317d4168",
        "type": "change",
        "z": "3a5d69670370d7ac",
        "name": "SaveInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "sourcepayload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 150,
        "y": 220,
        "wires": [
            [
                "21214d97343a6ec3"
            ]
        ]
    },
    {
        "id": "06e005016024ee57",
        "type": "change",
        "z": "5dae959254452f97",
        "name": "SaveInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "sourcepayload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 230,
        "y": 160,
        "wires": [
            [
                "dfe252e3d91973ec"
            ]
        ]
    },
    {
        "id": "dfe252e3d91973ec",
        "type": "template",
        "z": "5dae959254452f97",
        "name": "QCStatussesQry",
        "field": "selectQry",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "select Top 1 Lot.LOTID from OBJT_LOT as Lot with (nolock) \nleft join OBJT_ITEM as Item with (nolock) on Item.OID = Lot.ITEMOID\nwhere Lot.SublotID = '{{{sourcepayload.varSublotID}}}' and Item.Name = '{{{sourcepayload.varItemID}}}'",
        "output": "str",
        "x": 470,
        "y": 160,
        "wires": [
            [
                "0c68eeb26a4f9c63"
            ]
        ]
    },
    {
        "id": "0c68eeb26a4f9c63",
        "type": "MSSQL",
        "z": "5dae959254452f97",
        "mssqlCN": "2c935d8d.e39c82",
        "name": "",
        "outField": "payload.result",
        "returnType": 0,
        "throwErrors": 1,
        "query": "",
        "modeOpt": "",
        "modeOptType": "query",
        "queryOpt": "selectQry",
        "queryOptType": "msg",
        "paramsOpt": "",
        "paramsOptType": "none",
        "rows": "",
        "rowsType": "msg",
        "params": [],
        "x": 720,
        "y": 160,
        "wires": [
            [
                "be14b43b45127261"
            ]
        ]
    },
    {
        "id": "be14b43b45127261",
        "type": "function",
        "z": "5dae959254452f97",
        "name": "AddResultToMessage",
        "func": "if (msg.payload.result) {\n    if (msg.sourcepayload) {\n        var key = msg.sourcepayload.varItemID.toString() + \"-\" + msg.sourcepayload.varSublotID.toString()\n        var obj = msg.sourcepayload.itemSubLotMap.get(key)\n       \n        if (obj){\n           if(msg.payload.result[0])\n           {\n               obj.Lot = msg.payload.result[0].LOTID\n           }\n           else\n           {\n               obj.Lot = msg.sourcepayload.varSublotID\n           }\n              \n        }\n    }\n}\n\nmsg.sourcepayload.counterItemSublot = msg.sourcepayload.counterItemSublot + 1\n\nif (msg.sourcepayload.counterItemSublot < msg.sourcepayload.arrItemSubLot.length){\nmsg.sourcepayload.varSublotID = msg.sourcepayload.arrItemSubLot[msg.sourcepayload.counterItemSublot].SubLot\nmsg.sourcepayload.varItemID = msg.sourcepayload.arrItemSubLot[msg.sourcepayload.counterItemSublot].Item\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 260,
        "wires": [
            [
                "aaf078d18cc26ec0"
            ]
        ]
    },
    {
        "id": "52a53d7b639c47ad",
        "type": "change",
        "z": "5dae959254452f97",
        "name": "restoreInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sourcepayload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1220,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "aaf078d18cc26ec0",
        "type": "switch",
        "z": "5dae959254452f97",
        "name": "",
        "property": "sourcepayload.counterItemSublot",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "sourcepayload.arrItemSubLot.length",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 950,
        "y": 260,
        "wires": [
            [
                "dfe252e3d91973ec"
            ],
            [
                "52a53d7b639c47ad"
            ]
        ]
    },
    {
        "id": "7ff6ec270369deec",
        "type": "subflow:9165d03b.8ba1",
        "z": "e2dafa3d42a6d9a8",
        "name": "",
        "env": [],
        "x": 720,
        "y": 80,
        "wires": [
            [
                "64724fd7b1aa58ec"
            ]
        ]
    },
    {
        "id": "64724fd7b1aa58ec",
        "type": "function",
        "z": "e2dafa3d42a6d9a8",
        "name": "PackConfigCounter",
        "func": "\n\nmsg.payload.arrPackConfigCounter = msg.payload.arrPackConfigCounter + 1\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 80,
        "wires": [
            [
                "e343199a309fb6cc"
            ]
        ]
    },
    {
        "id": "f7fecb6b3e0901e0",
        "type": "change",
        "z": "e2dafa3d42a6d9a8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload.packConfig",
                "pt": "msg",
                "to": "payload.arrPackConfig[msg.payload.arrPackConfigCounter]",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 400,
        "y": 80,
        "wires": [
            [
                "7ff6ec270369deec"
            ]
        ]
    },
    {
        "id": "e343199a309fb6cc",
        "type": "switch",
        "z": "e2dafa3d42a6d9a8",
        "name": "",
        "property": "payload.arrPackConfig.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "payload.arrPackConfigCounter",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 90,
        "y": 160,
        "wires": [
            [
                "f7fecb6b3e0901e0"
            ],
            [
                "87b706ba575b8d53"
            ]
        ]
    },
    {
        "id": "fe184d1838bc2ca0",
        "type": "subflow:cb35eeda.3713f",
        "z": "e2dafa3d42a6d9a8",
        "name": "",
        "env": [],
        "x": 770,
        "y": 240,
        "wires": [
            [
                "bf1374cbcd7964e4"
            ]
        ]
    },
    {
        "id": "bf1374cbcd7964e4",
        "type": "function",
        "z": "e2dafa3d42a6d9a8",
        "name": "ApplyPackConfigCounter",
        "func": "\nmsg.payload.arrStockRecordCounter = msg.payload.arrStockRecordCounter + 1\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 240,
        "wires": [
            [
                "b0d9aa019445c6b7"
            ]
        ]
    },
    {
        "id": "87b706ba575b8d53",
        "type": "change",
        "z": "e2dafa3d42a6d9a8",
        "name": "initApplyPackConfig",
        "rules": [
            {
                "t": "set",
                "p": "payload.ItemKey",
                "pt": "msg",
                "to": "payload.arrPackConfigToMapToItem[msg.payload.arrStockRecordCounter].ItemKey",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload.PackConfigTemplateName",
                "pt": "msg",
                "to": "payload.arrPackConfigToMapToItem[msg.payload.arrStockRecordCounter].PackConfigName",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 240,
        "wires": [
            [
                "fe184d1838bc2ca0",
                "498d8fa8183557c6"
            ]
        ]
    },
    {
        "id": "498d8fa8183557c6",
        "type": "debug",
        "z": "e2dafa3d42a6d9a8",
        "name": "ApplyPackConfigParam",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 450,
        "y": 480,
        "wires": []
    },
    {
        "id": "b0d9aa019445c6b7",
        "type": "switch",
        "z": "e2dafa3d42a6d9a8",
        "name": "ApplyFinished",
        "property": "payload.arrPackConfigToMapToItemLength",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "payload.arrStockRecordCounter",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 100,
        "y": 360,
        "wires": [
            [
                "87b706ba575b8d53"
            ],
            []
        ]
    },
    {
        "id": "908e2908e7030102",
        "type": "catch",
        "z": "e2dafa3d42a6d9a8",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 400,
        "y": 600,
        "wires": [
            [
                "39a4b9a0e33c3c87"
            ]
        ]
    },
    {
        "id": "39a4b9a0e33c3c87",
        "type": "debug",
        "z": "e2dafa3d42a6d9a8",
        "name": "ERROR_Pack",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 640,
        "wires": []
    },
    {
        "id": "12bd971671ba2059",
        "type": "change",
        "z": "a134d3847bdd336b",
        "name": "restoreInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sourcepayload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1000,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "ea44ae7d90b24c4d",
        "type": "function",
        "z": "a134d3847bdd336b",
        "name": "AddResultToMessage",
        "func": "if (msg.payload.result) {\n    if (msg.sourcepayload) {\n\n        for (var index in msg.payload.result)\n        {\n            var obj = msg.payload.result[index]\n\n            var objLocation ={\n                Name :\"\",\n                ID : \"\",\n                ConsumptionUom : \"\",\n                InputCategory : \"\",\n                InputSequence : 0\n            }\n\n            objLocation.Name = obj.Name\n            objLocation.ID = obj.LocID\n            objLocation.ConsumptionUom = obj.ConsumptionUom\n            objLocation.InputCategory = obj.InputType\n            objLocation.InputSequence = obj.InputSequence\n\n            var arrWIPINLoc\n            if (!(msg.sourcepayload.machineWIPINMapFromOBJT.has(obj.MachineName))) {\n                arrWIPINLoc = []\n                arrWIPINLoc[0] = objLocation\n                msg.sourcepayload.machineWIPINMapFromOBJT.set(obj.MachineName, arrWIPINLoc)\n            }\n            else\n            {\n                arrWIPINLoc = msg.sourcepayload.machineWIPINMapFromOBJT.get(obj.MachineName)\n                if (arrWIPINLoc){\n                    var locindex = parseInt(arrWIPINLoc.length)\n                    arrWIPINLoc[locindex] = objLocation\n                }\n             \n            }\n            \n        }\n    \n    }\n}\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 360,
        "wires": [
            [
                "12bd971671ba2059"
            ]
        ]
    },
    {
        "id": "e47ebf5dc5582259",
        "type": "MSSQL",
        "z": "a134d3847bdd336b",
        "mssqlCN": "2c935d8d.e39c82",
        "name": "",
        "outField": "payload.result",
        "returnType": 0,
        "throwErrors": 1,
        "query": "",
        "modeOpt": "",
        "modeOptType": "query",
        "queryOpt": "selectQuery",
        "queryOptType": "flow",
        "paramsOpt": "",
        "paramsOptType": "none",
        "params": [],
        "x": 480,
        "y": 360,
        "wires": [
            [
                "ea44ae7d90b24c4d"
            ]
        ]
    },
    {
        "id": "025dc2de013e10d4",
        "type": "template",
        "z": "a134d3847bdd336b",
        "name": "Machine_WIPIN_Qry",
        "field": "selectQuery",
        "fieldType": "flow",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "select Distinct Location.OID,Location.Name, Location.ID as LocID, Location.USRTXT1 as ConsumptionUom, Location.Usrtxt2 as InputType, Location.UsrNum1 as InputSequence,\nMachine.ID as SapID, Machine.Name as MachineName\nfrom OBJT_PROCESSUNIT as Machine with (nolock)\nleft join (Select * from OBJT_RESOURCELINK with (nolock) where CHILDCLASSNAME = 'objt.common.inventorymgt.bo.StorageResourceGroup' and PARENTCLASSNAME = 'dce.pd.sfc.bo.resourcemgt.Machine' and DTSVALIDUNTIL is null) as ResourceGroupLink  on ResourceGroupLink.PARENTOID = Machine.OID\nleft join OBJT_STORAGERESOURCEGROUP as StorageResGroup with (nolock) on StorageResGroup.OID = ResourceGroupLink.CHILDOID\nleft join (Select * from OBJT_RESOURCELINK with (nolock) where CHILDCLASSNAME = 'objt.common.inventorymgt.bo.WarehouseLocation' and PARENTCLASSNAME = 'objt.common.inventorymgt.bo.StorageResourceGroup' and DTSVALIDUNTIL is null)as LocationLink  on LocationLink.PARENTOID = StorageResGroup.OID\nleft join OBJT_WAREHOUSELOCATION as Location with (nolock) on Location.OID = LocationLink.CHILDOID\nwhere Machine.DTSVALIDUNTIL is null and Location.DTSVALIDUNTIL is null and Location.ID is not null and Machine.ID is not null and ResourceGroupLink.SEQ = 0 \n\n",
        "output": "str",
        "x": 460,
        "y": 240,
        "wires": [
            [
                "e47ebf5dc5582259"
            ]
        ]
    },
    {
        "id": "57c62609fd266fce",
        "type": "change",
        "z": "a134d3847bdd336b",
        "name": "SaveInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "sourcepayload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 210,
        "y": 240,
        "wires": [
            [
                "025dc2de013e10d4"
            ]
        ]
    },
    {
        "id": "91a3a8048128211e",
        "type": "change",
        "z": "436dd2ee6d1e0587",
        "name": "SaveInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "sourcepayload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 390,
        "y": 180,
        "wires": [
            [
                "faef3fb950d54936"
            ]
        ]
    },
    {
        "id": "80f30f748427c3d0",
        "type": "subflow:6ad93671.a35278",
        "z": "436dd2ee6d1e0587",
        "name": "",
        "env": [],
        "x": 320,
        "y": 340,
        "wires": [
            [
                "ed7e0be8fe9690ec"
            ]
        ]
    },
    {
        "id": "ed7e0be8fe9690ec",
        "type": "function",
        "z": "436dd2ee6d1e0587",
        "name": "AddResultToMessage",
        "func": "\n\nmsg.sourcepayload.customerCounter = msg.sourcepayload.customerCounter + 1\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 340,
        "wires": [
            [
                "28fd05142253647d"
            ]
        ]
    },
    {
        "id": "28fd05142253647d",
        "type": "switch",
        "z": "436dd2ee6d1e0587",
        "name": "",
        "property": "sourcepayload.customerCounter",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "sourcepayload.arrCustomerLength",
                "vt": "msg"
            },
            {
                "t": "gte",
                "v": "sourcepayload.arrCustomerLength",
                "vt": "msg"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 730,
        "y": 340,
        "wires": [
            [
                "faef3fb950d54936"
            ],
            [
                "5939d092701fcbf5"
            ]
        ]
    },
    {
        "id": "faef3fb950d54936",
        "type": "change",
        "z": "436dd2ee6d1e0587",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sourcepayload.arrCustomers[msg.sourcepayload.customerCounter]",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 180,
        "wires": [
            [
                "98c6d6a2ef6f4eb0"
            ]
        ]
    },
    {
        "id": "98c6d6a2ef6f4eb0",
        "type": "change",
        "z": "436dd2ee6d1e0587",
        "name": "Prepare API Call params",
        "rules": [
            {
                "t": "set",
                "p": "call.path",
                "pt": "msg",
                "to": "/api/v2/customers/",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "call.resource",
                "pt": "msg",
                "to": "payload.id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "urlsubpath",
                "pt": "msg",
                "to": "call.path&call.resource",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "PUT",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "category",
                "pt": "msg",
                "to": "Create Customer",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1010,
        "y": 200,
        "wires": [
            [
                "80f30f748427c3d0"
            ]
        ]
    },
    {
        "id": "5939d092701fcbf5",
        "type": "change",
        "z": "436dd2ee6d1e0587",
        "name": "restoreInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sourcepayload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1000,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "6696b380a4e316b9",
        "type": "switch",
        "z": "1a3593e9db49782d",
        "name": "",
        "property": "sourcepayload.adjustQcLpnCounter",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "sourcepayload.arrAdjustQCLPNLength",
                "vt": "msg"
            },
            {
                "t": "gte",
                "v": "sourcepayload.arrAdjustQCLPNLength",
                "vt": "msg"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 550,
        "y": 280,
        "wires": [
            [
                "634ab9f4e225b09e"
            ],
            [
                "c8a2d7f74dc20ad1"
            ]
        ]
    },
    {
        "id": "6c9c37efe2e8c404",
        "type": "function",
        "z": "1a3593e9db49782d",
        "name": "AddResultToMessage",
        "func": "\n        msg.sourcepayload.adjustQcLpnCounter = msg.sourcepayload.adjustQcLpnCounter + 1\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 400,
        "wires": [
            [
                "6696b380a4e316b9"
            ]
        ]
    },
    {
        "id": "634ab9f4e225b09e",
        "type": "change",
        "z": "1a3593e9db49782d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sourcepayload.arrAdjustQCLPN[msg.sourcepayload.adjustQcLpnCounter]",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 440,
        "y": 180,
        "wires": [
            [
                "35421d8829ed141e"
            ]
        ]
    },
    {
        "id": "c8a2d7f74dc20ad1",
        "type": "change",
        "z": "1a3593e9db49782d",
        "name": "restoreInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sourcepayload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 800,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "acc8254f28501853",
        "type": "subflow:6ad93671.a35278",
        "z": "1a3593e9db49782d",
        "name": "",
        "env": [],
        "x": 240,
        "y": 300,
        "wires": [
            [
                "6c9c37efe2e8c404"
            ]
        ]
    },
    {
        "id": "ecb59f89a0b624c6",
        "type": "change",
        "z": "1a3593e9db49782d",
        "name": "SaveInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "sourcepayload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 190,
        "y": 160,
        "wires": [
            [
                "634ab9f4e225b09e"
            ]
        ]
    },
    {
        "id": "35421d8829ed141e",
        "type": "change",
        "z": "1a3593e9db49782d",
        "name": "Prepare API Call params",
        "rules": [
            {
                "t": "set",
                "p": "call.path",
                "pt": "msg",
                "to": "/api/v2/inventory/adjust-qc-lpn-inventory",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "urlsubpath",
                "pt": "msg",
                "to": "call.path",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "POST",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "category",
                "pt": "msg",
                "to": "Create Adjust QC LPN",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 810,
        "y": 180,
        "wires": [
            [
                "acc8254f28501853"
            ]
        ]
    },
    {
        "id": "61829c97b92f3cec",
        "type": "catch",
        "z": "1a3593e9db49782d",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 280,
        "y": 560,
        "wires": [
            [
                "b3cd5d4061593c15",
                "6c9c37efe2e8c404"
            ]
        ]
    },
    {
        "id": "b3cd5d4061593c15",
        "type": "debug",
        "z": "1a3593e9db49782d",
        "name": "apiLPN_QC_Adjust_ERROR",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 600,
        "wires": []
    },
    {
        "id": "0cb04f96fdd7aeb4",
        "type": "change",
        "z": "99f7d9ef22663ce3",
        "name": "SaveInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "sourcepayload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 250,
        "y": 40,
        "wires": [
            [
                "b8cff90891ada559"
            ]
        ]
    },
    {
        "id": "07944ef3f8715164",
        "type": "change",
        "z": "99f7d9ef22663ce3",
        "name": "restoreInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sourcepayload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 520,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "f55da4614a53b92f",
        "type": "function",
        "z": "99f7d9ef22663ce3",
        "name": "createReceiptJason",
        "func": "/*gather some info */\nvar inboundOrder = msg.payload\nmsg.sourcepayload.inboundOrder = inboundOrder\nvar receiptline \nvar inboundInfo = msg.sourcepayload.inboundKeyMap.get(inboundOrder.id)\n\n\n\n\n/*do some validation */\n/*1 ONE STEP RECEIPT? */\nmsg.sourcepayload.validationOK = true\nif (msg.sourcepayload.inboundOrder.receiptType != 'ONE STEP')\n{\n    msg.sourcepayload.validationOK = false\n    msg.sourcepayload.inboundOrder.userFields.text[10].value = 'not One Step receipt'\n}\nvar receivedItem = \"\"\n\nif (msg.sourcepayload.inboundOrder.receiptLines.length > 1)\n{\n\n    if (msg.sourcepayload.inboundOrder.userFields.text[10].value)\n     {\n        receivedItem = msg.sourcepayload.inboundOrder.userFields.text[10].value\n        receivedItem = receivedItem.trim()\n        var boolItemFound = false\n        for (let receiptlineIndex = 0; receiptlineIndex < msg.sourcepayload.inboundOrder.receiptLines.length; receiptlineIndex++) {\n            const objReceiptLine = msg.sourcepayload.inboundOrder.receiptLines[receiptlineIndex];\n         \n            if (objReceiptLine.item.name === receivedItem)\n            {\n                boolItemFound = true\n                receiptline = objReceiptLine\n                break\n            }\n\n     \n        }\n\n        if (boolItemFound  != true)\n        {\n            msg.sourcepayload.validationOK = false\n            msg.sourcepayload.inboundOrder.userFields.text[9].value = 'received item not found'\n        }\n                \n\n     }\n     else{\n        msg.sourcepayload.validationOK = false\n        msg.sourcepayload.inboundOrder.userFields.text[9].value = 'waiting for received item'\n    }\n}\nelse{\n    receiptline = inboundOrder.receiptLines[0]\n}\n\n\nif (!inboundOrder.userFields.numeric[0].value)\n{\n    msg.sourcepayload.validationOK = false\n    msg.sourcepayload.inboundOrder.userFields.text[9].value = 'invalid bruto weight'\n}\nelse\n{\n    if (inboundOrder.userFields.numeric[0].value < 0){\n        msg.sourcepayload.validationOK = false\n        msg.sourcepayload.inboundOrder.userFields.text[9].value = 'invalid bruto weight'\n    }\n}\n\nif (!inboundOrder.userFields.numeric[1].value) {\n    msg.sourcepayload.validationOK = false\n    msg.sourcepayload.inboundOrder.userFields.text[9].value = 'ivalid tarra weight'\n}\nelse {\n    if (inboundOrder.userFields.numeric[1].value < 0) {\n        msg.sourcepayload.validationOK = false\n        msg.sourcepayload.inboundOrder.userFields.text[9].value = 'invalid tarra weight'\n    }\n}\n\n\n\n\n/*calculate netto weight */\nvar nettoWeight = parseFloat(inboundOrder.userFields.numeric[0].value - inboundOrder.userFields.numeric[1].value)\n\nif (nettoWeight <= 0)\n{\n    msg.sourcepayload.validationOK = false\n    msg.sourcepayload.inboundOrder.userFields.text[9].value = 'netto weight <= 0'\n}\n\n\nif (receiptline)\n{\nmsg.sourcepayload.packConfigArr = msg.sourcepayload.itemPackagingMap.get(receiptline.item.key)\nvar packInfo = msg.sourcepayload.packConfigArr[0]\n\nif (!packInfo){\n    msg.sourcepayload.validationOK = false\n}\n}\nelse\n{\n    msg.sourcepayload.validationOK = false\n}\n\nif (msg.sourcepayload.validationOK === true)\n{\nif (msg.sourcepayload.arrAssetTrack)\n{\n    if (msg.sourcepayload.arrAssetTrack.length > 0)\n    {\n        for (let index = 0; index < msg.sourcepayload.arrAssetTrack.length; index++) {\n            const element = msg.sourcepayload.arrAssetTrack[index];\n\n            nettoWeight = nettoWeight - (element.Weight * element.Quantity)\n            inboundOrder.userFields.numeric[2].value = nettoWeight\n        }\n    }\n}\n\n\n\n\n\nvar receipt ={\n    \"receiptOrderKey\": inboundOrder.id,\n    \"description\" : \"FreshTN\",\n    \"supplierKey\": \"\",\n    \"printingEnabled\" : false,\n    \"locationInventoryDetails\" : []\n}\n\nvar locationInventoryDetail = {\n    \"locationKey\": inboundInfo.ReceiptLocation,\n    \"lpnInventoryDetails\": []\n}\n\nvar lpnInventoryDetail ={\n    \"inventoryDetails\": [],\n    \"packing\": {\n        \"packingKey\": packInfo.Packconfig,\n        \"packingType\": \"PACKAGING\"\n    },\n    \"name\": \"GENERATE\"\n}\n\nvar inventoryDetail = {\n    \"dtsLotBestBefore\": new Date(Date.now() + 1 * 24 * 60 * 60 * 1000),\n    \"dtsLotProduction\": new Date() ,\n  /*  \"inventoryCode5\": \"P292\",*/\n    \"itemKey\": receiptline.item.key,\n    \"lotID\": inboundOrder.userFields.text[0].value,\n    \"qualityControlStatusKey\": \"QUALITY INSPECTION\",\n    \"quantity\": nettoWeight,\n    \"subLotID\": inboundOrder.id ,\n    \"uomKey\": receiptline.item.uom.key\n}\n\nlpnInventoryDetail.inventoryDetails[0] = inventoryDetail\nlocationInventoryDetail.lpnInventoryDetails[0] = lpnInventoryDetail\nreceipt.locationInventoryDetails[0] = locationInventoryDetail\n\n\nmsg.sourcepayload.receiptline = receipt\n\nmsg.payload= receipt\n}\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 240,
        "wires": [
            [
                "6230cdb139d313f3",
                "854161ecbd5059f4"
            ]
        ]
    },
    {
        "id": "b8cff90891ada559",
        "type": "change",
        "z": "99f7d9ef22663ce3",
        "name": "set InboundOrder",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sourcepayload.arrUploadedInboundOrders[msg.sourcepayload.InboundOrderCounter]",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 530,
        "y": 40,
        "wires": [
            [
                "59d280588c1130e2"
            ]
        ]
    },
    {
        "id": "299a56e76024e4a8",
        "type": "switch",
        "z": "99f7d9ef22663ce3",
        "name": "",
        "property": "sourcepayload.InboundOrderCounter",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "sourcepayload.nrOfInboundOrdersToProcess",
                "vt": "msg"
            },
            {
                "t": "gte",
                "v": "sourcepayload.nrOfInboundOrdersToProcess",
                "vt": "msg"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 310,
        "y": 600,
        "wires": [
            [
                "b8cff90891ada559"
            ],
            [
                "07944ef3f8715164"
            ]
        ]
    },
    {
        "id": "37fd1587edec330a",
        "type": "change",
        "z": "99f7d9ef22663ce3",
        "name": "Prepare API Call params RECEIPT",
        "rules": [
            {
                "t": "set",
                "p": "call.path",
                "pt": "msg",
                "to": "/api/v2/receipt/receive-inventory",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "urlsubpath",
                "pt": "msg",
                "to": "call.path",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "POST",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "category",
                "pt": "msg",
                "to": "Receive inventory",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 860,
        "y": 240,
        "wires": [
            [
                "5831c40f7fb19316"
            ]
        ]
    },
    {
        "id": "5831c40f7fb19316",
        "type": "subflow:6ad93671.a35278",
        "z": "99f7d9ef22663ce3",
        "name": "",
        "env": [],
        "x": 1160,
        "y": 240,
        "wires": [
            [
                "32c16cf33533bff3"
            ]
        ]
    },
    {
        "id": "626dd821973f79a8",
        "type": "function",
        "z": "99f7d9ef22663ce3",
        "name": "updateCounter",
        "func": "msg.sourcepayload.InboundOrderCounter = msg.sourcepayload.InboundOrderCounter + 1 \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 600,
        "wires": [
            [
                "299a56e76024e4a8"
            ]
        ]
    },
    {
        "id": "9848a3096b805a54",
        "type": "catch",
        "z": "99f7d9ef22663ce3",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 120,
        "y": 660,
        "wires": [
            [
                "a28ccfdf6e7e6adb",
                "626dd821973f79a8"
            ]
        ]
    },
    {
        "id": "a28ccfdf6e7e6adb",
        "type": "debug",
        "z": "99f7d9ef22663ce3",
        "name": "ERROR",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 300,
        "y": 660,
        "wires": []
    },
    {
        "id": "59d280588c1130e2",
        "type": "template",
        "z": "99f7d9ef22663ce3",
        "name": "AssetTrackQry",
        "field": "AssetTrackQry",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "SELECT \nContainer.NAME AS ContainerTypeKey,\nContainerWeight.VALUE as Weight, ContainerWeight.Uom as ContainerWeightUom,\nAssettrace.QTYDELTA AS Quantity,\nAssettrace.CATEGORY AS Category,\n(CASE WHEN assettrace.BOTYPE = 0 THEN 'ADJUST' ELSE 'TRANSFER' END) AS Type\nFROM OBJT_ASSETTRACE Assettrace with(nolock)\nleft JOIN OBJT_CONTAINER as Container with(nolock) ON Container.OID = assettrace.ITEMOID\nleft join \n(select DimParam.VALUE, Uom.ID as Uom, DimParam.OWNEROID from OBJT_PARAMETER as DimParam with(nolock)\nleft join OBJT_DIMENSION as Dim with (nolock) on Dim.OID = DimParam.DIMENSIONOID\nleft join OBJT_UOM as Uom with(nolock) on Uom.OID = Dim.UOMOID\nwhere DimParam.OWNERCLASSNAME = 'objt.common.itemmgt.bo.Container' and Dim.Name = 'MASS'\n) as ContainerWeight on ContainerWeight.OWNEROID = container.OID\nleft join OBJT_INBOUNDORDER as Inbound with (nolock) on Inbound.OID = Assettrace.ORDEROID \nWHERE Assettrace.ORDERCLASSNAME = 'objt.wms.bo.inboundmgt.InboundOrder' and Inbound.ID =  '{{{payload.id}}}'",
        "output": "str",
        "x": 760,
        "y": 40,
        "wires": [
            [
                "521828408f78a783"
            ]
        ]
    },
    {
        "id": "521828408f78a783",
        "type": "MSSQL",
        "z": "99f7d9ef22663ce3",
        "mssqlCN": "2c935d8d.e39c82",
        "name": "",
        "outField": "payload.result",
        "returnType": 0,
        "throwErrors": 1,
        "query": "",
        "modeOpt": "",
        "modeOptType": "query",
        "queryOpt": "AssetTrackQry",
        "queryOptType": "msg",
        "paramsOpt": "",
        "paramsOptType": "none",
        "rows": "",
        "rowsType": "msg",
        "params": [],
        "x": 1040,
        "y": 40,
        "wires": [
            [
                "647e09ee327f7609"
            ]
        ]
    },
    {
        "id": "647e09ee327f7609",
        "type": "function",
        "z": "99f7d9ef22663ce3",
        "name": "ProcessAssetTrack",
        "func": "var tempInboundOrderInfo = msg.payload.result\nmsg.sourcepayload.arrAssetTrack = []\nfor (let index = 0; index < tempInboundOrderInfo.length; index++) {\n    const element = tempInboundOrderInfo[index];\n    msg.sourcepayload.arrAssetTrack[index] = element\n    \n}\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 40,
        "wires": [
            [
                "f55da4614a53b92f",
                "91019b227cf41fdf"
            ]
        ]
    },
    {
        "id": "91019b227cf41fdf",
        "type": "debug",
        "z": "99f7d9ef22663ce3",
        "name": "AssetTrack",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "sourcepayload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1390,
        "y": 140,
        "wires": []
    },
    {
        "id": "6230cdb139d313f3",
        "type": "debug",
        "z": "99f7d9ef22663ce3",
        "name": "AfterCreateJason",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 170,
        "y": 300,
        "wires": []
    },
    {
        "id": "70a5552fc06a9cb1",
        "type": "change",
        "z": "99f7d9ef22663ce3",
        "name": "Prepare API Call params INBOUNDCLOSE",
        "rules": [
            {
                "t": "set",
                "p": "call.path",
                "pt": "msg",
                "to": "/api/v2/receipt/close-receipt-order",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "urlsubpath",
                "pt": "msg",
                "to": "call.path",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "POST",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "category",
                "pt": "msg",
                "to": "CloseI nbound",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1050,
        "y": 420,
        "wires": [
            [
                "c43901235f9cab96"
            ]
        ]
    },
    {
        "id": "c43901235f9cab96",
        "type": "subflow:6ad93671.a35278",
        "z": "99f7d9ef22663ce3",
        "name": "",
        "env": [],
        "x": 1400,
        "y": 420,
        "wires": [
            [
                "626dd821973f79a8"
            ]
        ]
    },
    {
        "id": "32c16cf33533bff3",
        "type": "template",
        "z": "99f7d9ef22663ce3",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n    \"receiptOrderKey\" : \"{{{sourcepayload.inboundOrder.id}}}\"\n}",
        "output": "json",
        "x": 700,
        "y": 420,
        "wires": [
            [
                "70a5552fc06a9cb1"
            ]
        ]
    },
    {
        "id": "854161ecbd5059f4",
        "type": "switch",
        "z": "99f7d9ef22663ce3",
        "name": "ValidationOK?",
        "property": "sourcepayload.validationOK",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 540,
        "y": 260,
        "wires": [
            [
                "37fd1587edec330a"
            ],
            [
                "626dd821973f79a8"
            ]
        ]
    },
    {
        "id": "4e7c5b2c.352fe4",
        "type": "subflow:f510047e.e49ad8",
        "z": "3c2cba0b.681486",
        "name": "",
        "env": [],
        "x": 260,
        "y": 140,
        "wires": [
            [
                "9e3bddfd.33968"
            ]
        ]
    },
    {
        "id": "9e3bddfd.33968",
        "type": "switch",
        "z": "3c2cba0b.681486",
        "name": "",
        "property": "file",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "QCAdjust",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 500,
        "y": 140,
        "wires": [
            [
                "df30b3ab.7eb06"
            ],
            [
                "ad1ba11b.69c0a"
            ]
        ]
    },
    {
        "id": "ad1ba11b.69c0a",
        "type": "debug",
        "z": "3c2cba0b.681486",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 220,
        "wires": []
    },
    {
        "id": "df30b3ab.7eb06",
        "type": "file in",
        "z": "3c2cba0b.681486",
        "name": "",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 640,
        "y": 100,
        "wires": [
            [
                "f2d12131.9afa6"
            ]
        ]
    },
    {
        "id": "f2d12131.9afa6",
        "type": "xml",
        "z": "3c2cba0b.681486",
        "name": "",
        "property": "payload",
        "attr": "",
        "chr": "",
        "x": 800,
        "y": 100,
        "wires": [
            [
                "e19da109.37117",
                "a425e00b.4639"
            ]
        ]
    },
    {
        "id": "e19da109.37117",
        "type": "debug",
        "z": "3c2cba0b.681486",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 160,
        "wires": []
    },
    {
        "id": "a425e00b.4639",
        "type": "template",
        "z": "3c2cba0b.681486",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "json",
        "syntax": "mustache",
        "template": "{\n    \"id\": \"{{{payload.MT_QCAdjust.QCAdjust.0.material.0}}}\",\n    \"itemName\": \"{{{payload.MT_QCAdjust.QCAdjust.0.material.0}}}\",\n    \"baseUomKey\": \"{{{payload.MT_QCAdjust.QCAdjust.0.uom.0}}}\",\n    \"type\": \"END ITEM\"\n}",
        "output": "json",
        "x": 1060,
        "y": 100,
        "wires": [
            [
                "bf0d6d1f.69f1c",
                "2aaac9e6.d6c626"
            ]
        ]
    },
    {
        "id": "bf0d6d1f.69f1c",
        "type": "debug",
        "z": "3c2cba0b.681486",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 40,
        "wires": []
    },
    {
        "id": "2aaac9e6.d6c626",
        "type": "change",
        "z": "3c2cba0b.681486",
        "name": "Prepare API Call params",
        "rules": [
            {
                "t": "set",
                "p": "call.path",
                "pt": "msg",
                "to": "/api/v1/items/",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "call.resource",
                "pt": "msg",
                "to": "payload.itemName",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "urlsubpath",
                "pt": "msg",
                "to": "call.path&call.resource",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "PUT",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "category",
                "pt": "msg",
                "to": "Create Item",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1295.765625,
        "y": 128.75,
        "wires": [
            [
                "9fc22dc7.c425b"
            ]
        ]
    },
    {
        "id": "9fc22dc7.c425b",
        "type": "subflow:6ad93671.a35278",
        "z": "3c2cba0b.681486",
        "name": "",
        "env": [],
        "x": 1570,
        "y": 120,
        "wires": [
            [
                "68797aeb.e5f654"
            ]
        ]
    },
    {
        "id": "68797aeb.e5f654",
        "type": "debug",
        "z": "3c2cba0b.681486",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1750,
        "y": 200,
        "wires": []
    },
    {
        "id": "1a875044.3329e",
        "type": "xml",
        "z": "7e0847c3.4a4d18",
        "name": "XML > Json",
        "property": "payload",
        "attr": "",
        "chr": "",
        "x": 1110,
        "y": 100,
        "wires": [
            [
                "65360120.58021"
            ]
        ]
    },
    {
        "id": "8394a4a2.1ea578",
        "type": "switch",
        "z": "7e0847c3.4a4d18",
        "name": "MATMAS check",
        "property": "file",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "matmas",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 440,
        "y": 180,
        "wires": [
            [
                "4ba57ba6.21e254"
            ],
            []
        ]
    },
    {
        "id": "4ba57ba6.21e254",
        "type": "file in",
        "z": "7e0847c3.4a4d18",
        "name": "",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 620,
        "y": 140,
        "wires": [
            [
                "f1993588559c5956"
            ]
        ]
    },
    {
        "id": "5651093d.6b1358",
        "type": "subflow:f510047e.e49ad8",
        "z": "7e0847c3.4a4d18",
        "name": "",
        "env": [],
        "x": 350,
        "y": 60,
        "wires": [
            [
                "8394a4a2.1ea578"
            ]
        ]
    },
    {
        "id": "13e77b0.a19d985",
        "type": "function",
        "z": "7e0847c3.4a4d18",
        "name": "FilterMatMasData",
        "func": "var sapRawItemData = msg.payload.ZMATMAS05.IDOC[0].E1MARAM[0]\n\nvar useCtUom= false\nvar useBagUom = false\n\nvar tolBoxHeight = 10\n\n\n\n\nvar itemData = {\n    \"itemName\" : \"\",\n    \"oldItemName\" : \"\",\n    \"masterGroupName\": \"\",\n    \"putawaygroup\": \"\",\n    \"relocationGroup\": \"\",\n    \"eanCode\": \"\",\n    \"cuEanCode\": \"\",\n    \"cartonEanCode\": \"\",\n    \"palletEanCode\": \"\",\n    \"itemDescription\" : \"\",\n    \"palletType\" : \"\",\n    \"bagTHTLayout\" : \"\",\n    \"cartonTHTLayout\" : \"\",\n    \"lotPrefix\" : \"\",\n    \"lotSuffix\" : \"\",\n    \"minPalletQty\" : 0,\n    \"mixedPallet\" : false,\n    \"owningPlant\" : \"\",\n    \"shelfLife\": 0,\n    \"boxHeight\": 0,\n    \"boxBrutoHeight\": 0,\n    \"boxLayerName\" : \"\",\n    \"boxNettoWeight\": 0,\n    \"boxBrutoWeight\": 0,\n    \"skuCount\": 0,\n    \"skuWeight\": 0,\n    \"nrOfLayer\": 0,\n    \"nrOfCartonsPerLayer\": 0,\n    \"nrOfCartonsPerPallet\": 0,\n    \"category\": \"\",\n    \"baseUom\" : \"\",\n    \"instrastatCode\" : \"\",\n    \"translations\" : [],\n    \"uomConversion\" : [],\n    \"isBio\" : false,\n    \"isMsc\" : false,\n    \"isAsc\" : false,\n    \"isBackFlushItem\" : false,\n     \"isBulkItem\": false,\n    \"customLotCode\":\"\",\n    \"defaultProdLine\" : \"x\",\n    \"defaultQualityControlStatusKey\": \"Unrestricted\",\n    \"caliber\": \"\",\n    \"itemalias\": \"\",\n    \"brand\": \"\",\n    \"customerNr\": \"\",\n    \"itemgroup\": \"\",\n    \"itemtype\": \"\",\n    \"shortpac\":\"\",\n    \"itemclass\":\"\",\n    \"materialtype\":\"\"\n}\n\n\n\nitemData.itemName = sapRawItemData.MATNR[0]\nif (sapRawItemData.NTGEW){itemData.boxNettoWeight = parseFloat(sapRawItemData.NTGEW[0])}\n\nif (sapRawItemData.ZE1MARAM_CHARACTERISTICS)\n{\n     for (var characteristicsIndex1 in sapRawItemData.ZE1MARAM_CHARACTERISTICS){\n         var MaramChar = sapRawItemData.ZE1MARAM_CHARACTERISTICS[characteristicsIndex1]\n         if (MaramChar.ZE1MARAM_CHAR)\n         {\n                 for (var characteristicsIndex2 in MaramChar.ZE1MARAM_CHAR){\n                     var MaramCharDet = MaramChar.ZE1MARAM_CHAR[characteristicsIndex2]\n                    if (MaramCharDet.ATNAM[0] == 'Z_MAT_OWNING_PLANT')\n                     {\n                         itemData.masterGroupName =  MaramCharDet.ATWRT[0]\n                      }\n                  if (MaramCharDet.ATNAM[0] == 'Z_AGRAM_SYMFONIA_INDEX') {\n                     itemData.oldItemName = MaramCharDet.ATWRT[0]\n                     }\n                   if (MaramCharDet.ATNAM[0] == 'Z_AGRAM_CALIBER') {\n                     itemData.caliber = MaramCharDet.ATWRT[0]\n                   }\n                   if (MaramCharDet.ATNAM[0] == 'Z_AGRAM_ITEM_ALIAS') {\n                     itemData.itemalias = MaramCharDet.ATWRT[0]\n                   }\n                   if (MaramCharDet.ATNAM[0] == 'Z_AGRAM_BRAND') {\n                     itemData.brand = MaramCharDet.ATWRT[0]\n                   }\n                   if (MaramCharDet.ATNAM[0] == 'Z_AGRAM_CUSTOMER_NO') {\n                     itemData.customerNr = MaramCharDet.ATWRT[0]\n                   }\n                   if (MaramCharDet.ATNAM[0] == 'Z_AGRAM_ITEM_GROUP') {\n                     itemData.itemgroup = MaramCharDet.ATWRT[0]\n                   }\n                   if (MaramCharDet.ATNAM[0] == 'Z_AGRAM_SHORT_PAC') {\n                     itemData.shortpac = MaramCharDet.ATWRT[0]\n                   }\n                   if (MaramCharDet.ATNAM[0] == 'Z_AGRAM_MAT_TYPE') {\n                     itemData.materialtype = MaramCharDet.ATWRT[0]\n                   }\n                   if (MaramCharDet.ATNAM[0] == 'Z_AGRAM_CLASS') {\n                     itemData.itemclass = MaramCharDet.ATWRT[0]\n                   }\n                   if (MaramCharDet.ATNAM[0] == 'Z_AGRAM_ITEM_TYPE') {\n                     itemData.itemtype = MaramCharDet.ATWRT[0]\n                   }\n                     if (MaramCharDet.ATNAM[0] == 'PUTAWAYGROUP')\n                     {\n                         itemData.putawaygroup =  MaramCharDet.ATWRT[0]\n\n                       itemData.relocationGroup = MaramCharDet.ATWRT[0]\n                     }\n                      // if (MaramCharDet.ATNAM[0] == 'Z_MAT_GS1_EAN_INDICATOR')\n                     //{\n                       //  itemData.eanCode =  MaramCharDet.ATWRT[0]\n                     //}\n                     if (MaramCharDet.ATNAM[0] == 'Z_MAT_THT_BAG')\n                     {\n                        itemData.bagTHTLayout  =  MaramCharDet.ATWRT[0]\n                     }\n                     if (MaramCharDet.ATNAM[0] == 'Z_MAT_THT_CARTON')\n                     {\n                        itemData.cartonTHTLayout  =  MaramCharDet.ATWRT[0]\n                     }\n                     if (MaramCharDet.ATNAM[0] == 'Z_MAT_LOT_PREFIX')\n                     {\n                        itemData.lotPrefix  =  MaramCharDet.ATWRT[0]\n                     }\n                     if (MaramCharDet.ATNAM[0] == 'Z_MAT_LOT_SUFFIX')\n                     {\n                        itemData.lotSuffix  =  MaramCharDet.ATWRT[0]\n                     }\n                      if (MaramCharDet.ATNAM[0] == 'Z_MAT_MIN_PALLET_QTY')\n                     {\n                         try{\n                        itemData.minPalletQty  = parseFloat(MaramCharDet.ATFVL[0])\n                         }catch(err){}\n                     }\n                    if (MaramCharDet.ATNAM[0] == 'Z_MAT_MIXED_PALLET')\n                     {\n                        itemData.mixedPallet  =  ('YES' == MaramCharDet.ATWRT[0])\n                     }\n                     if (MaramCharDet.ATNAM[0] == 'Z_MAT_OWNING_PLANT')\n                     {\n                        itemData.owningPlant  =  MaramCharDet.ATWRT[0]\n                     }\n                     if (MaramCharDet.ATNAM[0] == 'Z_MAT_BOX_HEIGHT')\n                     {\n                        try{\n                        itemData.boxHeight  =   parseFloat(MaramCharDet.ATFLV[0])\n                         itemData.boxBrutoHeight  =  itemData.boxHeight + tolBoxHeight\n                         itemData.boxLayerName = 'LAY_'  + itemData.boxBrutoHeight\n                        }catch(err){}\n                     }\n                      if (MaramCharDet.ATNAM[0] == 'C01'){\n                          if (MaramCharDet.ATWRT[0] == '2'){\n                             itemData.isBio = true \n                          }\n                      }\n                      \n                       if (MaramCharDet.ATNAM[0] == 'C02'){\n                          if (MaramCharDet.ATWRT[0] == '2'){\n                             itemData.isMsc = true \n                          }\n                      }\n                      if (MaramCharDet.ATNAM[0] == 'C03'){\n                          if (MaramCharDet.ATWRT[0] == '2'){\n                             itemData.isAsc = true \n                          }\n                      }\n                     \n                    if (MaramCharDet.ATNAM[0] == 'Z_MAT_CUSTOM_LOTCODE')\n                     {\n                        itemData.customLotCode  =  MaramCharDet.ATWRT[0]\n                     }\n                     \n                 }\n             \n             \n             \n         }\n     }\n}\n\nif (sapRawItemData.E1MAKTM)\n{\n     for (var translationIndex in sapRawItemData.E1MAKTM){\n         var TransLDet = sapRawItemData.E1MAKTM[translationIndex]\n         var translation ={\n             \"languageIsoCode\" : \"\",\n             \"value\":\"\"}\n             \n         translation.languageIsoCode = TransLDet.SPRAS_ISO[0].toLowerCase()\n         //translation.languageIsoCode = translation.languageIsoCode.toLowerCase()\n         translation.value = TransLDet.MAKTX[0]\n       if (translation.value) {translation.value = translation.value.replace(/%/g, '')}\n         itemData.translations[translationIndex] = translation\n         \n            if (translation.languageIsoCode == msg.payload.itemDescriptionIsoCode)\n            {\n                 itemData.itemDescription = translation.value\n            }\n         \n         }\n         \n}\n\n\n\nif (sapRawItemData.MHDHB){itemData.shelfLife = parseInt(sapRawItemData.MHDHB[0])}\n\nif (sapRawItemData.E1MARMM)\n{\n    for (var eanIndex in sapRawItemData.E1MARMM)\n    {\n        var eanInfo = sapRawItemData.E1MARMM[eanIndex]\n\n      if (eanInfo.EAN11){\n        itemData.eanCode = eanInfo.EAN11[0]\n      }\n        if ('UVC' === eanInfo.MEINH[0]){\n             if (eanInfo.EAN11) {itemData.cuEanCode = eanInfo.EAN11[0]}\n        }\n      if ('CT' === eanInfo.MEINH[0] || 'KGM' === eanInfo.MEINH[0]){\n            if (eanInfo.EAN11) {itemData.cartonEanCode =eanInfo.EAN11[0]}\n            if (eanInfo.BRGEW){\n                try{\n                    itemData.boxBrutoWeight  =   parseFloat(eanInfo.BRGEW[0])\n                }catch(err){}\n                \n            }\n        }\n        if ('PF' === eanInfo.MEINH[0]){\n            if (eanInfo.EAN11) {itemData.palletEanCode = eanInfo.EAN11[0]}\n        }\n        \n        var uomConv = {\n            \"toUom\": \"\",\n            \"factor\": 0\n        }\n        try{\n        \n        uomConv.toUom = eanInfo.MEINH[0]\n         uomConv.factor = parseFloat(parseFloat(eanInfo.UMREZ[0])/parseFloat(eanInfo.UMREN[0]))\n         \n               \n        itemData.uomConversion[eanIndex] =uomConv\n        \n        if (uomConv.toUom){\n            if (uomConv.toUom == 'CT'){useCtUom = true }\n            if (uomConv.toUom == 'BG'){useBagUom = true }\n            if (uomConv.toUom == 'YLG'){itemData.nrOfCartonsPerLayer = uomConv.factor}\n            if (uomConv.toUom == 'PF'){itemData.nrOfCartonsPerPallet = uomConv.factor}\n        }\n         \n \n        }catch(err){}\n    }\n}\n\nif (useCtUom == true || useBagUom == true){\n    if (itemData.uomConversion){\n      for (var uomIndex in itemData.uomConversion){\n          //todo: correcte implementatie van uom conv afchecken met OBJT\n          var uomConv2 = {\n            \"toUom\": \"\",\n            \"factor\": 0\n        }\n        uomConv2 = itemData.uomConversion[uomIndex]\n        if (uomConv2.toUom == 'PCE'){\n            try{\n                \n          \n            if (useCtUom == true){\n                  itemData.skuCount = parseInt(1 / uomConv2.factor)\n                  itemData.skuWeight = parseFloat(itemData.boxNettoWeight / itemData.skuCount)\n                 break;\n            }\n             if (useBagUom == true){\n                      itemData.skuCount = parseInt(1 / uomConv2.factor)\n                   itemData.skuWeight = parseFloat(itemData.boxNettoWeight / itemData.skuCount)\n                  break;\n             }\n            }catch(err){}\n        }\n          \n         if (uomConv2.toUom == 'UVC'){\n             try{\n              \n            if (useCtUom == true){\n                itemData.skuCount = parseInt(1 / uomConv2.factor)\n               itemData.skuWeight = parseFloat(itemData.boxNettoWeight / itemData.skuCount)\n                 break;\n            }\n             if (useBagUom == true){\n               itemData.skuCount = parseInt(1 / uomConv2.factor)\n                itemData.skuWeight = parseFloat(itemData.boxNettoWeight / itemData.skuCount)\n                  break;\n             }\n            }catch(err){}\n         }\n      }\n}\n}\n\nif (sapRawItemData.VHART)\n{\n  itemData.palletType = sapRawItemData.VHART[0] \n  }\nelse if (sapRawItemData.MAGRV)\n{\n  itemData.palletType = sapRawItemData.MAGRV[0]\n}\n\nif (sapRawItemData.MTART){itemData.category = sapRawItemData.MTART[0] }\n\nif (sapRawItemData.MEINS){itemData.baseUom = sapRawItemData.MEINS[0] }\n\nif (sapRawItemData.E1MARCM){\n     for (var marcmIndex in sapRawItemData.E1MARCM){\n         var objMarcm = sapRawItemData.E1MARCM[marcmIndex]\n       if (objMarcm.WERKS[0] === 'P270' || objMarcm.WERKS[0] === 'P271') {\n         if (objMarcm.STAWN)\n         {\n             itemData.instrastatCode = objMarcm.STAWN[0]\n         }\n         if (objMarcm.RGEKZ){\n             if ('1' == objMarcm.RGEKZ[0])\n             {\n                 itemData.isBackFlushItem = true\n             }\n         }\n         // get default productionLine\n         if (objMarcm.E1MKALM){\n            for (var e1mkalmIndex in objMarcm.E1MKALM) \n            {\n               var e1kalm =  objMarcm.E1MKALM[e1mkalmIndex]\n               if (e1kalm.MDV01){\n                 if (e1kalm.VERID)\n                 {\n                    if (e1kalm.VERID[0] != 'REW'){\n                      itemData.defaultProdLine = e1kalm.MDV01[0]\n                      break\n                    }\n                    else{\n                      itemData.defaultProdLine = e1kalm.MDV01[0]\n                    }\n                 }\n                 else\n                 {\n                   itemData.defaultProdLine = e1kalm.MDV01[0]\n                   break\n                 }\n                   \n               }\n                \n            }\n         }\n       if (objMarcm.SCHGT)\n       {\n         if (objMarcm.SCHGT[0] === 'X')\n         {\n           itemData.isBulkItem = true\n           itemData.isBackFlushItem = true\n         }\n       }\n     }\n     }\n}\n\n//if (itemData.category != 'ZBAG' && itemData.category != 'HALB')\n//{\n\nif (['TUNEL1','P1','TUNEL2', 'SIDE1', 'SIDE2', 'SIDE3', 'KALIBR', 'KALIBR2', 'LINE_B', 'LINE_C','BLIZARD', 'BLENCH2', 'BLENCH1'].includes(itemData.defaultProdLine))\n{\n    itemData.category = 'Fresh'\n}\nelse if(['TUMB1','TUMB2'].includes(itemData.defaultProdLine))\n{\n   itemData.category = 'Tumbler' \n}\nelse if(['SMOOT1'].includes(itemData.defaultProdLine))\n{\n   itemData.category = 'Smoothie' \n}\nelse if(['LINE_F'].includes(itemData.defaultProdLine))\n{\n   itemData.category = 'Floretting' \n}\nelse if(['L1', 'L2', 'L3'].includes(itemData.defaultProdLine))\n{\n   itemData.category = 'ZBAG' \n}\nelse if(['MIXER1'].includes(itemData.defaultProdLine))\n{\n   itemData.category = 'HALB' \n}\n\n\n\n\n//}\n\nif (itemData.nrOfCartonsPerLayer === 0){itemData.nrOfCartonsPerLayer = 1}\n\n\nvar palletName = msg.payload.containerMap.get(itemData.palletType)\n\n\n\nif (itemData.palletType != '' ){\n    \nvar packConfig = {\n    \"name\":\"\",\n    \"description\" : \"\",\n    \"skuLevel\": {\n    \"cubics\": false,\n    \"depth\": false,\n    \"height\": false,\n    \"volume\": false,\n    \"weight\": true,\n    \"width\": false},\n    \"packagingLevels\" : [] \n}\n\nvar packConfigFactor = 1\n\n  if (itemData.baseUom == 'KGM' || itemData.palletType == 'Z008'){\n    packConfig.name = '0101' + palletName + '1800' \n    \n    var level02containerTypeKey= \"\"\n    var factorOctoLevel02 = 1\n    var level06containerTypeKey= \"\"\n    var factorOctoLevel06 = 1\n    \n\n  if (itemData.palletType == 'Z008'){\n        level02containerTypeKey = 'CRT'\n        level06containerTypeKey = 'CONT'\n        \n    }\n    else\n    {\n      if (itemData.boxNettoWeight == 0) {\n        factorOctoLevel02 = 1\n        factorOctoLevel06 = 1\n      }\n      else {\n        factorOctoLevel02 =itemData.boxNettoWeight\n        factorOctoLevel06 =itemData.boxNettoWeight\n      }\n        level02containerTypeKey = \"OCTO\"\n        level06containerTypeKey = palletName\n    }\n    \n    packConfigFactor = factorOctoLevel02\n  \n  var packOctoLevel02 = {\n      \"containerTypeKey\": level02containerTypeKey,\n      \"cubics\": false,\n      \"depth\": false,\n      \"factor\": factorOctoLevel02,\n      \"fixed\": false,\n      \"height\": false,\n      \"level\": 2,\n      \"volume\": false,\n      \"weight\": false,\n      \"width\": false}\n\n\n\n\n\npackConfig.packagingLevels[0]= packOctoLevel02\n\n\nvar packOctoLevel06 = {\n      \"containerTypeKey\": level06containerTypeKey,\n      \"cubics\": true,\n      \"depth\": false,\n      \"factor\": factorOctoLevel06,\n      \"fixed\": false,\n      \"height\": true,\n      \"level\": 6,\n      \"volume\": false,\n      \"weight\": true,\n      \"width\": true\n}\n\npackConfig.packagingLevels[1]= packOctoLevel06  \n    \n    \n}\nelse{\n    \n    var factorLevel02 = 1\n    var factorLevel04 = 1\n    var factorLevel06 = 1\n    \n    if (itemData.category == 'VERP' || itemData.category  == 'ZVP2')\n    {\n        packConfig.name = '0101' + palletName + itemData.boxBrutoHeight \n    }\n    else {\n        itemData.nrOfLayer = parseInt(itemData.nrOfCartonsPerPallet/itemData.nrOfCartonsPerLayer)\n        if (itemData.nrOfLayer < 10){packConfig.name = '0' + itemData.nrOfLayer} else {packConfig.name = itemData.nrOfLayer}\n        if (itemData.nrOfCartonsPerLayer < 10){packConfig.name = packConfig.name + '0' + itemData.nrOfCartonsPerLayer} else {packConfig.name = packConfig.name + itemData.nrOfCartonsPerLayer}\n        packConfig.name = packConfig.name + palletName + '0' + itemData.boxBrutoHeight\n        \n        \n        if (useCtUom === true || useBagUom === true)\n        {\n            //baseUom = each\n                factorLevel02 = 1\n        }\n        else\n        {\n               // baseUom is kg\n                factorLevel02 = itemData.boxNettoWeight\n        }\n    \n     \n\n        factorLevel04 = itemData.nrOfCartonsPerLayer * factorLevel02\n        if (factorLevel04 <= 0){factorLevel04 = 1}\n        factorLevel06 = itemData.nrOfCartonsPerPallet * factorLevel02\n        if (factorLevel06 <= 0){factorLevel06 = 1}\n    }\n    packConfigFactor = factorLevel02\n    var packLevel02 = {\n      \"containerTypeKey\": \"CRT\",\n      \"cubics\": false,\n      \"depth\": false,\n      \"factor\": factorLevel02,\n      \"fixed\": false,\n      \"height\": false,\n      \"level\": 2,\n      \"volume\": false,\n      \"weight\": false,\n      \"width\": false\n    }\n\n    packConfig.packagingLevels[0]= packLevel02\n\nif (itemData.boxLayerName == \"\"){itemData.boxLayerName = \"LAY_1810\"}\n\n    var packLevel04 = {\n      \"containerTypeKey\": itemData.boxLayerName,\n      \"cubics\": false,\n      \"depth\": false,\n      \"factor\": factorLevel04,\n      \"fixed\": false,\n      \"height\": true,\n      \"level\": 4,\n      \"volume\": false,\n      \"weight\": false,\n      \"width\": false\n    }\n\n    packConfig.packagingLevels[1]= packLevel04\n\n    var packLevel06 = {\n      \"containerTypeKey\": palletName,\n      \"cubics\": true,\n      \"depth\": false,\n      \"factor\":factorLevel06 ,\n      \"fixed\": false,\n      \"height\": true,\n      \"level\": 6,\n      \"volume\": false,\n      \"weight\": true,\n      \"width\": true\n}\n\npackConfig.packagingLevels[2]= packLevel06\n\n}\n\nmsg.payload.packConfigFactor = packConfigFactor\nmsg.payload.packConfig= packConfig\n\n}\n\nvar counterTextParam = 0\nvar counterFlagParam = 0\nvar counterNumericParam =0 \nvar counterUomConversion =0 \n\n\n\n\nvar itemToJason = {\n    \"name\" : \"\",\n  \"attributeTranslations\": [\n  ],\n  \"baseUomKey\": \"kg\",\n  \"category\": \"\",\n  \"lotControl\": \"SUBLOT\",\n  \"numericParameters\": [\n  ],\n  \"flagParameters\": [\n  ],\n  \"textParameters\": [\n  ],\n  \"type\": \"END ITEM\"\n // ,\n  // \"templateVariantKeys\": [\n//     \"ZBAG\"\n  //]\n}\n\n\n    \n\n    \n\n    \n\nitemToJason.name = itemData.itemName\nif (itemData.itemDescription){itemToJason.description = itemData.itemDescription}\nif (itemData.eanCode)\n{\n    msg.payload.EanCodeLength = itemData.eanCode.length\n    if(itemData.eanCode.length == 13)\n    {itemToJason.eanCode = '0' + itemData.eanCode}\n    else if (itemData.eanCode.length == 14) { itemToJason.eanCode = itemData.eanCode}\n    else { itemToJason.eanCode = '00000000000000'}\n}\nelse\n{\n  itemToJason.eanCode = '00000000000000'\n}\n\nif (itemData.category){itemToJason.category = itemData.category}\nif (itemData.putawaygroup){\n        if (itemData.putawaygroup != \"\")\n        {itemToJason.putawayGroupKey = itemData.putawaygroup\n          itemToJason.relocationGroupKey = itemData.relocationGroup}\n} \n\n /*if (itemData.category == 'VERP' || itemData.category == 'ZVP2'){\n                //   itemToJason.lotControl = 'NONE' \n   itemToJason.shelfLife = 999\n   itemToJason.shelfLifePrecision = \"DAY\"\n   itemToJason.shelfLifeUnit = \"MONTH\"\n   itemToJason.defaultQualityControlStatusKey = \"Unrestricted\"\n                } \n    else {\n            itemToJason.shelfLife =  0\n            if (itemData.shelfLife){itemToJason.shelfLife = itemData.shelfLife}\n            itemToJason.shelfLifePrecision = \"DAY\"\n             itemToJason.shelfLifeUnit = \"MONTH\"\n             itemToJason.defaultQualityControlStatusKey = \"Unrestricted\"\n        \n    }*/\n\nif(itemData.shelfLife === 0)\n{\n  itemToJason.lotControl = 'NONE'\n  itemToJason.defaultQualityControlStatusKey = \"Unrestricted\"\n}\nelse{\n itemToJason.shelfLife = itemData.shelfLife \n  itemToJason.shelfLifePrecision = \"DAY\"\n  itemToJason.shelfLifeUnit = \"MONTH\"\n  itemToJason.defaultQualityControlStatusKey = \"Unrestricted\"\n}\n\n\n\n               if (itemData.baseUom === \"KGM\")\n               {\n                 itemToJason.baseUomKey = 'KG'\n               }\n               else if (itemData.baseUom === \"PCE\") {\n                      itemToJason.baseUomKey = 'PC'\n               } \n               else if (itemData.baseUom === \"MTR\") {\n                 itemToJason.baseUomKey = 'm'\n               }\n               else\n               {\n                 itemToJason.baseUomKey = 'BOX'\n                 if (itemData.boxNettoWeight > 0)\n                 {\n                  itemToJason.weight = itemData.boxNettoWeight\n                   itemToJason.weightUomKey = \"KG\"\n                  itemToJason.uomConversions = []\n                   var objConversion = {\n                     \"factor\": 0,\n                     \"fromUomKey\": \"string\",\n                     \"toUomKey\": \"string\"\n                   }\n                   objConversion.factor = parseFloat(1 /itemData.boxNettoWeight)\n                   objConversion.fromUomKey = 'BOX'\n                   objConversion.toUomKey = 'KG'\n                   itemToJason.uomConversions[0] = objConversion\n                 }\n\n               }\n           \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif (itemData.category == 'VERP' || itemData.category == 'ZVP2')\n{\n  if (itemData.isBackFlushItem === true && itemData.isBulkItem === false) { itemToJason.inputType = msg.payload.varInputTypePackagingBackFlush }\n  if (itemData.isBackFlushItem === true && itemData.isBulkItem === true) { itemToJason.inputType = msg.payload.varInputTypeDummyBulkBackFlush }\n  \n  if (itemData.isBackFlushItem === false) { itemToJason.inputType = msg.payload.varInputTypePackagingManual }\n  itemToJason.type = 'COMPONENT'\n}\nelse\n{\n  if (itemData.isBackFlushItem === true) { itemToJason.inputType = msg.payload.varInputTypeIngrBackFlush }\n  if (itemData.isBackFlushItem === false) { itemToJason.inputType = msg.payload.varInputTypeIngrManual }\n}\n    \nif (itemData.cuEanCode){\n    var cuEanCode = {\n      \"key\": \"string\",\n      \"value\": \"string\"\n    }\n    cuEanCode.key = \"usrTxt1\"\n    cuEanCode.value = itemData.cuEanCode\n    itemToJason.textParameters[counterTextParam] = cuEanCode\n    counterTextParam = counterTextParam +1 \n}\n\nif (itemData.cartonEanCode){\n    var cartonEanCode = {\n      \"key\": \"string\",\n      \"value\": \"string\"\n    }\n    cartonEanCode.key = \"usrTxt2\"\n    cartonEanCode.value = itemData.cartonEanCode\n    itemToJason.textParameters[counterTextParam] =cartonEanCode\n    counterTextParam = counterTextParam +1 \n}\n    \nif (itemData.palletEanCode){\n    var palletEanCode = {\n      \"key\": \"string\",\n      \"value\": \"string\"\n    }\n    palletEanCode.key = \"usrTxt3\"\n    palletEanCode.value = itemData.palletEanCode\n    itemToJason.textParameters[counterTextParam] =palletEanCode\n    counterTextParam = counterTextParam +1 \n}\n\nif (itemData.bagTHTLayout){\n    var bagTHTLayout = {\n      \"key\": \"string\",\n      \"value\": \"string\"\n    }\n    bagTHTLayout.key = \"usrTxt4\"\n    bagTHTLayout.value = itemData.bagTHTLayout\n    itemToJason.textParameters[counterTextParam] =bagTHTLayout\n    counterTextParam = counterTextParam +1 \n}\n\nif (itemData.cartonTHTLayout){\n    var cartonTHTLayout = {\n      \"key\": \"string\",\n      \"value\": \"string\"\n    }\n    cartonTHTLayout.key = \"usrTxt5\"\n    cartonTHTLayout.value = itemData.cartonTHTLayout\n    itemToJason.textParameters[counterTextParam] =cartonTHTLayout\n    counterTextParam = counterTextParam +1 \n}\n\nif (itemData.owningPlant){\n    var owningPlant = {\n      \"key\": \"string\",\n      \"value\": \"string\"\n    }\n    owningPlant.key = \"usrTxt6\"\n    owningPlant.value = itemData.owningPlant\n    itemToJason.textParameters[counterTextParam] =owningPlant\n    counterTextParam = counterTextParam +1 \n}\n\nif (itemData.instrastatCode){\n    var instrastatCode = {\n      \"key\": \"string\",\n      \"value\": \"string\"\n    }\n    instrastatCode.key = \"usrTxt7\"\n    instrastatCode.value = itemData.instrastatCode\n    itemToJason.textParameters[counterTextParam] =instrastatCode\n    counterTextParam = counterTextParam +1 \n}\n\nif (itemData.lotPrefix){\n    var lotPrefix = {\n      \"key\": \"string\",\n      \"value\": \"string\"\n    }\n    lotPrefix.key = \"usrTxt8\"\n    lotPrefix.value = itemData.lotPrefix\n    itemToJason.textParameters[counterTextParam] =lotPrefix\n    counterTextParam = counterTextParam +1 \n}\n\nif (itemData.lotSuffix){\n    var lotSuffix = {\n      \"key\": \"string\",\n      \"value\": \"string\"\n    }\n    lotSuffix.key = \"usrTxt9\"\n    lotSuffix.value = itemData.lotSuffix\n    itemToJason.textParameters[counterTextParam] =lotSuffix\n    counterTextParam = counterTextParam +1 \n}\n\nif (itemData.customLotCode){\n    var customLotCode = {\n      \"key\": \"string\",\n      \"value\": \"string\"\n    }\n    customLotCode.key = \"usrTxt10\"\n    customLotCode.value = itemData.customLotCode\n    itemToJason.textParameters[counterTextParam] =customLotCode\n    counterTextParam = counterTextParam +1 \n}\n\nif (itemData.oldItemName) {\n  var oldItemNr = {\n    \"key\": \"string\",\n    \"value\": \"string\"\n  }\n  oldItemNr.key = \"usrTxt11\"\n  oldItemNr.value = itemData.oldItemName\n  itemToJason.textParameters[counterTextParam] = oldItemNr\n  counterTextParam = counterTextParam + 1\n}\n\nif (itemData.itemalias) {\n  var itemalias = {\n    \"key\": \"string\",\n    \"value\": \"string\"\n  }\n  itemalias.key = \"usrTxt12\"\n  itemalias.value = itemData.itemalias\n  itemToJason.textParameters[counterTextParam] = itemalias\n  counterTextParam = counterTextParam + 1\n}\n\nif (itemData.brand) {\n  var brand = {\n    \"key\": \"string\",\n    \"value\": \"string\"\n  }\n  brand.key = \"usrTxt13\"\n  brand.value = itemData.brand\n  itemToJason.textParameters[counterTextParam] = brand\n  counterTextParam = counterTextParam + 1\n}\n\nif (itemData.caliber) {\n  var caliber = {\n    \"key\": \"string\",\n    \"value\": \"string\"\n  }\n  caliber.key = \"usrTxt14\"\n  caliber.value = itemData.caliber\n  itemToJason.textParameters[counterTextParam] = caliber\n  counterTextParam = counterTextParam + 1\n}\n\nif (itemData.customerNr) {\n  var customerNr = {\n    \"key\": \"string\",\n    \"value\": \"string\"\n  }\n  customerNr.key = \"usrTxt15\"\n  customerNr.value = itemData.customerNr\n  itemToJason.textParameters[counterTextParam] = customerNr\n  counterTextParam = counterTextParam + 1\n}\n\nif (itemData.itemgroup) {\n  var itemgroup = {\n    \"key\": \"string\",\n    \"value\": \"string\"\n  }\n  itemgroup.key = \"usrTxt16\"\n  itemgroup.value = itemData.itemgroup\n  itemToJason.textParameters[counterTextParam] = itemgroup\n  counterTextParam = counterTextParam + 1\n}\n\nif (itemData.itemtype) {\n  var itemtype = {\n    \"key\": \"string\",\n    \"value\": \"string\"\n  }\n  itemtype.key = \"usrTxt17\"\n  itemtype.value = itemData.itemtype\n  itemToJason.textParameters[counterTextParam] = itemtype\n  counterTextParam = counterTextParam + 1\n}\n\nif (itemData.shortpac) {\n  var shortpac = {\n    \"key\": \"string\",\n    \"value\": \"string\"\n  }\n  shortpac.key = \"usrTxt18\"\n  shortpac.value = itemData.shortpac\n  itemToJason.textParameters[counterTextParam] = shortpac\n  counterTextParam = counterTextParam + 1\n}\n\nif (itemData.itemclass) {\n  var itemclass = {\n    \"key\": \"string\",\n    \"value\": \"string\"\n  }\n  itemclass.key = \"usrTxt19\"\n  itemclass.value = itemData.itemclass\n  itemToJason.textParameters[counterTextParam] = itemclass\n  counterTextParam = counterTextParam + 1\n}\n\nif (itemData.materialtype) {\n  var materialtype = {\n    \"key\": \"string\",\n    \"value\": \"string\"\n  }\n  materialtype.key = \"usrTxt20\"\n  materialtype.value = itemData.materialtype\n  itemToJason.textParameters[counterTextParam] = materialtype\n  counterTextParam = counterTextParam + 1\n}\n\nif (itemData.minPalletQty){\n    var minPalletQty = {\n      \"key\": \"string\",\n      \"value\": \"string\"\n    }\n    minPalletQty.key = \"usrNum1\"\n    minPalletQty.value = itemData.minPalletQty\n    itemToJason.numericParameters[counterNumericParam] =minPalletQty\n    counterNumericParam = counterNumericParam +1 \n}\n \n if (itemData.boxHeight){\n    var boxHeight = {\n      \"key\": \"string\",\n      \"value\": \"string\"\n    }\n    boxHeight.key = \"usrNum2\"\n    boxHeight.value = itemData.boxHeight\n    itemToJason.numericParameters[counterNumericParam] =boxHeight\n    counterNumericParam = counterNumericParam +1 \n}\n\n \n if (itemData.boxBrutoHeight){\n    var boxBrutoHeight = {\n      \"key\": \"string\",\n      \"value\": \"string\"\n    }\n    boxBrutoHeight.key = \"usrNum3\"\n    boxBrutoHeight.value = itemData.boxBrutoHeight\n    itemToJason.numericParameters[counterNumericParam] =boxBrutoHeight\n    counterNumericParam = counterNumericParam +1 \n}\n\n if (itemData.boxNettoWeight){\n    var boxNettoWeight = {\n      \"key\": \"string\",\n      \"value\": \"string\"\n    }\n    boxNettoWeight.key = \"usrNum4\"\n    boxNettoWeight.value = itemData.boxNettoWeight\n    itemToJason.numericParameters[counterNumericParam] =boxNettoWeight\n    counterNumericParam = counterNumericParam +1 \n}\n \n  if (itemData.boxBrutoWeight){\n    var boxBrutoWeight = {\n      \"key\": \"string\",\n      \"value\": \"string\"\n    }\n    boxBrutoWeight.key = \"usrNum5\"\n    boxBrutoWeight.value = itemData.boxBrutoWeight\n    itemToJason.numericParameters[counterNumericParam] =boxBrutoWeight\n    counterNumericParam = counterNumericParam +1 \n}\n\n  if (itemData.skuCount){\n       var skuCount = {\n      \"key\": \"string\",\n      \"value\": \"string\"\n    }\n    skuCount.key = \"usrNum6\"\n    skuCount.value = itemData.skuCount\n    itemToJason.numericParameters[counterNumericParam] =skuCount\n    counterNumericParam = counterNumericParam +1 \n}\n\nif (itemData.skuWeight){\n    var skuWeight = {\n      \"key\": \"string\",\n      \"value\": \"string\"\n    }\n    skuWeight.key = \"usrNum7\"\n    skuWeight.value = itemData.skuWeight\n    itemToJason.numericParameters[counterNumericParam] =skuWeight\n    counterNumericParam = counterNumericParam +1 \n}\n\n\n        \n    var mixedPallet = {\n      \"key\": \"string\",\n      \"value\": false\n    }\n    mixedPallet.key = \"usrFlg1\"\n    mixedPallet.value = itemData.mixedPallet\n    itemToJason.flagParameters[counterFlagParam] =mixedPallet\n    counterFlagParam = counterFlagParam +1 \n\n\n\n    var isBio = {\n      \"key\": \"string\",\n      \"value\": false\n    }\n    isBio.key = \"usrFlg2\"\n    isBio.value = itemData.isBio\n    itemToJason.flagParameters[counterFlagParam] =isBio\n    counterFlagParam = counterFlagParam +1 \n\n\n\n  var isMsc = {\n      \"key\": \"string\",\n      \"value\": false\n    }\n    isMsc.key = \"usrFlg3\"\n    isMsc.value = itemData.isMsc\n    itemToJason.flagParameters[counterFlagParam] =isMsc\n    counterFlagParam = counterFlagParam +1 \n\n\n  var isAsc = {\n      \"key\": \"string\",\n      \"value\": false\n    }\n    isAsc.key = \"usrFlg4\"\n    isAsc.value = itemData.isAsc\n    itemToJason.flagParameters[counterFlagParam] =isAsc\n    counterFlagParam = counterFlagParam +1 \n\n    \nif (itemData.translations) {\n    \n    var attributeTranslation = {\n      \"attribute\": \"description\",\n      \"translations\": [\n       \n      ]\n    }\n    \n    attributeTranslation.translations = itemData.translations\n    \n    itemToJason.attributeTranslations[0] = attributeTranslation\n}\n\nmsg.payload.itemToJason =itemToJason\n\nmsg.payload.itemData = itemData\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1530,
        "y": 160,
        "wires": [
            [
                "106ba73e.70cd79",
                "7497f97c.843d78"
            ]
        ]
    },
    {
        "id": "7497f97c.843d78",
        "type": "debug",
        "z": "7e0847c3.4a4d18",
        "name": "AfterFilter",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1520,
        "y": 60,
        "wires": []
    },
    {
        "id": "92eaa39a.c89ea",
        "type": "subflow:9165d03b.8ba1",
        "z": "7e0847c3.4a4d18",
        "name": "",
        "env": [],
        "x": 1560,
        "y": 420,
        "wires": [
            [
                "966fc589.2dbc48"
            ]
        ]
    },
    {
        "id": "966fc589.2dbc48",
        "type": "subflow:da45371f.14a148",
        "z": "7e0847c3.4a4d18",
        "name": "",
        "env": [],
        "x": 1100,
        "y": 500,
        "wires": [
            [
                "e91cf68c.f80f58",
                "e6c52dbdbe49fb88"
            ]
        ]
    },
    {
        "id": "36773b71.0d6444",
        "type": "subflow:cb35eeda.3713f",
        "z": "7e0847c3.4a4d18",
        "name": "",
        "env": [],
        "x": 1650,
        "y": 560,
        "wires": [
            [
                "d747235a9bfb3c7a"
            ]
        ]
    },
    {
        "id": "106ba73e.70cd79",
        "type": "switch",
        "z": "7e0847c3.4a4d18",
        "name": "upsertContainerTypeNeeded",
        "property": "payload.itemData.boxLayerName",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1100,
        "y": 260,
        "wires": [
            [
                "d695c37.34ef04"
            ],
            [
                "fc9e0371.eaee"
            ]
        ]
    },
    {
        "id": "65360120.58021",
        "type": "function",
        "z": "7e0847c3.4a4d18",
        "name": "setFixedData",
        "func": "// in Ooigem is de basis uom KG - ook in deze download\n// met onderstaande variabele kan je toggelen tussen de SAP BASEUOM (ct) en de Ooigem BASE UOM (kg)\nvar useOoigemBaseUOM = true\nmsg.payload.useOoigemBaseUOM = useOoigemBaseUOM\n\n// translation used as item description\nvar itemDescriptionIsoCode = 'en'\n\n// inputType WIP   varInputTypeWIP\nvar varInputTypeIngrManual = \"DummyIngrManual\"\nmsg.payload.varInputTypeIngrManual =varInputTypeIngrManual\n\n// inputType Backflush  --- varInputTypeBackFlush\nvar varInputTypeIngrBackFlush = \"DummyIngrBackFlush\"\nmsg.payload.varInputTypeIngrBackFlush =varInputTypeIngrBackFlush\n\n// inputType Packaging ---varInputTypePackaging\nvar varInputTypePackagingManual = \"DummyCartonManual\"\nmsg.payload.varInputTypePackagingManual =varInputTypePackagingManual\n\n// inputType Packaging backflush\nvar varInputTypePackagingBackFlush = \"DummyCartonBackFlush\"\nmsg.payload.varInputTypePackagingBackFlush =varInputTypePackagingBackFlush\n\n// inputType Packaging backflush no WIPHandling\nvar varInputTypeDummyBulkBackFlush = \"DummyBulkBackFlush\"\nmsg.payload.varInputTypeDummyBulkBackFlush = varInputTypeDummyBulkBackFlush\n\nmsg.payload.itemDescriptionIsoCode = itemDescriptionIsoCode\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 160,
        "wires": [
            [
                "8906993ba5a1ee78"
            ]
        ]
    },
    {
        "id": "fc9e0371.eaee",
        "type": "switch",
        "z": "7e0847c3.4a4d18",
        "name": "PackConfigUpsertNeeded",
        "property": "payload.packConfig",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1270,
        "y": 380,
        "wires": [
            [
                "92eaa39a.c89ea",
                "3be9eb0b.501ca4"
            ],
            [
                "966fc589.2dbc48"
            ]
        ]
    },
    {
        "id": "e91cf68c.f80f58",
        "type": "switch",
        "z": "7e0847c3.4a4d18",
        "name": "ApplyPackConfigNeeded",
        "property": "payload.PackConfigTemplateName",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1290,
        "y": 580,
        "wires": [
            [
                "36773b71.0d6444"
            ],
            [
                "d747235a9bfb3c7a"
            ]
        ]
    },
    {
        "id": "18ea7135.a2bb6f",
        "type": "debug",
        "z": "7e0847c3.4a4d18",
        "name": "EndMatmas",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2290,
        "y": 620,
        "wires": []
    },
    {
        "id": "3be9eb0b.501ca4",
        "type": "debug",
        "z": "7e0847c3.4a4d18",
        "name": "PackConfigUpsertYES",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1620,
        "y": 340,
        "wires": []
    },
    {
        "id": "d695c37.34ef04",
        "type": "subflow:41ffb55d.ec50bc",
        "z": "7e0847c3.4a4d18",
        "name": "",
        "env": [],
        "x": 1470,
        "y": 280,
        "wires": [
            [
                "fc9e0371.eaee"
            ]
        ]
    },
    {
        "id": "e6c52dbdbe49fb88",
        "type": "debug",
        "z": "7e0847c3.4a4d18",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1320,
        "y": 500,
        "wires": []
    },
    {
        "id": "8906993ba5a1ee78",
        "type": "subflow:66c592ae4bdebe98",
        "z": "7e0847c3.4a4d18",
        "name": "",
        "env": [],
        "x": 1290,
        "y": 160,
        "wires": [
            [
                "13e77b0.a19d985"
            ]
        ]
    },
    {
        "id": "f1993588559c5956",
        "type": "simple-queue",
        "z": "7e0847c3.4a4d18",
        "name": "",
        "firstMessageBypass": true,
        "bypassInterval": "0",
        "x": 870,
        "y": 100,
        "wires": [
            [
                "1a875044.3329e"
            ]
        ]
    },
    {
        "id": "d747235a9bfb3c7a",
        "type": "change",
        "z": "7e0847c3.4a4d18",
        "name": "TriggerNextMessageInQueue",
        "rules": [
            {
                "t": "set",
                "p": "trigger",
                "pt": "msg",
                "to": "1",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1720,
        "y": 620,
        "wires": [
            [
                "f1993588559c5956",
                "d637b04edb2b2ab6"
            ]
        ]
    },
    {
        "id": "496bc2453f3e3e93",
        "type": "catch",
        "z": "7e0847c3.4a4d18",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 950,
        "y": 700,
        "wires": [
            [
                "32d17842dac2687b",
                "2670d2c5a35ba2f0"
            ]
        ]
    },
    {
        "id": "32d17842dac2687b",
        "type": "debug",
        "z": "7e0847c3.4a4d18",
        "name": "ERROR",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 740,
        "wires": []
    },
    {
        "id": "d637b04edb2b2ab6",
        "type": "fs-ops-move",
        "z": "7e0847c3.4a4d18",
        "name": "MoveFileToArchive",
        "sourcePath": "INTERFACE_SAP_TO_OBJ_DIR",
        "sourcePathType": "env",
        "sourceFilename": "file",
        "sourceFilenameType": "msg",
        "destPath": "archivedir",
        "destPathType": "msg",
        "destFilename": "file",
        "destFilenameType": "msg",
        "link": false,
        "x": 1990,
        "y": 620,
        "wires": [
            [
                "18ea7135.a2bb6f"
            ]
        ]
    },
    {
        "id": "2670d2c5a35ba2f0",
        "type": "change",
        "z": "7e0847c3.4a4d18",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "archivedir",
                "pt": "msg",
                "to": "msg.filedir & '/error'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1310,
        "y": 660,
        "wires": [
            [
                "d747235a9bfb3c7a"
            ]
        ]
    },
    {
        "id": "64a63968.85bc28",
        "type": "xml",
        "z": "363c53b3.cabc2c",
        "name": "XML > Json",
        "property": "payload",
        "attr": "",
        "chr": "",
        "x": 750,
        "y": 80,
        "wires": [
            [
                "430db917.b3a398"
            ]
        ]
    },
    {
        "id": "cd0d5d7e.55bc3",
        "type": "switch",
        "z": "363c53b3.cabc2c",
        "name": "",
        "property": "file",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "Delivery",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 430,
        "y": 80,
        "wires": [
            [
                "1fed716d.6c95af"
            ],
            []
        ]
    },
    {
        "id": "1fed716d.6c95af",
        "type": "file in",
        "z": "363c53b3.cabc2c",
        "name": "",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 580,
        "y": 80,
        "wires": [
            [
                "64a63968.85bc28"
            ]
        ]
    },
    {
        "id": "77f4d74a.b12f78",
        "type": "subflow:f510047e.e49ad8",
        "z": "363c53b3.cabc2c",
        "name": "",
        "env": [],
        "x": 210,
        "y": 80,
        "wires": [
            [
                "cd0d5d7e.55bc3"
            ]
        ]
    },
    {
        "id": "667a6bae.10ca94",
        "type": "function",
        "z": "363c53b3.cabc2c",
        "name": "FilterOUTBOUNDObjects",
        "func": "var listOfOutboundOrders = msg.payload.ZDES.IDOC[0].E1EDL20\n\nvar objcarrier\nvar shipmentID\nvar shipmentDtsDueBefore\nvar plantID\nvar nrOfOutboundOrders = 0\n\n\n\nfunction convertToDate(x){\nvar year = x.substr(0,4)\nvar month = x.substr(4,2)\nvar day = x.substr(6,2)\n\n//var result = new Date()\n//result.setYear(year)\n//result.setMonth(month - 1)\n//result.setDate(day)\n//result.setHours(2)\n//result.setMinutes(1)\n\nreturn year + \"-\" + month + \"-\" + day   \n}\n\nvar customerCounter = 0\nmsg.payload.arrCustomers = [] \n\nvar arrObjOutboundOrder =[];\nfor (var index in listOfOutboundOrders) {\n    \n    \n    var objOutboundorder = {\n    \"id\" : \"\",\n    \"usrTxt1\" : \"\",\n    \"usrTxt2\" : \"No comment\",\n    \"dtsDueBefore\" : \"\",\n    \"usrTxt3\": \"\",\n    \"usrTxt4\": \"\",\n    \"usrTxt5\": \"\",\n    \"usrDts1\": \"\",\n    \"usrFlg1\": false,\n    \"outboundLines\": [\n        ],\n   \"deliveryAddress\": {\n    \"city\": \"string\",\n    \"countryISO2Code\": \"string\",\n    \"countryName\": \"string\",\n    \"id\": \"string\",\n    \"languageISOCode\": \"string\",\n    \"name\": \"string\",\n    \"street\": \"string\",\n    \"zipPostalCode\": \"string\"\n     },\n     \"invoiceAddress\": {\n    \"city\": \"string\",\n    \"countryISO2Code\": \"string\",\n    \"countryName\": \"string\",\n    \"id\": \"string\",\n    \"languageISOCode\": \"string\",\n    \"name\": \"string\",\n    \"street\": \"string\",\n    \"zipPostalCode\": \"string\"\n     }\n    };\n    \n\n    objOutboundorder.id = listOfOutboundOrders[index].VBELN[0]\n    \n    shipmentDtsDueBefore = Date.now().toString()\n\n        if (listOfOutboundOrders[index].E1EDT13){\n            for (var indexDates in listOfOutboundOrders[index].E1EDT13) {\n                var dateObj = listOfOutboundOrders[index].E1EDT13[indexDates]\n                if (dateObj.QUALF[0] === '003'){\n                if (dateObj.NTANF){\n                    objOutboundorder.dtsDueBefore = dateObj.NTANF[0]\n                    objOutboundorder.dtsDueBefore = convertToDate(objOutboundorder.dtsDueBefore)\n                    shipmentDtsDueBefore =objOutboundorder.dtsDueBefore\n                 }\n                }\n            }\n         }\n\n    if (objOutboundorder.dtsDueBefore === ''){\n        objOutboundorder.dtsDueBefore = shipmentDtsDueBefore\n    }\n\n\n   if (listOfOutboundOrders[index].E1EDL21[0].ZE1EDL21)\n   {\n      if(listOfOutboundOrders[index].E1EDL21[0].ZE1EDL21[0].ERNAM)\n      {\n        // SAPUSER \n            objOutboundorder.usrTxt3 = listOfOutboundOrders[index].E1EDL21[0].ZE1EDL21[0].ERNAM[0]  \n      }\n      \n      if(listOfOutboundOrders[index].E1EDL21[0].ZE1EDL21[0].BFART)\n      {\n          objOutboundorder.usrTxt4 =  listOfOutboundOrders[index].E1EDL21[0].ZE1EDL21[0].BFART[0] \n      }\n      if (listOfOutboundOrders[index].E1EDL21[0].ZE1EDL21[0].BSTNK)\n      {\n        objOutboundorder.usrTxt5 = listOfOutboundOrders[index].E1EDL21[0].ZE1EDL21[0].BSTNK[0]  \n      }\n      else\n      {\n          if (listOfOutboundOrders[index].E1EDL24[0].E1EDL43[0].BELNR){\n               objOutboundorder.usrTxt5 = listOfOutboundOrders[index].E1EDL24[0].E1EDL43[0].BELNR[0]\n          }\n      }\n      if(listOfOutboundOrders[index].E1EDL21[0].ZE1EDL21[0].SHIPMENT)\n      {\n            // SHIPMENTID (Delivery)\n            shipmentID = listOfOutboundOrders[index].E1EDL21[0].ZE1EDL21[0].SHIPMENT[0] \n      }\n   }\n     \n\n   if (listOfOutboundOrders[index].E1EDT13){\n             if(listOfOutboundOrders[index].E1EDT13[5].NTANF)\n             {\n                     //DELIVERYDATE (arrival at customer)\n                  objOutboundorder.usrDts1 = convertToDate(listOfOutboundOrders[index].E1EDT13[5].NTANF[0])\n             }\n         }\n\n\n\n\n\n    \n    var listOfPartnerAddresses = msg.payload.ZDES.IDOC[0].E1EDL20[index].E1ADRM1\n    if (listOfPartnerAddresses){\n        \n         for (var indexAddresses in listOfPartnerAddresses) {\n                 var objPartnerAddress = {\n                    TYPE : \"\",\n                    ID : \"\",\n                    NAME : \"\",\n                    STREET : \"\",\n                    POSTALCODE : \"\",\n                    CITY : \"\",\n                    COUNTRY: \"\",\n                    LANGUAGEISOCODE: \"\"\n                    }; \n        if (listOfPartnerAddresses[indexAddresses].PARTNER_Q){\n         objPartnerAddress.TYPE = listOfPartnerAddresses[indexAddresses].PARTNER_Q[0]\n        }\n        else\n        {\n            objPartnerAddress.TYPE = 'xxx'\n        }\n        \n    if (objPartnerAddress.TYPE === 'WE' || objPartnerAddress.TYPE === 'SP' || objPartnerAddress.TYPE === 'RE' || objPartnerAddress.TYPE === 'AG'){\n            \n         objPartnerAddress.ID = listOfPartnerAddresses[indexAddresses].PARTNER_ID[0]\n         objPartnerAddress.NAME = listOfPartnerAddresses[indexAddresses].NAME1[0]\n         if(listOfPartnerAddresses[indexAddresses].STREET1){objPartnerAddress.STREET = listOfPartnerAddresses[indexAddresses].STREET1[0]}\n         if(listOfPartnerAddresses[indexAddresses].POSTL_COD1){objPartnerAddress.POSTALCODE = listOfPartnerAddresses[indexAddresses].POSTL_COD1[0]}\n         if(listOfPartnerAddresses[indexAddresses].CITY1){objPartnerAddress.CITY = listOfPartnerAddresses[indexAddresses].CITY1[0]}\n         if (listOfPartnerAddresses[indexAddresses].COUNTRY1){objPartnerAddress.COUNTRY = listOfPartnerAddresses[indexAddresses].COUNTRY1[0]}\n         if (objPartnerAddress.COUNTRY){\n             if (objPartnerAddress.LANGUAGEISOCODE === 'PL')\n             {\n                 objPartnerAddress.LANGUAGEISOCODE = 'pl'\n             }\n             else\n             {\n                 objPartnerAddress.LANGUAGEISOCODE = 'en'\n             }\n                  \n             \n         }\n         else {\n              objPartnerAddress.LANGUAGEISOCODE = 'en'\n         }\n        \n      \n            if (objPartnerAddress.TYPE){\n                if (objPartnerAddress.TYPE == 'SP'){\n                   objcarrier =   objPartnerAddress\n                }\n            }\n            \n             if (objPartnerAddress.TYPE){\n                if (objPartnerAddress.TYPE == 'WE'){\n                    objOutboundorder.deliveryAddress.id = objPartnerAddress.ID\n                    objOutboundorder.deliveryAddress.city = objPartnerAddress.CITY\n                    objOutboundorder.deliveryAddress.countryISO2Code = objPartnerAddress.COUNTRY\n                    objOutboundorder.deliveryAddress.countryName = objPartnerAddress.COUNTRY\n                    objOutboundorder.deliveryAddress.street = objPartnerAddress.STREET\n                    objOutboundorder.deliveryAddress.name = objPartnerAddress.NAME\n                    objOutboundorder.deliveryAddress.zipPostalCode = objPartnerAddress.POSTALCODE\n                    objOutboundorder.deliveryAddress.languageISOCode = objPartnerAddress.LANGUAGEISOCODE\n                    \n                }\n            }\n            \n            if (objPartnerAddress.TYPE){\n                if (objPartnerAddress.TYPE == 'RE'){\n                    objOutboundorder.invoiceAddress.id = objPartnerAddress.ID\n                    objOutboundorder.invoiceAddress.city = objPartnerAddress.CITY\n                    objOutboundorder.invoiceAddress.countryISO2Code = objPartnerAddress.COUNTRY\n                    objOutboundorder.invoiceAddress.countryName = objPartnerAddress.COUNTRY\n                    objOutboundorder.invoiceAddress.street = objPartnerAddress.STREET\n                    objOutboundorder.invoiceAddress.name = objPartnerAddress.NAME\n                    objOutboundorder.invoiceAddress.zipPostalCode = objPartnerAddress.POSTALCODE\n                    objOutboundorder.invoiceAddress.languageISOCode = objPartnerAddress.LANGUAGEISOCODE\n                }\n            }\n\n               if (objPartnerAddress.TYPE){\n                if (objPartnerAddress.TYPE == 'AG'){\n\n                    var customer = {\n                    \"assetControlled\": true,\n                    \"id\" : objPartnerAddress.ID,\n                    \"name\" : objPartnerAddress.NAME,\n                    \"description\": objPartnerAddress.NAME,\n                    \"languageISOCode\": objPartnerAddress.LANGUAGEISOCODE,\n                    \"postalAddresses\": [\n                            {\n                                \"category\": \"Postal Address\",\n                                \"city\": objPartnerAddress.CITY,\n                                \"countryISO2Code\": objPartnerAddress.COUNTRY,\n                                \"countryName\": objPartnerAddress.COUNTRY,\n                                \"languageISOCode\": objPartnerAddress.LANGUAGEISOCODE,\n                                \"name\": objPartnerAddress.NAME,\n                                \"street\": objPartnerAddress.STREET,\n                                \"zipPostalCode\": objPartnerAddress.POSTALCODE\n                            }\n                        ]\n                    }\n\n                    msg.payload.arrCustomers[customerCounter] = customer\n                    customerCounter = customerCounter + 1\n\n                    var consignee= {\n                        \"consigneeKey\": objPartnerAddress.ID,\n                        \"consigneeType\": \"CUSTOMER\"\n                    }\n\n                    objOutboundorder.consignee = consignee\n                }\n            }\n            \n        }\n            \n             \n         }\n         \n         \n    }\n\n    msg.payload.customerCounter = 0\n    msg.payload.arrCustomerLength = msg.payload.arrCustomers.length\n    \n    \n\n    var operationsCounter = 0\n    var listOfOutboundOperations = msg.payload.ZDES.IDOC[0].E1EDL20[index].E1EDL24\n    if (listOfOutboundOperations){\n        \n        for (var indexOperation in listOfOutboundOperations) {\n            \n        \n           var objOutboundOperation = {\n            \"backorderOption\": \"DEFAULT\",\n            \"name\" : \"\",\n            \"itemKey\" : \"\",\n            \"quantity\" : 0,\n            \"lotID\" : \"\",\n            \"qcKey\" : \"\",\n            \"uomKey\" : \"\",\n            \"inventoryCode5\": \"\",\n            \"usrTxt3\": \"\",\n            \"usrTxt4\": \"\"\n        }; \n            \n            \n            \n            \n              objOutboundOperation.name = listOfOutboundOperations[indexOperation].POSNR[0]\n              objOutboundOperation.itemKey = listOfOutboundOperations[indexOperation].MATNR[0]\n              \n              try{\n              objOutboundOperation.quantity = parseFloat(listOfOutboundOperations[indexOperation].LGMNG[0])\n              }catch(err){\n                objOutboundOperation.quantity = 0\n                }\n                \n            if (objOutboundOperation.quantity > 0)\n            {\n           \n             // objOutboundOperation.uomKey = listOfOutboundOperations[indexOperation].VRKME[0]\n             //objOutboundOperation.uomKey = \"kg\"\n              //objOutboundOperation.QCID = listOfOutboundOperations[indexOperation].CHARG[0]\n\n                //*****************meegeven lot&qc indien nodig **********************/\n\n                if (listOfOutboundOperations[indexOperation].CHARG) {\n                    if ('999999' != listOfOutboundOperations[indexOperation].CHARG[0]) {\n                        objOutboundOperation.lotId = listOfOutboundOperations[indexOperation].CHARG[0].substr(1, listOfOutboundOperations[indexOperation].CHARG[0].length)\n                        var qcID = listOfOutboundOperations[indexOperation].CHARG[0].substr(0, 1)\n                        if (msg.payload.qcStatusMap.has(qcID)) {\n                            objOutboundOperation.qcKey = msg.payload.qcStatusMap.get(qcID)\n                        }\n                    }\n                    else {\n                        objOutboundOperation.qcKey = \"Unrestricted\"\n                    }\n                }\n                else {\n                    objOutboundOperation.qcKey = \"Unrestricted\"\n                }\n\n              objOutboundOperation.inventoryCode5 = listOfOutboundOperations[indexOperation].WERKS[0]\n              \n              \n              //*********OMREKENEN HOEVEELHEID NAAR BASE UOM ITEM INDIEN NODIG*********\n              \n            /*  var sapUom = listOfOutboundOperations[indexOperation].VRKME[0]\n              var objItem = msg.payload.itemMap.get(objOutboundOperation.itemKey)\n              \n              if (objItem != undefined)\n              {\n                  if (objItem.numericParameters)\n                  {\n                      if(objItem.numericParameters[3].value)\n                      {\n                          if (objItem.numericParameters[3].value > 0)\n                          {\n                            if (sapUom === 'KGM')\n                            {\n                                sapUom = 'KG'\n                           \n                  \n                                if (objItem.uom.id != sapUom)\n                                {\n                                    if (sapUom === 'KG')\n                                    {\n                                     objOutboundOperation.quantity = parseInt(objOutboundOperation.quantity / objItem.numericParameters[3].value)\n                                    }\n                      \n                                }\n                            }\n                          }\n                      }\n                  }\n                  \n              }*/\n              \n                //*********OMREKENEN HOEVEELHEID NAAR BASE UOM ITEM INDIEN NODIG*********\n              \n                if (objOutboundOperation.inventoryCode5 === 'P270')\n              {\n                  objOutboundOperation.usrTxt3 = 'LUBLIN'\n                  objOutboundorder.usrTxt3 = 'LUBLIN'\n                  objOutboundorder.usrTxt4 = objOutboundOperation.inventoryCode5\n              }\n              else if (objOutboundOperation.inventoryCode5 === 'P271')\n              {\n                     objOutboundOperation.usrTxt3 = 'MOTYCZ'\n                      objOutboundorder.usrTxt3 = 'MOTYCZ'\n                       objOutboundorder.usrTxt4 = objOutboundOperation.inventoryCode5\n                       \n              }\n              else {\n                \n                  objOutboundorder.usrTxt3 = 'EXTERNAL'\n                   objOutboundorder.usrTxt4 = objOutboundOperation.inventoryCode5\n                  objOutboundOperation.usrTxt3 = 'EXTERNAL'\n                    objOutboundOperation.pleKeys = []\n                    var pleKey =\n                        {\n                            \"key\": \"EXTERNAL\",\n                            \"value\": \"YES\"\n                        }\n                   objOutboundOperation.pleKeys[0] = pleKey\n                   objOutboundOperation.backorderOption=  'NO BACKORDERING'\n                \n              }\n              \n              plantID = objOutboundOperation.inventoryCode5 + \" - \" + objOutboundorder.usrTxt3\n              \n              objOutboundorder.outboundLines[operationsCounter] = objOutboundOperation  \n              \n                operationsCounter = operationsCounter +1\n            }            \n        }\n        \n    }\n    \n    nrOfOutboundOrders = nrOfOutboundOrders +1\n\n    arrObjOutboundOrder[index] = objOutboundorder\n}\n\n//delete msg.payload.ZDES\n\n//outbound order upload uit objective voor validatie\nvar arrUploadedOutboundOrders =[];\nmsg.payload.arrUploadedOutboundOrders = arrUploadedOutboundOrders\nmsg.payload.uploadOutboundOrderCounter  =  0\n\n// adhv upload + SAP data zien of er outbound orders geswitch-ed zijn van delivery\n// indien ja -> relatie met vorige delivery verbreken\nvar arrDeliveryRelationToDelete =[];\nmsg.payload.arrDeliveryRelationToDelete = arrDeliveryRelationToDelete\nmsg.payload.deliveryRelationToDeleteCounter  =  0\n\n// var voor upserten van outbounds en linken met delivery\nvar arrProcessedOutboundOrderKeys =[];\nmsg.payload.arrProcessedOutboundOrderKeys = arrProcessedOutboundOrderKeys\nmsg.payload.nrOfOutboundOrdersToProcess  = nrOfOutboundOrders\nmsg.payload.arrObjOutboundOrder = arrObjOutboundOrder\nmsg.payload.nrOfProcessedOutboundOrders  =  0\nmsg.payload.nrOfLinkedOutboundOrdersToDelivery  =  0\nmsg.payload.OutboundOrderKey = \"\"\n\n\n// voor voor delivery / carrier upsert\nshipmentID = shipmentID.replace(/^0+/, '');\nmsg.payload.shipmentID = shipmentID\nmsg.payload.plantID = plantID\nmsg.payload.shipmentDtsDueBefore = shipmentDtsDueBefore\nmsg.payload.objcarrier = objcarrier\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 340,
        "wires": [
            [
                "e5b886e6.343ce8",
                "f0cc9d238e7dc446"
            ]
        ]
    },
    {
        "id": "9fe34fff.81057",
        "type": "debug",
        "z": "363c53b3.cabc2c",
        "name": "AfterShipmentDownload",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3350,
        "y": 320,
        "wires": []
    },
    {
        "id": "674d7db4.1e41b4",
        "type": "subflow:a10f5bb2.0ca548",
        "z": "363c53b3.cabc2c",
        "name": "",
        "env": [],
        "x": 1450,
        "y": 220,
        "wires": [
            [
                "504e99dff1c7e45a"
            ]
        ]
    },
    {
        "id": "249c7574.be8b4a",
        "type": "subflow:1e8bac5.3bd6254",
        "z": "363c53b3.cabc2c",
        "name": "",
        "env": [],
        "x": 1700,
        "y": 340,
        "wires": [
            [
                "a49fec3f.a2bf8"
            ]
        ]
    },
    {
        "id": "4b5180f4.b8c27",
        "type": "subflow:3f1439ff.274276",
        "z": "363c53b3.cabc2c",
        "name": "",
        "env": [],
        "x": 2640,
        "y": 320,
        "wires": [
            [
                "9e1cc7c1.d21978"
            ]
        ]
    },
    {
        "id": "9e1cc7c1.d21978",
        "type": "subflow:af0e5779.77fe48",
        "z": "363c53b3.cabc2c",
        "name": "",
        "env": [],
        "x": 2930,
        "y": 320,
        "wires": [
            [
                "9fe34fff.81057",
                "bf2ebdc8523a846b",
                "47dba8eba31fd0c7",
                "2521df47a476401f"
            ]
        ]
    },
    {
        "id": "8aa3a499.a692e8",
        "type": "debug",
        "z": "363c53b3.cabc2c",
        "name": "DataAfterValidation",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2170,
        "y": 240,
        "wires": []
    },
    {
        "id": "26cfa18.059145e",
        "type": "switch",
        "z": "363c53b3.cabc2c",
        "name": "SwitchOrderType",
        "property": "payload.orderType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "OUTBOUND",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "INBOUND",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "RETOUR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 150,
        "y": 420,
        "wires": [
            [
                "667a6bae.10ca94"
            ],
            [
                "72047d9e.737804"
            ],
            [
                "6e93f0ec6344b517"
            ],
            [
                "75c91202.af42fc",
                "793f574213e2c10d"
            ]
        ]
    },
    {
        "id": "430db917.b3a398",
        "type": "function",
        "z": "363c53b3.cabc2c",
        "name": "GetOrderType",
        "func": "var orderType = msg.payload.ZDES.IDOC[0].E1EDL20[0].E1EDL21[0].LFART[0]\nconst inboundTypes = [\"EL\"]\nconst retourTypes = [\"LR\"]\nif (orderType){\n    if (inboundTypes.includes(orderType)){\n        orderType = \"INBOUND\";\n    }\n    else if (retourTypes.includes(orderType))\n    {\n         orderType = \"RETOUR\";\n    }\n    else{\n         orderType = \"OUTBOUND\";\n    }\n    \n    \n}\nelse{\n    orderType = \"UNKNOWN\"\n}\n\nmsg.payload.orderType =  orderType;\nconst itemMap = new Map()\nconst itemPackagingMap = new Map()\nconst qcStatusMap = new Map()\nvar arrItemKeys = []\nvar itemkeyCounter = 0\nvar listOfOrders  = msg.payload.ZDES.IDOC[0].E1EDL20\n\nif (listOfOrders){\n    for (var orderIndex in listOfOrders)\n    {\n        var order = listOfOrders[orderIndex]\n        \n        var listOfOperations = order.E1EDL24\n        \n        if (listOfOperations)\n        {\n            for (var operationIndex in listOfOperations)\n            {\n                var operation = listOfOperations[operationIndex]\n                \n                if (operation.MATNR)\n                {\n                    var itemKey = operation.MATNR[0]\n                    if (!(itemMap.has(itemKey))){\n                        itemMap.set(itemKey, itemKey)\n                        itemPackagingMap.set(itemKey, itemKey)\n                        arrItemKeys[itemkeyCounter] = itemKey\n                        \n                        itemkeyCounter = itemkeyCounter + 1\n                    }\n                }\n                \n            }\n            \n        }\n    \n    }\n}\n\nmsg.payload.itemMap = itemMap\nmsg.payload.itemPackagingMap = itemPackagingMap\nmsg.payload.qcStatusMap = qcStatusMap\nmsg.payload.arrItemKeys = arrItemKeys\nmsg.payload.numberOfItemKeys = arrItemKeys.length\nmsg.payload.itemkeyCounter = 0\nmsg.payload.itemKey = \"\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 80,
        "wires": [
            [
                "0e02f8933732febb",
                "f4c81b54da7e4a7b"
            ]
        ]
    },
    {
        "id": "75c91202.af42fc",
        "type": "debug",
        "z": "363c53b3.cabc2c",
        "name": "INVALID ORDER TYPE",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 170,
        "y": 520,
        "wires": []
    },
    {
        "id": "1318f76a.830d29",
        "type": "comment",
        "z": "363c53b3.cabc2c",
        "name": "Outboundorder",
        "info": "Outboundorder",
        "x": 560,
        "y": 300,
        "wires": []
    },
    {
        "id": "dd4d66dd.4d6878",
        "type": "comment",
        "z": "363c53b3.cabc2c",
        "name": "InboundOrder",
        "info": "InboundOrder OR ReturnOrder",
        "x": 550,
        "y": 500,
        "wires": []
    },
    {
        "id": "72047d9e.737804",
        "type": "function",
        "z": "363c53b3.cabc2c",
        "name": "FilterINBOUNDObjects",
        "func": "var iDocDataInbound = msg.payload.ZDES.IDOC[0].E1EDL20[0]\n\nvar objsupplier\nvar objcarrier\n\n\n\nfunction convertToDate(x){\nvar year = x.substr(0,4)\nvar month = x.substr(4,2)\nvar day = x.substr(6,2)\n\n//var result = new Date()\n//result.setYear(year)\n//result.setMonth(month - 1)\n//result.setDate(day)\n//result.setHours(2)\n//result.setMinutes(1)\n\nreturn year + \"-\" + month + \"-\" + day   \n}\n\n\n\n\n\n\nvar arrInboundOrder =[];\n\n    \n    \n    var objInboundorder = {\n    \"carrierKey\" : \"\",\n    \"supplierKey\" : \"\",\n    \"description\" : \"\",\n    \"dtsDueBefore\" : \"\",\n    \"id\" : \"\",\n    \"key\" : \"\",\n    \"name\" : \"\",\n    \"receiptLines\": [],\n    \"receiptType\": \"TWO STEP\",\n    \"status\": \"PLANNED\",\n    \"usrTxt1\" : \"\",\n    \"usrTxt2\" : \"\",\n    \"usrTxt3\" : \"\",\n    \"usrTxt4\" : \"\",\n    \"palletData\": []\n    };\n    \n\n    \n\nobjInboundorder.id = iDocDataInbound.VBELN[0]\n\nif (iDocDataInbound.LIFEX)\n    {\n    var refOutboundOrder = iDocDataInbound.LIFEX[0]\n        refOutboundOrder = refOutboundOrder.replace(/^0+/, '')\n        objInboundorder.description = \"TRANSFER REF: \" + refOutboundOrder\n    }\n    \n\n     try{\n         objInboundorder.dtsDueBefore = iDocDataInbound.E1EDT13[4].NTANF[0]\n    objInboundorder.dtsDueBefore = convertToDate(objInboundorder.dtsDueBefore)\n     }catch(err){\n        \n    }\n     try{\n   // SAPUSER = \n         objInboundorder.usrTxt2 = iDocDataInbound.E1EDL21[0].ZE1EDL21[0].ERNAM[0]\n     }catch(err){\n        \n    }\n  \n     try{\n   //PurchaseOrderNr \n         objInboundorder.usrTxt1 = iDocDataInbound.E1EDL24[0].VGBEL[0]\n   \n     }catch(err){\n        \n    }\n\n\n\nvar listOfPartnerAddresses = iDocDataInbound.E1ADRM1\n    if (listOfPartnerAddresses){\n        \n         for (var indexAddresses in listOfPartnerAddresses) {\n                 var objPartnerAddress = {\n                    TYPE : \"\",\n                    ID : \"\",\n                    NAME : \"\",\n                    STREET : \"\",\n                    POSTALCODE : \"\",\n                    CITY : \"\",\n                    COUNTRY: \"\",\n                    LANGUAGEISOCODE: \"\"\n                    }; \n        \n        \n         objPartnerAddress.TYPE = listOfPartnerAddresses[indexAddresses].PARTNER_Q[0]\n         if (objPartnerAddress.TYPE == 'LF' || objPartnerAddress.TYPE == 'SP')\n         {\n         objPartnerAddress.ID = listOfPartnerAddresses[indexAddresses].PARTNER_ID[0]\n        if (listOfPartnerAddresses[indexAddresses].NAME1){objPartnerAddress.NAME = listOfPartnerAddresses[indexAddresses].NAME1[0]}\n        if (listOfPartnerAddresses[indexAddresses].STREET) {objPartnerAddress.STREET = listOfPartnerAddresses[indexAddresses].STREET1[0]}\n        if (listOfPartnerAddresses[indexAddresses].POSTL_COD1){objPartnerAddress.POSTALCODE = listOfPartnerAddresses[indexAddresses].POSTL_COD1[0]}\n        if (listOfPartnerAddresses[indexAddresses].CITY1){objPartnerAddress.CITY = listOfPartnerAddresses[indexAddresses].CITY1[0]}\n        if (listOfPartnerAddresses[indexAddresses].COUNTRY1){objPartnerAddress.COUNTRY = listOfPartnerAddresses[indexAddresses].COUNTRY1[0]}\n         if (objPartnerAddress.COUNTRY){\n                if (objPartnerAddress.COUNTRY == 'PL'){\n                         objPartnerAddress.LANGUAGEISOCODE = 'pl'\n                    }\n                    else{\n                        objPartnerAddress.LANGUAGEISOCODE = 'en'\n                                }\n         }\n         else {\n              objPartnerAddress.LANGUAGEISOCODE = 'en'\n         }\n        \n      \n            if (objPartnerAddress.TYPE){\n                if (objPartnerAddress.TYPE == 'LF'){\n                    objInboundorder.supplierKey = objPartnerAddress.ID\n                    objsupplier =   objPartnerAddress\n                }\n            }\n            \n            if (objPartnerAddress.TYPE){\n                if (objPartnerAddress.TYPE == 'SP'){\n                    objInboundorder.carrierKey = objPartnerAddress.ID\n                    objcarrier =   objPartnerAddress\n                }\n            }\n    \n             \n         }\n         \n    }\n    \n    }\n    \nconst arrPalletData = []\nconst itemSubLotMap = new Map\nvar listOfReceivedPallets = iDocDataInbound.E1EDL37\n    var palletCounter  = 0\n    if (listOfReceivedPallets)\n    {\n         for (var palletIndex in listOfReceivedPallets)\n         {\n             \n             var palletData = {\n             \n                \"LPN\" : \"\",    \n                 \"inventoryItems\": [],\n                 \"last\" : false\n             }\n\n\n             if (listOfReceivedPallets[palletIndex].EXIDV[0].length > 18) {\n                 palletData.LPN = listOfReceivedPallets[palletIndex].EXIDV[0].substr(2, listOfReceivedPallets[palletIndex].EXIDV[0].length)\n             }\n             else {\n                 palletData.LPN = listOfReceivedPallets[palletIndex].EXIDV[0]\n             }\n\n             \n            var  palletInventoryList = listOfReceivedPallets[palletIndex].E1EDL44\n            for (var inventoryIndex in palletInventoryList){\n\n                var inventoryItemObj = {\n                    \"inboundOperationName\": \"\",\n                    \"qty\": 0,\n                    \"ItemKey\": \"\",\n                    \"LotID\": \"\",\n                    \"SubLotID\": \"\",\n                    \"inventoryCode5\": \"\",\n                    \"lastInvObj\": false\n                }\n\n                inventoryItemObj.inboundOperationName = palletInventoryList[inventoryIndex].POSNR[0]\n\n                inventoryItemObj.ItemKey = palletInventoryList[inventoryIndex].MATNR[0]\n         \n                inventoryItemObj.SubLotID = parseInt(palletInventoryList[inventoryIndex].CHARG[0].substr(1, palletInventoryList[inventoryIndex].CHARG[0].length))\n                inventoryItemObj.qty = parseFloat(palletInventoryList[inventoryIndex].VEMNG[0])\n                inventoryItemObj.inventoryCode5 = palletInventoryList[inventoryIndex].WERKS[0]\n                if (parseInt(inventoryIndex) == (inventoryIndex.length -1)){\n                    inventoryItemObj.lastInvObj = true\n                }\n\n                palletData.inventoryItems[inventoryIndex] = inventoryItemObj\n\n\n                var mapKey = inventoryItemObj.ItemKey + \"-\" + inventoryItemObj.SubLotID\n                var objItemSubLot = {\n                    Item: \"\",\n                    SubLot: \"\",\n                    Lot: \"\"\n                }\n                objItemSubLot.Item = inventoryItemObj.ItemKey\n                objItemSubLot.SubLot = inventoryItemObj.SubLotID\n\n                if (!itemSubLotMap.has(mapKey)) {\n                    itemSubLotMap.set(mapKey, objItemSubLot)\n                }\n\n            }\n\n          \n    \n\n             //var localSapContainerID = 'Z999'\n             msg.payload.localSapContainerID = 'Z999'\n             if (listOfReceivedPallets[palletIndex].VHART) { msg.payload.localSapContainerID = listOfReceivedPallets[palletIndex].VHART[0] }\n\n            if (msg.payload.itemPackagingMap)\n             {\n                msg.payload.arrpackInfo = msg.payload.itemPackagingMap.get(listOfReceivedPallets[palletIndex].E1EDL44[0].MATNR[0])\n                if (msg.payload.arrpackInfo) {\n                    var packInfo\n                    for (var packinfoIndex in msg.payload.arrpackInfo) {\n                        var tempPackInfo = msg.payload.arrpackInfo[packinfoIndex]\n                        if (tempPackInfo.ContainerSAPID === msg.payload.localSapContainerID) {\n                            packInfo = tempPackInfo\n                        }\n\n\n                    }\n\n                    if (!(packInfo)) { packInfo = msg.payload.arrpackInfo[0] }\n                    if (packInfo.Packconfig) { palletData.packConfig = packInfo.Packconfig } else { palletData.packConfig = \"UNKNOWN\" }\n                    if (packInfo.Container) { palletData.container = packInfo.Container } else { palletData.container = \"UNKNOWN\" }\n\n                }\n             }\n\n             if (parseInt(palletIndex) == (listOfReceivedPallets.length -1))\n             {\n                 palletData.last = true\n             }\n             \n             arrPalletData[palletIndex] = palletData\n            \n         }\n         \n         objInboundorder.palletData[palletCounter] = arrPalletData\n         palletCounter = palletCounter + 1\n        msg.payload.itemSubLotMap = itemSubLotMap\n        msg.payload.arrItemSubLot = Array.from(itemSubLotMap.values())\n        msg.payload.counterItemSublot = 0\n        msg.payload.varSublotID = msg.payload.arrItemSubLot[0].SubLot\n        msg.payload.varItemID = msg.payload.arrItemSubLot[0].Item\n    }\n\n    \n    \nvar listOfInboundOperations = iDocDataInbound.E1EDL24\n    \n    var operationsCounter = 0\n    if (listOfInboundOperations){\n        \n        for (var indexOperation in listOfInboundOperations) {\n            \n        \n           var objInboundOperation = {\n            \"name\" : \"\",\n            \"description\": \"\",\n            \"itemKey\": \"\",\n            \"quantity\" : 0,\n            \"lotId\" : \"\",\n            \"sublotId\" : \"\",\n            \"qcKey\" : \"\",\n            \"uomKey\" : \"\",\n            \"usrTxt3\": \"\" }; \n            \n            \n            \n            \n              objInboundOperation.name = listOfInboundOperations[indexOperation].POSNR[0]\n              objInboundOperation.description = listOfInboundOperations[indexOperation].ARKTX[0]\n              objInboundOperation.itemKey = listOfInboundOperations[indexOperation].MATNR[0]\n              \n              \n              try{\n                  objInboundOperation.quantity = parseFloat(listOfInboundOperations[indexOperation].LGMNG[0])\n              }catch(err){\n                  objInboundOperation.quantity = 0\n              }\n              \n              \n              objInboundOperation.usrTxt5 = \"x\"\n              \n                \n              if(listOfInboundOperations[indexOperation].E1EDL26)\n              {\n                  \n                if(listOfInboundOperations[indexOperation].E1EDL26[0].PSTYV){\n                    objInboundOperation.usrTxt5 = listOfInboundOperations[indexOperation].E1EDL26[0].PSTYV[0]\n                    }\n              }\n              \n              if ((objInboundOperation.quantity > 0) && (objInboundOperation.usrTxt5 != 'ELP'))\n              {\n              \n              objInboundOperation.uomKey = listOfInboundOperations[indexOperation].MEINS[0]\n              if (objInboundOperation.uomKey === 'CT')\n              {\n                  objInboundOperation.uomKey = \"ea\"\n              }\n                if (objInboundOperation.uomKey === 'PCE')\n              {\n                  objInboundOperation.uomKey = \"pc\"\n              }\n              if (objInboundOperation.uomKey === 'MTR') {\n                      objInboundOperation.uomKey = \"m\"\n                  }\n              if (objInboundOperation.uomKey === 'KGM')\n              {\n                  objInboundOperation.uomKey = \"kg\"\n              }\n              \n                 \n              //*********OMREKENEN HOEVEELHEID NAAR BASE UOM ITEM INDIEN NODIG*********\n              \n              /*var sapUom = listOfInboundOperations[indexOperation].VRKME[0]\n              var objItem = msg.payload.itemMap.get(objInboundOperation.itemKey)\n              \n              if (objItem != undefined)\n              {\n                  if (objItem.numericParameters)\n                  {\n                      if(objItem.numericParameters[3].value)\n                      {\n                          if (objItem.numericParameters[3].value > 0)\n                          {\n                            if (sapUom === 'KGM')\n                            {\n                                sapUom = 'KG'\n                                if (objItem.uom.id != sapUom)\n                                {\n                                    if (sapUom === 'KG')\n                                    {\n                                     objInboundOperation.quantity = parseInt(objInboundOperation.quantity / objItem.numericParameters[3].value)\n                                        objInboundOperation.uomKey = objItem.uom.id\n                                    }\n                      \n                                }\n                            }\n                                    \n                          }\n                      }\n                  }\n                  \n              }*/\n              \n                //*********OMREKENEN HOEVEELHEID NAAR BASE UOM ITEM INDIEN NODIG*********\n\n                //*****************meegeven lot&qc indien nodig **********************/\n\n            if (listOfInboundOperations[indexOperation].CHARG){\n                if ('999999' != listOfInboundOperations[indexOperation].CHARG[0])\n                {\n\n                    objInboundOperation.lotId = listOfInboundOperations[indexOperation].CHARG[0].substr(1, listOfInboundOperations[indexOperation].CHARG[0].length)\n                    objInboundOperation.sublotId = listOfInboundOperations[indexOperation].CHARG[0].substr(1, listOfInboundOperations[indexOperation].CHARG[0].length).replace(/^0+/, '')\n                    var qcID = listOfInboundOperations[indexOperation].CHARG[0].substr(0, 1)\n                    if (msg.payload.qcStatusMap.has(qcID)){\n                        objInboundOperation.qcKey = msg.payload.qcStatusMap.get(qcID)\n                    }\n                }\n                else\n                {\n                    objInboundOperation.qcKey = \"QUALITY INSPECTION\"\n                }\n            }\n            else {\n                objInboundOperation.qcKey = \"QUALITY INSPECTION\"\n            }\n           \n              \n              \n              objInboundOperation.usrTxt4 = listOfInboundOperations[indexOperation].WERKS[0]\n              objInboundOperation.inventoryCode5 =  objInboundOperation.usrTxt4\n              if (objInboundOperation.usrTxt4 === 'P270')\n              {\n                  objInboundOperation.usrTxt3 = 'LUBLIN'\n                  objInboundorder.usrTxt3 = 'LUBLIN'\n                  objInboundorder.usrTxt4= objInboundOperation.usrTxt4\n              }\n              else if (objInboundOperation.usrTxt4 === 'P271')\n              {\n                     objInboundOperation.usrTxt3 = 'MOTYCZ'\n                      objInboundorder.usrTxt3 = 'MOTYCZ'\n                         objInboundorder.usrTxt4= objInboundOperation.usrTxt4\n              }\n              else {\n                \n                  objInboundorder.usrTxt3 = 'EXTERNAL'\n                  objInboundorder.usrTxt4= objInboundOperation.usrTxt4\n                  objInboundOperation.usrTxt3 = 'EXTERNAL'\n         \n              }\n              \n              //add result\n              objInboundorder.receiptLines[operationsCounter] = objInboundOperation  \n              operationsCounter = operationsCounter + 1\n              }\n        }\n        \n        \n    }\n\n\n\n\n\n\ndelete msg.payload.ZDES\n\n\n\n\n\n\nmsg.payload.inboundOrderKey = objInboundorder.id\nmsg.payload.objcarrier = objcarrier\nmsg.payload.objsupplier = objsupplier\n\nmsg.payload.objInboundorder = objInboundorder\n\nmsg.payload.asnPalletData = objInboundorder.palletData[0]\nvar numberOfASNPallets = 0\nif (objInboundorder.palletData){\n    if (objInboundorder.palletData[0])\n    {\n    numberOfASNPallets = objInboundorder.palletData[0].length\n    }\n}\nmsg.payload.asnPalletDataCount = numberOfASNPallets\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 540,
        "wires": [
            [
                "7c0cf7f68d7284b0",
                "283a3def66838a49"
            ]
        ]
    },
    {
        "id": "3dcbf47d.feba4c",
        "type": "debug",
        "z": "363c53b3.cabc2c",
        "name": "AfterInboundorderDL",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3580,
        "y": 500,
        "wires": []
    },
    {
        "id": "17aa32b3.12cced",
        "type": "subflow:4bfe965d.e41428",
        "z": "363c53b3.cabc2c",
        "name": "",
        "env": [],
        "x": 1420,
        "y": 460,
        "wires": [
            [
                "10c58bed81da2607"
            ]
        ]
    },
    {
        "id": "eed8ad92.5c33f",
        "type": "subflow:a10f5bb2.0ca548",
        "z": "363c53b3.cabc2c",
        "name": "",
        "env": [],
        "x": 1910,
        "y": 460,
        "wires": [
            [
                "dc6f0d5eee30aafe"
            ]
        ]
    },
    {
        "id": "638eb59d.d1db5c",
        "type": "debug",
        "z": "363c53b3.cabc2c",
        "name": "Retour",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 400,
        "wires": []
    },
    {
        "id": "a49fec3f.a2bf8",
        "type": "function",
        "z": "363c53b3.cabc2c",
        "name": "validateOutboundOrderData",
        "func": "\nvar localObjOutboundorder\nvar uploadedObjOutboundorder\nvar numberOfDeliveryRelationsToDelete = 0\nvar boolFoundInUpload = false\nif (msg.payload.arrObjOutboundOrder){\n    for (let i = 0; i < msg.payload.arrObjOutboundOrder.length; i++) {\n\n            localObjOutboundorder = msg.payload.arrObjOutboundOrder[i]\n            boolFoundInUpload = false\n            \n            if (msg.payload.arrUploadedOutboundOrders){\n      \n             for (let j = 0; j < msg.payload.arrUploadedOutboundOrders.length; j++) {\n                \n                uploadedObjOutboundorder = msg.payload.arrUploadedOutboundOrders[j]\n             \n                if (uploadedObjOutboundorder.id ==localObjOutboundorder.id){\n                    boolFoundInUpload = true\n                    if(uploadedObjOutboundorder.usrTxt1){\n                        \n                        if (uploadedObjOutboundorder.usrTxt1 ==  msg.payload.DeliveryOrderDownloadResult)\n                        {\n                             localObjOutboundorder.usrTxt1 = msg.payload.DeliveryOrderDownloadResult\n                             localObjOutboundorder.usrFlg1 = false\n                        }\n                        else{\n                            \n                            \n                            var objRelationDeliveryOutbound = {\"deliveryid\" : \"\",\n                                                               \"outboundOrderid\" : \"\"}\n                            \n                            objRelationDeliveryOutbound.deliveryid = uploadedObjOutboundorder.usrTxt1\n                            objRelationDeliveryOutbound.outboundOrderid = localObjOutboundorder.id\n                            \n                            msg.payload.arrDeliveryRelationToDelete[numberOfDeliveryRelationsToDelete] = objRelationDeliveryOutbound\n                            \n                            numberOfDeliveryRelationsToDelete = numberOfDeliveryRelationsToDelete +1\n                            \n                            localObjOutboundorder.usrTxt1 = msg.payload.DeliveryOrderDownloadResult\n                            localObjOutboundorder.usrFlg1 = true\n                            \n                        }\n                        \n                    \n                    }\n                    else{\n                       \n                       \n                        localObjOutboundorder.usrTxt1 = msg.payload.DeliveryOrderDownloadResult\n                        localObjOutboundorder.usrFlg1 = true\n                       \n                    }\n                    \n                    \n                    \n                    \n                    \n                    \n                }\n            \n                \n             }\n      \n      \n                if (boolFoundInUpload === false)\n                {\n                 localObjOutboundorder.usrTxt1 = msg.payload.DeliveryOrderDownloadResult\n                 localObjOutboundorder.usrFlg1 = true\n                }\n      \n            }\n            else{\n                // nog niets in Objective \n                localObjOutboundorder.usrTxt1 = msg.payload.DeliveryOrderDownloadResult\n                 localObjOutboundorder.usrFlg1 = true\n            }\n\n        \n\n\n    }\n\n}\nmsg.payload.numberOfDeliveryRelationsToDelete = numberOfDeliveryRelationsToDelete\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1920,
        "y": 260,
        "wires": [
            [
                "8aa3a499.a692e8",
                "54d87bf6.cb2ea4"
            ]
        ]
    },
    {
        "id": "e5b886e6.343ce8",
        "type": "subflow:3d042f59.b938e",
        "z": "363c53b3.cabc2c",
        "name": "",
        "env": [],
        "x": 950,
        "y": 220,
        "wires": [
            [
                "f771253b8f549a61",
                "0653157d0a0ad6c4"
            ]
        ]
    },
    {
        "id": "54d87bf6.cb2ea4",
        "type": "subflow:5b600531.9e834c",
        "z": "363c53b3.cabc2c",
        "name": "",
        "env": [],
        "x": 2290,
        "y": 300,
        "wires": [
            [
                "4b5180f4.b8c27",
                "22e86976.eb30f6"
            ]
        ]
    },
    {
        "id": "22e86976.eb30f6",
        "type": "debug",
        "z": "363c53b3.cabc2c",
        "name": "DataAfterRemove",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2550,
        "y": 240,
        "wires": []
    },
    {
        "id": "10c58bed81da2607",
        "type": "switch",
        "z": "363c53b3.cabc2c",
        "name": "switchCarrier",
        "property": "payload.objcarrier",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1670,
        "y": 520,
        "wires": [
            [
                "eed8ad92.5c33f"
            ],
            [
                "dc6f0d5eee30aafe"
            ]
        ]
    },
    {
        "id": "61f788a934c41c8d",
        "type": "switch",
        "z": "363c53b3.cabc2c",
        "name": "switchSupplier",
        "property": "payload.objsupplier",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1180,
        "y": 500,
        "wires": [
            [
                "17aa32b3.12cced"
            ],
            [
                "10c58bed81da2607"
            ]
        ]
    },
    {
        "id": "0e02f8933732febb",
        "type": "debug",
        "z": "363c53b3.cabc2c",
        "name": "getOrderType",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 40,
        "wires": []
    },
    {
        "id": "f0cc9d238e7dc446",
        "type": "debug",
        "z": "363c53b3.cabc2c",
        "name": "outbound",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 300,
        "wires": []
    },
    {
        "id": "7c0cf7f68d7284b0",
        "type": "debug",
        "z": "363c53b3.cabc2c",
        "name": "inbound",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 500,
        "wires": []
    },
    {
        "id": "34b8e58d671e2776",
        "type": "subflow:4da577a93a5543d4",
        "z": "363c53b3.cabc2c",
        "name": "",
        "env": [],
        "x": 2370,
        "y": 460,
        "wires": [
            [
                "f1b9aa9da68d07a3"
            ]
        ]
    },
    {
        "id": "6e93f0ec6344b517",
        "type": "function",
        "z": "363c53b3.cabc2c",
        "name": "FilterRETURNObjects",
        "func": "var listOfInboundOrders = msg.payload.ZDES.IDOC[0].E1EDL20\n\nvar objsupplier\nvar objcarrier\nvar nrOfInboundOrders = 0\n\n\nfunction convertToDate(x){\nvar year = x.substr(0,4)\nvar month = x.substr(4,2)\nvar day = x.substr(6,2)\n\n//var result = new Date()\n//result.setYear(year)\n//result.setMonth(month - 1)\n//result.setDate(day)\n//result.setHours(2)\n//result.setMinutes(1)\n\nreturn year + \"-\" + month + \"-\" + day   \n}\n\n\n\n\n\n\nvar arrInboundOrder =[];\nfor (var index in listOfInboundOrders) {\n    \n    \n    var objReturnorder = {\n    \"carrierKey\" : \"\",\n   \"customerKey\" : \"\",\n    \"description\" : \"\",\n    \"dtsDueBefore\" : \"\",\n    \"id\" : \"\",\n    \"returnType\": \"DEFAULT\",\n    \"key\" : \"\",\n    \"name\" : \"\",\n    \"returnLines\": [],\n    \"usrTxt1\" : \"\",\n    \"usrTxt2\" : \"\",\n    \"usrTxt3\": \"\",\n    \"usrTxt4\": \"\"\n    };\n    \n\n    \n\n    objReturnorder.id = listOfInboundOrders[index]. VBELN[0]\n    \n\n     try{\n    objReturnorder.dtsDueBefore = listOfInboundOrders[index].E1EDT13[4].NTANF[0]\n    objReturnorder.dtsDueBefore = convertToDate(objReturnorder.dtsDueBefore)\n     }catch(err){\n        \n    }\n     try{\n   // SAPUSER = \n    objReturnorder.usrTxt2 = listOfInboundOrders[index].E1EDL21[0].ZE1EDL21[0].ERNAM[0]\n     }catch(err){\n        \n    }\n  \n     try{\n   //PurchaseOrderNr \n    objReturnorder.usrTxt1 = listOfInboundOrders[index].E1EDL24[0].VGBEL[0]\n   \n     }catch(err){\n        \n    }\n\n\n\n    var listOfPartnerAddresses = listOfInboundOrders[index].E1ADRM1\n    if (listOfPartnerAddresses){\n        \n         for (var indexAddresses in listOfPartnerAddresses) {\n                 var objPartnerAddress = {\n                    TYPE : \"\",\n                    ID : \"\",\n                    NAME : \"\",\n                    STREET : \"\",\n                    POSTALCODE : \"\",\n                    CITY : \"\",\n                    COUNTRY: \"\",\n                    LANGUAGEISOCODE: \"\"\n                    }; \n        \n         objPartnerAddress.TYPE = listOfPartnerAddresses[indexAddresses].PARTNER_Q[0]\n             if (objPartnerAddress.TYPE == 'LF' || objPartnerAddress.TYPE == 'SP' || objPartnerAddress.TYPE == 'AG')\n         {\n            objPartnerAddress.ID = listOfPartnerAddresses[indexAddresses].PARTNER_ID[0]\n             if (listOfPartnerAddresses[indexAddresses].NAME1) { objPartnerAddress.NAME = listOfPartnerAddresses[indexAddresses].NAME1[0] }\n             if (listOfPartnerAddresses[indexAddresses].STREET) { objPartnerAddress.STREET = listOfPartnerAddresses[indexAddresses].STREET1[0] }\n             if (listOfPartnerAddresses[indexAddresses].POSTL_COD1) { objPartnerAddress.POSTALCODE = listOfPartnerAddresses[indexAddresses].POSTL_COD1[0] }\n             if (listOfPartnerAddresses[indexAddresses].CITY1) { objPartnerAddress.CITY = listOfPartnerAddresses[indexAddresses].CITY1[0] }\n             if (listOfPartnerAddresses[indexAddresses].COUNTRY1){objPartnerAddress.COUNTRY = listOfPartnerAddresses[indexAddresses].COUNTRY1[0]}\n            if (objPartnerAddress.COUNTRY){\n                    if (objPartnerAddress.COUNTRY == 'PL'){\n                         objPartnerAddress.LANGUAGEISOCODE = 'pl'\n                    }\n                    else{\n                        objPartnerAddress.LANGUAGEISOCODE = 'en'\n                    }\n             }\n            else {\n              objPartnerAddress.LANGUAGEISOCODE = 'en'\n             }\n        \n      \n            if (objPartnerAddress.TYPE){\n                if (objPartnerAddress.TYPE == 'LF'){\n                    objReturnorder.supplierKey = objPartnerAddress.ID\n                    objsupplier =   objPartnerAddress\n                }\n            }\n            \n            if (objPartnerAddress.TYPE){\n                if (objPartnerAddress.TYPE == 'SP'){\n                    objReturnorder.carrierKey = objPartnerAddress.ID\n                    objcarrier =   objPartnerAddress\n                }\n            }\n             if (objPartnerAddress.TYPE) {\n             if (objPartnerAddress.TYPE == 'AG'){\n                 objReturnorder.customerKey = objPartnerAddress.ID\n             }\n             }      \n         }\n         \n    }\n    \n    \n}\n    \n     var listOfInboundOperations = listOfInboundOrders[index].E1EDL24\n    \n      var operationsCounter = 0\n    if (listOfInboundOperations){\n        \n        for (var indexOperation in listOfInboundOperations) {\n            \n        \n           var objInboundOperation = {\n            \"name\" : \"\",\n            \"description\": \"\",\n            \"itemKey\": \"\",\n            \"quantity\" : 0,\n            \"lotId\" : \"\",\n            \"qcKey\" : \"\",\n            \"uomKey\" : \"\",\n            \"usrTxt3\": \"\"\n        }; \n            \n            \n            \n            \n              objInboundOperation.name = listOfInboundOperations[indexOperation].POSNR[0]\n              objInboundOperation.description = listOfInboundOperations[indexOperation].ARKTX[0]\n              objInboundOperation.itemKey = listOfInboundOperations[indexOperation].MATNR[0]\n            try{\n                objInboundOperation.quantity = parseFloat(listOfInboundOperations[indexOperation].LGMNG[0])\n              }catch(err){\n                objInboundOperation.quantity = 0\n              }\n\n   \n              objInboundOperation.usrTxt5 = \"x\"\n              \n                \n              if(listOfInboundOperations[indexOperation].E1EDL26)\n              {\n                  \n                if(listOfInboundOperations[indexOperation].E1EDL26[0].PSTYV){\n                    objInboundOperation.usrTxt5 = listOfInboundOperations[indexOperation].E1EDL26[0].PSTYV[0]\n                    }\n              }\n              \n              if ((objInboundOperation.quantity > 0) && (objInboundOperation.usrTxt5 != 'ELP'))\n              {\n              objInboundOperation.lotId = listOfInboundOperations[indexOperation].CHARG[0]\n              objInboundOperation.uomKey = listOfInboundOperations[indexOperation].MEINS[0]\n              if (objInboundOperation.uomKey === 'CT')\n              {\n                  objInboundOperation.uomKey = \"ea\"\n              }\n              if (objInboundOperation.uomKey === 'PCE')\n              {\n                  objInboundOperation.uomKey = \"ea\"\n              }\n              if (objInboundOperation.uomKey === 'KGM')\n              {\n                  objInboundOperation.uomKey = \"kg\"\n              }\n              \n               //*********OMREKENEN HOEVEELHEID NAAR BASE UOM ITEM INDIEN NODIG*********\n              \n             /*var sapUom = listOfInboundOperations[indexOperation].VRKME[0]\n              var objItem = msg.payload.itemMap.get(objInboundOperation.itemKey)\n              \n              if (objItem != undefined)\n              {\n                  if (objItem.numericParameters)\n                  {\n                      if(objItem.numericParameters[3].value)\n                      {\n                          if (objItem.numericParameters[3].value > 0)\n                          {\n                            if (sapUom === 'KGM')\n                            {\n                                sapUom = 'KG'\n                                if (objItem.uom.id != sapUom)\n                                {\n                                    if (sapUom === 'KG')\n                                    {\n                                     objInboundOperation.quantity = parseInt(objInboundOperation.quantity / objItem.numericParameters[3].value)\n                                     objInboundOperation.uomKey = \"ea\"\n                                    }\n                      \n                                }\n                            }\n                                    \n                          }\n                      }\n                  }\n                  \n              }*/\n              \n                //*********OMREKENEN HOEVEELHEID NAAR BASE UOM ITEM INDIEN NODIG*********\n              \n              \n                  //*****************meegeven lot&qc indien nodig **********************/\n\n                  if (listOfInboundOperations[indexOperation].CHARG) {\n                      if ('999999' != listOfInboundOperations[indexOperation].CHARG[0]) {\n                          objInboundOperation.lotId = listOfInboundOperations[indexOperation].CHARG[0].substr(1, listOfInboundOperations[indexOperation].CHARG[0].length)\n                          var qcID = listOfInboundOperations[indexOperation].CHARG[0].substr(0, 1)\n                          if (msg.payload.qcStatusMap.has(qcID)) {\n                              objInboundOperation.qcKey = msg.payload.qcStatusMap.get(qcID)\n                          }\n                      }\n                      else {\n                          objInboundOperation.qcKey = \"QUALITY INSPECTION\"\n                      }\n                  }\n                  else {\n                      objInboundOperation.qcKey = \"QUALITY INSPECTION\"\n                  }\n\n\n\n              objInboundOperation.usrTxt4 = listOfInboundOperations[indexOperation].WERKS[0]\n               objInboundOperation.inventoryCode5 =  objInboundOperation.usrTxt4\n               if (objInboundOperation.usrTxt4 === 'P270')\n              {\n                  objInboundOperation.usrTxt3 = 'LUBLIN'\n                  objReturnorder.usrTxt3 = 'LUBLIN'\n                   objReturnorder.usrTxt4 = objInboundOperation.usrTxt4 \n              }\n              else if (objInboundOperation.usrTxt4 === 'P271')\n              {\n                     objInboundOperation.usrTxt3 = 'MOTYCZ'\n                      objReturnorder.usrTxt3 = 'MOTYCZ'\n                      objReturnorder.usrTxt4 = objInboundOperation.usrTxt4 \n              }\n              else {\n                \n                  objReturnorder.usrTxt3 = 'EXTERNAL'\n                  objReturnorder.usrTxt4 = objInboundOperation.usrTxt4\n                  objInboundOperation.usrTxt3 = 'EXTERNAL'\n                 \n              }\n              \n              \n              //add result\n              objReturnorder.returnLines[operationsCounter] = objInboundOperation  \n            operationsCounter = operationsCounter +1 \n              }\n        }\n        \n        \n    }\n\n    \n    nrOfInboundOrders = nrOfInboundOrders +1\n\n    arrInboundOrder[index] = objReturnorder\n}\n\n\ndelete msg.payload.ZDES\n//msg.payload.listOfInboundOperations =listOfInboundOperations\n//msg.payload.listOfInboundOrders = listOfInboundOrders\nmsg.payload.nrOfinboundOrdersToProcess  = nrOfInboundOrders\n\n\n\nmsg.payload.nrOfProcessedinboundOrders  =  0\nmsg.payload.inboundOrderKey = \"\"\nmsg.payload.objcarrier = objcarrier\nmsg.payload.objsupplier = objsupplier\n\nmsg.payload.arrObjInboundOrder = arrInboundOrder\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 440,
        "wires": [
            [
                "61f788a934c41c8d",
                "638eb59d.d1db5c"
            ]
        ]
    },
    {
        "id": "5619d679d1e2e3e2",
        "type": "subflow:fc598934.190128",
        "z": "363c53b3.cabc2c",
        "name": "",
        "env": [],
        "x": 2370,
        "y": 540,
        "wires": [
            [
                "f1b9aa9da68d07a3"
            ]
        ]
    },
    {
        "id": "dc6f0d5eee30aafe",
        "type": "switch",
        "z": "363c53b3.cabc2c",
        "name": "",
        "property": "payload.orderType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "INBOUND",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "RETOUR",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2150,
        "y": 500,
        "wires": [
            [
                "34b8e58d671e2776"
            ],
            [
                "5619d679d1e2e3e2"
            ]
        ]
    },
    {
        "id": "f771253b8f549a61",
        "type": "debug",
        "z": "363c53b3.cabc2c",
        "name": "UPLOADED_OUTBOUNDORDER",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1160,
        "y": 160,
        "wires": []
    },
    {
        "id": "0653157d0a0ad6c4",
        "type": "switch",
        "z": "363c53b3.cabc2c",
        "name": "",
        "property": "payload.objcarrier",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1170,
        "y": 300,
        "wires": [
            [
                "674d7db4.1e41b4"
            ],
            [
                "504e99dff1c7e45a"
            ]
        ]
    },
    {
        "id": "840f6bafe35b768c",
        "type": "comment",
        "z": "363c53b3.cabc2c",
        "name": "Retour",
        "info": "InboundOrder OR ReturnOrder",
        "x": 530,
        "y": 400,
        "wires": []
    },
    {
        "id": "44300f12df81102f",
        "type": "subflow:9448532d880def76",
        "z": "363c53b3.cabc2c",
        "name": "",
        "env": [],
        "x": 1180,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "3dde13a9fa8031ea",
        "type": "debug",
        "z": "363c53b3.cabc2c",
        "name": "AfterGettingItems",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1610,
        "y": 40,
        "wires": []
    },
    {
        "id": "dc0ce44a625f76b3",
        "type": "debug",
        "z": "363c53b3.cabc2c",
        "name": "xmlData",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "xmlData",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 780,
        "wires": []
    },
    {
        "id": "138c9c77e5c6d98b",
        "type": "change",
        "z": "363c53b3.cabc2c",
        "name": "Set filename and payload",
        "rules": [
            {
                "t": "set",
                "p": "filename",
                "pt": "msg",
                "to": "$env('INTERFACE_DOWNLOAD_DIR')&'/ASN_'&$now('[D01][M01][Y0001]-[H01][m01][s01]','+0100')",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "xmlData",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "renamecommand",
                "pt": "msg",
                "to": "filename&' '&filename&'.xml'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1610,
        "y": 840,
        "wires": [
            [
                "39d12914677cc3f3"
            ]
        ]
    },
    {
        "id": "39d12914677cc3f3",
        "type": "file",
        "z": "363c53b3.cabc2c",
        "name": "Write to XML",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1810,
        "y": 840,
        "wires": [
            [
                "d618d28bf3a3928c"
            ]
        ]
    },
    {
        "id": "9bb3de9f4ac8db41",
        "type": "xml",
        "z": "363c53b3.cabc2c",
        "name": "Jason To Xml",
        "property": "xmlData",
        "attr": "",
        "chr": "",
        "x": 1180,
        "y": 840,
        "wires": [
            [
                "5f5832b6e65417d7"
            ]
        ]
    },
    {
        "id": "d618d28bf3a3928c",
        "type": "exec",
        "z": "363c53b3.cabc2c",
        "command": "mv ",
        "addpay": "renamecommand",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Rename",
        "x": 1960,
        "y": 840,
        "wires": [
            [
                "63a587c69fd30957"
            ],
            [
                "03e114d25defd192"
            ],
            [
                "e88452d88791836a"
            ]
        ]
    },
    {
        "id": "63a587c69fd30957",
        "type": "debug",
        "z": "363c53b3.cabc2c",
        "name": "node1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2250,
        "y": 720,
        "wires": []
    },
    {
        "id": "03e114d25defd192",
        "type": "debug",
        "z": "363c53b3.cabc2c",
        "name": "node2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2250,
        "y": 760,
        "wires": []
    },
    {
        "id": "52063a22261a3270",
        "type": "debug",
        "z": "363c53b3.cabc2c",
        "name": "command ok",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3310,
        "y": 680,
        "wires": []
    },
    {
        "id": "283a3def66838a49",
        "type": "switch",
        "z": "363c53b3.cabc2c",
        "name": "",
        "property": "payload.asnPalletDataCount",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 950,
        "y": 560,
        "wires": [
            [
                "61f788a934c41c8d"
            ],
            [
                "61f788a934c41c8d"
            ],
            [
                "cbe9ef8a97713d7f"
            ]
        ]
    },
    {
        "id": "f4c81b54da7e4a7b",
        "type": "subflow:31ab2e331f379432",
        "z": "363c53b3.cabc2c",
        "name": "",
        "env": [],
        "x": 1380,
        "y": 80,
        "wires": [
            [
                "3dde13a9fa8031ea",
                "21121e31666c865e"
            ]
        ]
    },
    {
        "id": "e3f4570d68514423",
        "type": "comment",
        "z": "363c53b3.cabc2c",
        "name": "ASN",
        "info": "InboundOrder OR ReturnOrder",
        "x": 910,
        "y": 800,
        "wires": []
    },
    {
        "id": "5f5832b6e65417d7",
        "type": "change",
        "z": "363c53b3.cabc2c",
        "name": "SaveInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "sourcepayload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1390,
        "y": 840,
        "wires": [
            [
                "138c9c77e5c6d98b"
            ]
        ]
    },
    {
        "id": "e88452d88791836a",
        "type": "change",
        "z": "363c53b3.cabc2c",
        "name": "restoreInputPayload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sourcepayload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2260,
        "y": 900,
        "wires": [
            [
                "de9b4a5f12906258"
            ]
        ]
    },
    {
        "id": "de9b4a5f12906258",
        "type": "delay",
        "z": "363c53b3.cabc2c",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2530,
        "y": 920,
        "wires": [
            [
                "48aef7d684a8bde5",
                "4056b08f45031070"
            ]
        ]
    },
    {
        "id": "48aef7d684a8bde5",
        "type": "subflow:ab54f22932ac167f",
        "z": "363c53b3.cabc2c",
        "name": "",
        "env": [],
        "x": 2690,
        "y": 860,
        "wires": [
            [
                "0df91b19c71d45e7"
            ]
        ]
    },
    {
        "id": "0df91b19c71d45e7",
        "type": "switch",
        "z": "363c53b3.cabc2c",
        "name": "",
        "property": "payload.ASNQryResult.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2790,
        "y": 760,
        "wires": [
            [
                "d0a42f67bfb548c5"
            ],
            [
                "a8341f105e14433b",
                "d3e24d28543f90df"
            ]
        ]
    },
    {
        "id": "a8341f105e14433b",
        "type": "debug",
        "z": "363c53b3.cabc2c",
        "name": "ErrorNoASNcreatedOrAlreadyPlanned",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 3180,
        "y": 920,
        "wires": []
    },
    {
        "id": "945332083cf5996c",
        "type": "switch",
        "z": "363c53b3.cabc2c",
        "name": "",
        "property": "payload.ASNQryResult.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2830,
        "y": 480,
        "wires": [
            [
                "9562d9e4320ade8c"
            ],
            [
                "d91f64f503da8822"
            ]
        ]
    },
    {
        "id": "511b7be663bbdb0a",
        "type": "function",
        "z": "363c53b3.cabc2c",
        "name": "prepPreReceiveLPN",
        "func": "var arrPreReceiveLPN = []\n\nfor (var index in msg.payload.asnPalletData) {\n\n    var palletData = msg.payload.asnPalletData[index]\n    var objInbound = msg.payload.objInboundOrder\n    var preReceiveJason = \n    {\n        \"asnKey\": msg.payload.inboundOrderKey,\n        \"lpnKey\": palletData.LPN,\n        \"receiptLineKeys\": [],\n        \"receiptOrderKey\": msg.payload.inboundOrderKey\n    }\n\n    for (var inventoryIndex in msg.payload.asnPalletData[index].inventoryItems) {\n\n\n        preReceiveJason.receiptLineKeys[inventoryIndex] = msg.payload.asnPalletData[index].inventoryItems[inventoryIndex].inboundOperationName\n\n       \n    }\n\n    arrPreReceiveLPN[index] = preReceiveJason\n\n}\n\nmsg.payload.ASNCounter = 0\nmsg.payload.arrPreReceiveLPN = arrPreReceiveLPN\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3020,
        "y": 540,
        "wires": [
            [
                "66c845ea98fec7a4",
                "7a3171b91b9ef5c7"
            ]
        ]
    },
    {
        "id": "d0a42f67bfb548c5",
        "type": "function",
        "z": "363c53b3.cabc2c",
        "name": "validateASNPalletData",
        "func": "\n\n\nfor (var index in msg.payload.asnPalletData) \n{\n        var mismatcASN_Inbound = true\n\n        var palletData = msg.payload.asnPalletData[index]\n                for (var index2 in msg.payload.ASNQryResult)\n                {\n                        var qryData = msg.payload.ASNQryResult[index2]\n    \n                        if (qryData.LPN === palletData.LPN)\n                        {\n                          mismatcASN_Inbound = false\n                        }\n                \n                }\n\n\n}\n\nmsg.payload.mismatcASN_Inbound = mismatcASN_Inbound\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3000,
        "y": 760,
        "wires": [
            [
                "ea944436953a16c3"
            ]
        ]
    },
    {
        "id": "ea944436953a16c3",
        "type": "switch",
        "z": "363c53b3.cabc2c",
        "name": "ASNValidatioOK?",
        "property": "payload.mismatcASN_Inbound",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 3230,
        "y": 760,
        "wires": [
            [
                "52063a22261a3270",
                "61f788a934c41c8d"
            ],
            [
                "e041e90d3cbead08"
            ]
        ]
    },
    {
        "id": "b05d77629232e9d2",
        "type": "debug",
        "z": "363c53b3.cabc2c",
        "name": "VaidationNOK",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3600,
        "y": 780,
        "wires": []
    },
    {
        "id": "66c845ea98fec7a4",
        "type": "subflow:860b725b28b14c5e",
        "z": "363c53b3.cabc2c",
        "name": "",
        "env": [],
        "x": 3230,
        "y": 540,
        "wires": [
            [
                "9562d9e4320ade8c"
            ]
        ]
    },
    {
        "id": "7a3171b91b9ef5c7",
        "type": "debug",
        "z": "363c53b3.cabc2c",
        "name": "PreRecieveLPN",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3020,
        "y": 660,
        "wires": []
    },
    {
        "id": "4056b08f45031070",
        "type": "debug",
        "z": "363c53b3.cabc2c",
        "name": "DDWR2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2770,
        "y": 1000,
        "wires": []
    },
    {
        "id": "d91f64f503da8822",
        "type": "delay",
        "z": "363c53b3.cabc2c",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2800,
        "y": 540,
        "wires": [
            [
                "511b7be663bbdb0a"
            ]
        ]
    },
    {
        "id": "21121e31666c865e",
        "type": "subflow:a3987006252c27b3",
        "z": "363c53b3.cabc2c",
        "name": "",
        "env": [],
        "x": 1580,
        "y": 160,
        "wires": [
            [
                "26cfa18.059145e"
            ]
        ]
    },
    {
        "id": "cbe9ef8a97713d7f",
        "type": "subflow:5dae959254452f97",
        "z": "363c53b3.cabc2c",
        "name": "",
        "env": [],
        "x": 530,
        "y": 740,
        "wires": [
            [
                "17b8e6ce7bf94a78"
            ]
        ]
    },
    {
        "id": "3555ac98d037cef3",
        "type": "debug",
        "z": "363c53b3.cabc2c",
        "name": "LOTsearch",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 760,
        "wires": []
    },
    {
        "id": "17b8e6ce7bf94a78",
        "type": "function",
        "z": "363c53b3.cabc2c",
        "name": "updateLPNLot",
        "func": "\nfor (var palletIndex in msg.payload.asnPalletData)\n{\n\n    var objPalletData = msg.payload.asnPalletData[palletIndex]\n\n  for (var invIndex in objPalletData.inventoryItems)\n  {\n    var objInvItem = objPalletData.inventoryItems[invIndex]\n    var mapKey = objInvItem.ItemKey + \"-\" + objInvItem.SubLotID.toString()\n    msg.payload.mapKeyDeb = mapKey\n    var objItemLotData = msg.payload.itemSubLotMap.get(mapKey)\n    if (objItemLotData) {\n      if (objItemLotData.Lot === \"\") {\n        objInvItem.LotID = objItemLotData.SubLot\n      }\n      else {\n        objInvItem.LotID = objItemLotData.Lot\n      }\n\n    }\n    else {\n      objInvItem.LotID = objInvItem.SubLotID\n    }\n  }\n\n\n\n\n\n}\n\nfor (var receiptLineIndex in msg.payload.objInboundorder.receiptLines)\n{\n  var objReceiptLine = msg.payload.objInboundorder.receiptLines[receiptLineIndex]\n  var mapKey2 = objReceiptLine.itemKey.toString() + \"-\" + objReceiptLine.sublotId.toString()\n  msg.payload.mapKeyDeb = mapKey2\n  var objItemLotData2 = msg.payload.itemSubLotMap.get(mapKey2)\n  if (objItemLotData2) \n  {\n    if (objItemLotData.Lot === \"\")\n    {\n      objReceiptLine.lotId =   objItemLotData2.SubLot\n    }\n    else\n    {\n      objReceiptLine.lotId = objItemLotData2.Lot\n    }\n    \n  }\n  else\n  {\n    objReceiptLine.lotId = objReceiptLine.sublotId\n  }\n \n}\n\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 860,
        "wires": [
            [
                "3555ac98d037cef3",
                "ed74d0fbf2df0623"
            ]
        ]
    },
    {
        "id": "504e99dff1c7e45a",
        "type": "switch",
        "z": "363c53b3.cabc2c",
        "name": "CustomersToDownload",
        "property": "payload.arrCustomerLength",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1230,
        "y": 380,
        "wires": [
            [
                "d4019e9baaf3fcfb"
            ],
            [
                "249c7574.be8b4a"
            ]
        ]
    },
    {
        "id": "d4019e9baaf3fcfb",
        "type": "subflow:436dd2ee6d1e0587",
        "z": "363c53b3.cabc2c",
        "name": "",
        "x": 1440,
        "y": 320,
        "wires": [
            [
                "249c7574.be8b4a"
            ]
        ]
    },
    {
        "id": "47dba8eba31fd0c7",
        "type": "debug",
        "z": "363c53b3.cabc2c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "file",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3200,
        "y": 200,
        "wires": []
    },
    {
        "id": "bf2ebdc8523a846b",
        "type": "debug",
        "z": "363c53b3.cabc2c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "archivedir",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3240,
        "y": 240,
        "wires": []
    },
    {
        "id": "2521df47a476401f",
        "type": "fs-ops-move",
        "z": "363c53b3.cabc2c",
        "name": "MoveFileToArchive",
        "sourcePath": "INTERFACE_SAP_TO_OBJ_DIR",
        "sourcePathType": "env",
        "sourceFilename": "file",
        "sourceFilenameType": "msg",
        "destPath": "archivedir",
        "destPathType": "msg",
        "destFilename": "file",
        "destFilenameType": "msg",
        "link": false,
        "x": 3350,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "9562d9e4320ade8c",
        "type": "fs-ops-move",
        "z": "363c53b3.cabc2c",
        "name": "MoveFileToArchive",
        "sourcePath": "INTERFACE_SAP_TO_OBJ_DIR",
        "sourcePathType": "env",
        "sourceFilename": "file",
        "sourceFilenameType": "msg",
        "destPath": "archivedir",
        "destPathType": "msg",
        "destFilename": "file",
        "destFilenameType": "msg",
        "link": false,
        "x": 3190,
        "y": 440,
        "wires": [
            [
                "3dcbf47d.feba4c"
            ]
        ]
    },
    {
        "id": "c55770f511c7a3f9",
        "type": "catch",
        "z": "363c53b3.cabc2c",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 120,
        "y": 120,
        "wires": [
            [
                "e9c0e9bddf06e176",
                "62c995623d658834"
            ]
        ]
    },
    {
        "id": "e9c0e9bddf06e176",
        "type": "fs-ops-move",
        "z": "363c53b3.cabc2c",
        "name": "MoveFileToError",
        "sourcePath": "INTERFACE_SAP_TO_OBJ_DIR",
        "sourcePathType": "env",
        "sourceFilename": "file",
        "sourceFilenameType": "msg",
        "destPath": "errordir",
        "destPathType": "msg",
        "destFilename": "file",
        "destFilenameType": "msg",
        "link": false,
        "x": 500,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "793f574213e2c10d",
        "type": "fs-ops-move",
        "z": "363c53b3.cabc2c",
        "name": "MoveFileToArchive",
        "sourcePath": "INTERFACE_SAP_TO_OBJ_DIR",
        "sourcePathType": "env",
        "sourceFilename": "file",
        "sourceFilenameType": "msg",
        "destPath": "archivedir",
        "destPathType": "msg",
        "destFilename": "file",
        "destFilenameType": "msg",
        "link": false,
        "x": 150,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "e041e90d3cbead08",
        "type": "fs-ops-move",
        "z": "363c53b3.cabc2c",
        "name": "MoveFileToError",
        "sourcePath": "INTERFACE_SAP_TO_OBJ_DIR",
        "sourcePathType": "env",
        "sourceFilename": "file",
        "sourceFilenameType": "msg",
        "destPath": "errordir",
        "destPathType": "msg",
        "destFilename": "file",
        "destFilenameType": "msg",
        "link": false,
        "x": 3460,
        "y": 840,
        "wires": [
            [
                "b05d77629232e9d2"
            ]
        ]
    },
    {
        "id": "d3e24d28543f90df",
        "type": "fs-ops-move",
        "z": "363c53b3.cabc2c",
        "name": "MoveFileToError",
        "sourcePath": "INTERFACE_SAP_TO_OBJ_DIR",
        "sourcePathType": "env",
        "sourceFilename": "file",
        "sourceFilenameType": "msg",
        "destPath": "errordir",
        "destPathType": "msg",
        "destFilename": "file",
        "destFilenameType": "msg",
        "link": false,
        "x": 3100,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "f1b9aa9da68d07a3",
        "type": "switch",
        "z": "363c53b3.cabc2c",
        "name": "",
        "property": "payload.ASNQryResult",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2630,
        "y": 460,
        "wires": [
            [
                "9562d9e4320ade8c"
            ],
            [
                "945332083cf5996c"
            ]
        ]
    },
    {
        "id": "62c995623d658834",
        "type": "debug",
        "z": "363c53b3.cabc2c",
        "name": "CatchError",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "error",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 330,
        "y": 200,
        "wires": []
    },
    {
        "id": "ed74d0fbf2df0623",
        "type": "function",
        "z": "363c53b3.cabc2c",
        "name": "CreateASNJason",
        "func": "var objasns = {\n  asns : \"\"\n}\n\n\nvar asns ={\n  \"asn\" : \"\"\n}\n\nvar asn = {\n  \"id\": msg.payload.objInboundorder.id,\n  \"suppliername\": msg.payload.objsupplier.ID,\n  \"carriername\": msg.payload.objcarrier.ID,\n  \"dtsduebefore\": msg.payload.objInboundorder.dtsDueBefore,\n  \"container\": []\n}\n\nfor (var containerIndex in msg.payload.asnPalletData) {\n\n  var objContainer = {\n    \"name\": msg.payload.asnPalletData[containerIndex].LPN,\n    \"packaging\": msg.payload.asnPalletData[containerIndex].packConfig,\n    \"containertype\": msg.payload.asnPalletData[containerIndex].container,\n    \"inventoryitem\": []\n  }\n\n  for (var inventoryIndex in msg.payload.asnPalletData[containerIndex].inventoryItems)\n  {\n\n    var objInvItem = {\n      \"qty\": msg.payload.asnPalletData[containerIndex].inventoryItems[inventoryIndex].qty,\n      \"itemname\": msg.payload.asnPalletData[containerIndex].inventoryItems[inventoryIndex].ItemKey,\n      \"lotid\": msg.payload.asnPalletData[containerIndex].inventoryItems[inventoryIndex].LotID,\n      \"sublotid\": msg.payload.asnPalletData[containerIndex].inventoryItems[inventoryIndex].SubLotID,\n      \"inventorycode5\": msg.payload.asnPalletData[containerIndex].inventoryItems[inventoryIndex].inventoryCode5\n    }\n\n    objContainer.inventoryitem[inventoryIndex] = objInvItem\n\n  }\n\n  asn.container[containerIndex] = objContainer\n\n}\n\nasns.asn = asn\n\nobjasns.asns = asns\n\nmsg.xmlData = objasns\n\n\nreturn msg;\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 880,
        "wires": [
            [
                "dc0ce44a625f76b3",
                "9bb3de9f4ac8db41"
            ]
        ]
    },
    {
        "id": "a0d8cd30.7fdcb",
        "type": "xml",
        "z": "1541bf07.4e6891",
        "name": "XML > Json",
        "property": "payload",
        "attr": "",
        "chr": "",
        "x": 690,
        "y": 60,
        "wires": [
            [
                "4c32a809724da75b"
            ]
        ]
    },
    {
        "id": "9162e671.b71828",
        "type": "switch",
        "z": "1541bf07.4e6891",
        "name": "",
        "property": "file",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "loipro",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 410,
        "y": 60,
        "wires": [
            [
                "2956a632.afd46a"
            ],
            []
        ]
    },
    {
        "id": "2956a632.afd46a",
        "type": "file in",
        "z": "1541bf07.4e6891",
        "name": "",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 540,
        "y": 60,
        "wires": [
            [
                "a0d8cd30.7fdcb"
            ]
        ]
    },
    {
        "id": "e871b4a0.a2e028",
        "type": "subflow:f510047e.e49ad8",
        "z": "1541bf07.4e6891",
        "name": "",
        "env": [],
        "x": 170,
        "y": 60,
        "wires": [
            [
                "9162e671.b71828"
            ]
        ]
    },
    {
        "id": "356db7e9.601de8",
        "type": "debug",
        "z": "1541bf07.4e6891",
        "name": "AfterFilterIDOC",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 180,
        "wires": []
    },
    {
        "id": "4083fb22.c08274",
        "type": "function",
        "z": "1541bf07.4e6891",
        "name": "FilterLoiProObjects",
        "func": "var sapRawPoData = msg.payload.ZLOIPRO03.IDOC[0].E1AFKOL[0]\n\nfunction convertToDate(x){\nvar year = x.substr(0,4)\nvar month = x.substr(4,2)\nvar day = x.substr(6,2)\n\n//var result = new Date()\n//result.setYear(year)\n//result.setMonth(month - 1)\n//result.setDate(day)\n//result.setHours(2)\n//result.setMinutes(1)\n\nreturn year + \"-\" + month + \"-\" + day   \n}\n\nfunction convertToTime(x){\nvar hour = x.substr(0,2)\nvar minute = x.substr(2,2)\nvar second = x.substr(4,2)\n\n//var result = new Date()\n//result.setYear(year)\n//result.setMonth(month - 1)\n//result.setDate(day)\n//result.setHours(2)\n//result.setMinutes(1)\n\nreturn hour + \":\" + minute + \":\" + second   \n}\n\nvar poData = {\n\"SapProductionBatch\" : \"\",\n\"SapProductionQCstatusID\" : \"\",\n\"ProductionOrderID\" : \"\",\n\"OrderType\": \"\",\n\"ProductionLine\" : \"\",\n\"OutputItem\" : \"\",\n\"OutputUom\" : \"\",\n\"QtyToProduce\" : \"\",\n\"DtsPlannedStartDate\": \"\",\n\"DtsPlannedStartTime\": \"\",\n\"DtsPlannedStopDate\": \"\",\n\"DtsPlannedStopTime\": \"\",\n\"AbortOrder\" : false,\n\"NumberOfEmployees\" : 0,\n\"DtsFreezing\": \"\",\n\"Components\": [],\n\"Plant\" :  \"\",\n\"PlantID\" : \"\",\n\"CoProducts\": []\n}\nif(sapRawPoData.E1AFPOL[0].CHARG) {\n    poData.SapProductionBatch = sapRawPoData.E1AFPOL[0].CHARG[0].substring(1)\n    poData.SapProductionQCstatusID = sapRawPoData.E1AFPOL[0].CHARG[0].substring(0,1)\n}\nif(sapRawPoData.AUFNR) {poData.ProductionOrderID = sapRawPoData.AUFNR[0]}\nif(sapRawPoData.AUART) {poData.OrderType = sapRawPoData.AUART[0]}\ntry{\n    poData.ProductionLine = sapRawPoData.E1AFFLL[0].E1AFVOL[0].ARBID[0]\n}catch(err){}\nif (sapRawPoData.MATNR) {poData.OutputItem = sapRawPoData.MATNR[0]}\nif (sapRawPoData.BMEINS) {poData.OutputUom = sapRawPoData.BMEINS[0]}\nif (sapRawPoData.BMENGE) {poData.QtyToProduce = parseFloat(sapRawPoData.BMENGE[0])}\nif (sapRawPoData.GSTRS) {poData.DtsPlannedStartDate = convertToDate(sapRawPoData.GSTRS[0])}\nif (sapRawPoData.GSUZS) {poData.DtsPlannedStartTime = convertToTime(sapRawPoData.GSUZS[0])}\nif (sapRawPoData.GLTRS) {poData.DtsPlannedStopDate = convertToDate(sapRawPoData.GLTRS[0])}\nif (sapRawPoData.GLUZS) {poData.DtsPlannedStopTime = convertToTime(sapRawPoData.GLUZS[0])}\nif (sapRawPoData.WERKS)\n{\n    if (sapRawPoData.WERKS[0] === 'P270'){\n        poData.PlantID = 'P270'\n        poData.Plant = 'LUBLIN'\n    }\n    else if (sapRawPoData.WERKS[0] === 'P271'){\n        poData.PlantID = 'P271'\n        poData.Plant = 'MOTYCZ'\n    }\n    else\n    {\n         poData.PlantID = sapRawPoData.WERKS[0]\n        poData.Plant = sapRawPoData.WERKS[0]\n    }\n}\n\npoData.AbortOrder = false\n\nif (sapRawPoData.E1JSTKL)\n{\n       for (var indexStatusArray in sapRawPoData.E1JSTKL)\n       {\n           if (sapRawPoData.E1JSTKL[indexStatusArray].STAT){\n               if('I0045' == sapRawPoData.E1JSTKL[indexStatusArray].STAT)\n               {\n                 poData.AbortOrder = true\n                 break;\n               }\n               \n           }\n       }\n}\n\n\npoData.NumberOfEmployees = parseFloat(0)\n\n\nif (sapRawPoData.ZE1INGRPRODDATE)\n{\n    for (var indexCustomFields in sapRawPoData.ZE1INGRPRODDATE)\n    {\n        var customFields = sapRawPoData.ZE1INGRPRODDATE[indexCustomFields]\n        if (customFields.INGRPRODDATE_ID)\n        {\n            if ('Z_OLD_INGR_PRODDATE' == customFields.INGRPRODDATE_ID[0])\n            {\n                if (customFields.INGRPRODDATE_VALUE)\n                {\n                    poData.DtsFreezing =  convertToDate(customFields.INGRPRODDATE_VALUE[0])\n                }\n            }\n        }\n    \n    }\n}\n\n\n\nconst itemMap = new Map()\nvar arrItemKeys = []\nvar itemkeyCounter = 0\n\nvar arrRaWMatCompCounter = 0\nvar arrRaWMatComponents = []\n\nconst machineMapFromLoipro = new Map()\n\nvar RawComponentsList = sapRawPoData.E1AFFLL[0].E1AFVOL\nvar componentIndex = 0\nif (RawComponentsList)\n{\n      for (var indexRawComp in RawComponentsList) {\n       \n          var ReservationList  = RawComponentsList[indexRawComp]\n\n          if (ReservationList.ARBID)\n          {\n              if (!(machineMapFromLoipro.has(ReservationList.ARBID[0]))) {\n                  machineMapFromLoipro.set(ReservationList.ARBID[0], ReservationList.ARBID[0])\n              }\n          }\n\n          if (ReservationList.E1RESBL)\n          {\n              \n              for (var indexReservation in ReservationList.E1RESBL)\n              {\n                  var input =  {\n                      \"InputItem\": \"\",\n                      \"InputQty\": 0,\n                      \"ScrapPrecentage\":0,\n                      \"BackFlush\" : false,\n                      \"BulkItem\": false,\n                      \"LotID\": \"\",\n                      \"QCStatusID\": \"\",\n                      \"StockOwner\": \"\",\n                      \"ItemGroup\": \"\",\n                      \"UomKey\":\"\",\n                      \"ItemCat\": \"\",\n                      \"Sequence\": 999\n                 }\n                 if (ReservationList.E1RESBL[indexReservation].SHKZG)\n                 {\n                     if (ReservationList.E1RESBL[indexReservation].SHKZG[0] === 'H')\n                     {\n                        if (ReservationList.E1RESBL[indexReservation].MATNR)\n                         {\n                        input.InputItem = ReservationList.E1RESBL[indexReservation].MATNR[0]\n                        }\n                         if (ReservationList.E1RESBL[indexReservation].BDMNG)\n                        {\n                         input.InputQty =parseFloat(ReservationList.E1RESBL[indexReservation].BDMNG[0])\n                        }\n                        \n                        if (ReservationList.E1RESBL[indexReservation].MEINS)\n                        {\n                         input.UomKey = ReservationList.E1RESBL[indexReservation].MEINS[0]\n                        }\n\n                         if (ReservationList.E1RESBL[indexReservation].SCHGT) {\n                             if ('X' === ReservationList.E1RESBL[indexReservation].SCHGT[0])\n                             {\n                                 input.BulkItem = true\n                                 input.BackFlush = true\n                             }\n                         }\n                        \n                        // indien input qty  = 0  => niet toevoegen\n                        if (input.InputQty != 0)\n                        {\n                            \n                      \n                        //input.ScrapPrecentage = \n                        if (ReservationList.E1RESBL[indexReservation].ZE1RESBL)\n                        {\n                            if (ReservationList.E1RESBL[indexReservation].ZE1RESBL[0].RGEKZ)\n                             {\n                                if ('X' == ReservationList.E1RESBL[indexReservation].ZE1RESBL[0].RGEKZ[0])  \n                                {\n                                input.BackFlush = true\n                                }\n                         }\n                     \n                         }\n                        if (ReservationList.E1RESBL[indexReservation].CHARG)\n                        {\n                        input.QCStatusID =ReservationList.E1RESBL[indexReservation].CHARG[0]\n                        }\n                        if (ReservationList.E1RESBL[indexReservation].WERKS)\n                        {\n                        input.StockOwner =ReservationList.E1RESBL[indexReservation].WERKS[0]\n                        }\n                        \n                        if (ReservationList.E1RESBL[indexReservation].ZE1RESBL)\n                        {\n                     \n                             if(ReservationList.E1RESBL[indexReservation].ZE1RESBL[0].POTX1)\n                             {\n                                input.ScrapPrecentage =   ReservationList.E1RESBL[indexReservation].ZE1RESBL[0].POTX1[0]\n                              }\n                     \n            \n                        }\n                        \n                        // 1000 is grondstof --- 3000 is verpakking\n                        if (ReservationList.E1RESBL[indexReservation].LGORT)\n                        {\n                               input.ItemCat =ReservationList.E1RESBL[indexReservation].LGORT[0]\n                     \n                               poData.Components[componentIndex] = input\n                 \n                               componentIndex = componentIndex + 1\n\n                            if (input.ItemCat === '1000') {\n                                arrRaWMatComponents[arrRaWMatCompCounter] = input\n                                arrRaWMatCompCounter = arrRaWMatCompCounter + 1\n                            }\n                               \n                                var itemKey = input.InputItem\n                                if (!(itemMap.has(itemKey))){\n                                        itemMap.set(itemKey, itemKey)\n                        \n                                        arrItemKeys[itemkeyCounter] = itemKey\n                        \n                                        itemkeyCounter = itemkeyCounter + 1\n                                 }\n                               \n                               \n                               \n                               \n                        }\n                        }\n                        \n                    }\n                 }\n              }\n          }\n          \n          \n\n          \n          \n          if (ReservationList.STEUS)\n          {\n              if ('ZPP4' == ReservationList.STEUS[0])\n              {\n                \n                if (ReservationList.USR04)\n                {\n                 poData.NumberOfEmployees = poData.NumberOfEmployees+ parseFloat(ReservationList.USR04)\n                }\n                    if (ReservationList.USR05)\n                {\n                 poData.NumberOfEmployees = poData.NumberOfEmployees+ parseFloat(ReservationList.USR05)\n                }\n              }\n              \n          }\n          \n          \n          \n      }\n    \n    \n    \n    \n}\n\ntry {\n    //sorteren input grondstof volgens qty -- grootste hoeveelheden eerst\n    var sortedArray = arrRaWMatComponents.sort((a, b) => (a.InputQty > b.InputQty) ? -1 : 1)\n    for (var sortedIndex in sortedArray) {\n        var tempObjSortedComp = sortedArray[sortedIndex]\n        for (var tempCompIndex in poData.Components) {\n            var tempObjUNSortedComp = poData.Components[tempCompIndex]\n            if (tempObjSortedComp.InputItem === tempObjUNSortedComp.InputItem) {\n                var seq = parseInt(sortedIndex) + 1\n                tempObjUNSortedComp.Sequence = seq\n            }\n\n\n        }\n    }\n} catch (error) {\n    \n};\n\n\nmsg.payload.itemMap = itemMap\nmsg.payload.arrItemKeys = arrItemKeys\nmsg.payload.numberOfItemKeys = arrItemKeys.length\nmsg.payload.itemkeyCounter = 0\nmsg.payload.machineMapFromLoipro = machineMapFromLoipro\n\nvar primaryOutputItemFound = false\n\n//prepare co-products\nif (sapRawPoData.E1AFPOL.length > 1)\n{\nvar coproductCounter = 0\n    for (let i = 1; i < sapRawPoData.E1AFPOL.length; i++) {\n        var coProductData = sapRawPoData.E1AFPOL[i]\n    \n        var varCoProduct = {\n             \"ItemKey\": \"\",\n             \"Qty\": 0,\n             \"SapBatchID\": \"\",\n             \"UomKey\":\"\"\n        }\n\n      \n        \n        varCoProduct.ItemKey = coProductData.MATNR[0]\n        varCoProduct.SapBatchID = coProductData.CHARG[0].substring(1)\n        varCoProduct.Qty = parseFloat(coProductData.PSMNG[0])\n        varCoProduct.UomKey  = coProductData.MEINS[0]\n        \n        poData.CoProducts[coproductCounter] = varCoProduct\n        coproductCounter = coproductCounter + 1\n\n        if (varCoProduct.ItemKey === poData.OutputItem)\n        {\n            primaryOutputItemFound = true\n        }\n    }\n}\n\nif (primaryOutputItemFound === false)\n{\n    const varCoProduct = {\n        \"ItemKey\": \"\",\n        \"Qty\": 0,\n        \"SapBatchID\": \"\",\n        \"UomKey\": \"\"\n    }\n\n    varCoProduct.ItemKey = poData.OutputItem\n    varCoProduct.SapBatchID = poData.SapProductionBatch\n    varCoProduct.Qty = poData.QtyToProduce\n    varCoProduct.UomKey = poData.OutputUom\n\n    poData.CoProducts[coproductCounter] = varCoProduct\n}\n\nvar nrOfCoProducts = 0\nif (poData.CoProducts)\n{\n    nrOfCoProducts = poData.CoProducts.length\n}\nmsg.payload.nrOfCoProducts = nrOfCoProducts\nmsg.payload.poData =poData\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 160,
        "wires": [
            [
                "356db7e9.601de8",
                "886af14.47db21"
            ]
        ]
    },
    {
        "id": "1728339f.9a83fc",
        "type": "debug",
        "z": "1541bf07.4e6891",
        "name": "AfterCreate",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2630,
        "y": 380,
        "wires": []
    },
    {
        "id": "886af14.47db21",
        "type": "switch",
        "z": "1541bf07.4e6891",
        "name": "Create or Delete",
        "property": "payload.poData.AbortOrder",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 140,
        "y": 300,
        "wires": [
            [
                "49d6f174.742bc"
            ],
            [
                "b9dc4fa0.07bca"
            ]
        ]
    },
    {
        "id": "b9dc4fa0.07bca",
        "type": "subflow:4cb0a8d8.353488",
        "z": "1541bf07.4e6891",
        "name": "",
        "env": [],
        "x": 300,
        "y": 520,
        "wires": [
            [
                "bbf28894.c57678",
                "6140250958440b7e"
            ]
        ]
    },
    {
        "id": "bfb0aaf2.edf918",
        "type": "function",
        "z": "1541bf07.4e6891",
        "name": "CreatePOjason",
        "func": "\nfunction convertKgToPcs(sapUom, objItem, quantity){\n \n  if (objItem)\n  {\n    if (objItem.numericParameters)\n    {\n      if(objItem.numericParameters[3].value)\n      {\n        if (objItem.numericParameters[3].value > 0)\n        {\n          if (sapUom === 'KGM')\n          {\n            sapUom = 'KG'\n                           \n            if (objItem.numericParameters[3].value && objItem.uom.id === 'BOX')\n            {\n              if (objItem.uom.id != sapUom)\n              {\n                                   \n                return parseInt(quantity / objItem.numericParameters[3].value)\n\n              }\n              else\n              {\n                 return quantity\n              }\n                      \n            }\n            else \n            {\n                return quantity\n            }\n          }\n          else {\n            return quantity\n          }\n        }\n        else \n        {\n          return quantity\n        }\n    }\n    else \n    {\n      return quantity\n    }\n  }\n  else \n  {\n  return quantity\n  }\n}\nelse\n{\n    return quantity\n}\n}\n   \n\n\n\nfunction getDateTime(strDate ,strTime)\n{\n    if ((strDate) && (strDate))\n    {\n            return strDate + \"T\" + strTime + \"Z\"\n    }\n    else\n    {\n        return strDate + \"T00:00Z\"\n    }\n}\n\nfunction getDateTime2(strDate) {\n  if (strDate) {\n  \n    return strDate + \"T00:00Z\"\n  }\n\n}\n\n\n\n\n\nvar productionOrder = {\n\n  \"id\": \"\",\n//  \"description\": \"\",\n  \"dtsDueBefore\": \"\",\n \"dtsEarliestStart\":\"\",\n  \"itemKey\": \"\",\n  \"operations\": [],\n  \"qtyPlanned\": 0,\n  \"userFields\":{\n  \"text\": [],\n //   \"date\": [],\n  \"numeric\": []\n  }\n}\n\nproductionOrder.id = msg.payload.poData.ProductionOrderID\nproductionOrder.dtsDueBefore = getDateTime(msg.payload.poData.DtsPlannedStopDate, msg.payload.poData.DtsPlannedStopTime),\nproductionOrder.dtsEarliestStart = getDateTime(msg.payload.poData.DtsPlannedStartDate, msg.payload.poData.DtsPlannedStartTime)\n\nvar dummyPreprocessInput \nvar minSequence = 999\nvar maxSequence = 0\nvar firstProductionOperation\nvar lastProductionOperation\nvar arrPlanningOperation = []\nvar operationCounter = 0\nconst machines = Array.from(msg.payload.machineMapFromLoipro.values());\n\nvar boolFreshInput = false\nfor (var machineCounter in machines)\n{\n  var machineSapID = machines[machineCounter]\n  if (msg.payload.machineOperationMapFromOBJT.has(machineSapID))\n  {\n    var objObjectiveMachine = msg.payload.machineOperationMapFromOBJT.get(machineSapID)\n    var machineSequence = (objObjectiveMachine.Sequence == null) ? \"0\" : objObjectiveMachine.Sequence;\n    var prodOp = {\n      \"name\": objObjectiveMachine.Operation,\n      \"sequence\": parseInt(machineSequence)\n    }\n\n    var planningOperation= {\n      \"dtsPlannedStart\": productionOrder.dtsDueBefore,\n      \"name\": objObjectiveMachine.Operation,\n      \"productionOrderKey\": productionOrder.id,\n      \"resource\": {\n        \"key\": objObjectiveMachine.MachineName,\n        \"type\": \"MACHINE\"\n      },\n      \"sequence\": prodOp.sequence\n    }\n\n    if (objObjectiveMachine.MachineName === 'FreshLine1')\n    {\n      boolFreshInput = true\n      dummyPreprocessInput = \"Input_FreshLine1\"\n    }\n    else if (objObjectiveMachine.MachineName === 'FreshLine2')\n    {\n      boolFreshInput = true\n      dummyPreprocessInput = \"Input_FreshLine2\"\n    }\n  \n\n\n    if (prodOp.sequence < minSequence){\n      minSequence = prodOp.sequence\n      firstProductionOperation = prodOp\n    }\n\n    if (prodOp.sequence > maxSequence) {\n      maxSequence = prodOp.sequence\n      lastProductionOperation = prodOp\n    }\n\n    productionOrder.operations[operationCounter] = prodOp\n    arrPlanningOperation[operationCounter] = planningOperation\n    operationCounter = operationCounter + 1\n\n  }\n}\n\nif (firstProductionOperation.sequence > 0 && firstProductionOperation.sequence < 3)\n{\n  if (boolFreshInput === true)\n  {\n  var prodOp2 = {\n    \"name\": \"Preprocess\",\n    \"sequence\": 0\n  }\n\n\n  var planningOperation2 = {\n    \"dtsPlannedStart\": productionOrder.dtsDueBefore,\n    \"name\": \"Preprocess\",\n    \"productionOrderKey\": productionOrder.id,\n    \"resource\": {\n      \"key\": dummyPreprocessInput,\n      \"type\": \"MACHINE\"\n    },\n    \"sequence\": prodOp2.sequence\n  }\n  arrPlanningOperation[operationCounter] = planningOperation2\n  productionOrder.operations[operationCounter] = prodOp2\n  firstProductionOperation = prodOp2\n\n  }\n\n}\n\nmsg.payload.firstProductionOperation = firstProductionOperation\nmsg.payload.lastProductionOperation = lastProductionOperation\nmsg.payload.arrPlanningOperation = arrPlanningOperation\n\nvar inputAssigned = false\nvar counterInputsFirstOp = 0\nvar counterInputsLastOp = 0\n\nfor (var indexComp in msg.payload.poData.Components) {\n\n  var comp = msg.payload.poData.Components[indexComp]\n  var operationInput = {\n    \"fixed\": false,\n    \"itemKey\": \"string\",\n    \"quantity\": 0\n\n  }\n\n\n  operationInput.itemKey = comp.InputItem\n\n  var objItem = msg.payload.itemMap.get(operationInput.itemKey)\n\n  operationInput.quantity = convertKgToPcs(comp.UomKey, objItem, comp.InputQty)\n  if (msg.payload.poData.PlantID) { operationInput.inventoryCode5 = msg.payload.poData.PlantID }\n\n  inputAssigned = false\n  if (productionOrder.operations.length > 1)\n  {\n  if (lastProductionOperation)\n  {\n    if (!(lastProductionOperation.inputs)) { lastProductionOperation.inputs = [] }\n    if (comp.ItemCat === '3000') {\n      lastProductionOperation.inputs[counterInputsLastOp] = operationInput\n      counterInputsLastOp = counterInputsLastOp + 1\n      inputAssigned = true\n    }\n  }\n\n  if (inputAssigned === false)\n  {\n    if (firstProductionOperation) {\n      if (!(firstProductionOperation.inputs)) { firstProductionOperation.inputs = [] }\n      firstProductionOperation.inputs[counterInputsFirstOp] = operationInput\n      counterInputsFirstOp = counterInputsFirstOp + 1\n\n    }\n  }\n  }\n  else\n  {\n    if (firstProductionOperation) {\n      if (!(firstProductionOperation.inputs)) { firstProductionOperation.inputs = [] }\n      firstProductionOperation.inputs[counterInputsFirstOp] = operationInput\n      counterInputsFirstOp = counterInputsFirstOp + 1\n\n    }\n  }\n}\n\n\n\n\n\n// make phantom item\nmsg.payload.phantomItem\nif (msg.payload.poData.CoProducts)\n{\n  \n  if (msg.payload.poData.CoProducts.length > 0)\n  {\n  var factor = parseFloat((100 / (msg.payload.poData.CoProducts.length)).toFixed(2))\n  var rest = 100 - ((msg.payload.poData.CoProducts.length-1)* factor)\n\n  \n  var phantomItem = {\n   // \"baseUomKey\": msg.payload.po_outputitem.uom.id,\n    \"baseUomKey\": \"KG\",\n  // \"category\": msg.payload.po_outputitem.category,\n    \"category\": \"Fresh_Phantom\",\n    \"description\": msg.payload.po_outputitem.description,\n    \"id\": \"PH_\" + msg.payload.po_outputitem.name,\n    \"items\": [],\n    \"type\": \"VARIANT\"    \n  }\n  \n\n\n    for (let i = 0; i < msg.payload.poData.CoProducts.length; i++) {\n\n      var coProd = msg.payload.poData.CoProducts[i]\n      var localFactor \n      if (i === (msg.payload.poData.CoProducts.length -1)){\n        localFactor = rest\n      }\n      else\n      {\n        localFactor = factor\n      }\n\n    \n      var phItem ={\n        \"factor\": localFactor,\n        \"inventoryCode5\": msg.payload.poData.PlantID,\n       \"itemKey\": coProd.ItemKey,\n        \"units\": 1\n     }\n      \n      phantomItem.items[i] = phItem        \n } \n    \n  msg.payload.phantomItem = phantomItem\n  }\n}\n \n\n\nif (phantomItem)\n{\n  productionOrder.itemKey = phantomItem.id\n  if (msg.payload.poData.OutputUom === 'CT')\n  {\n    try {\n      productionOrder.qtyPlanned = msg.payload.poData.QtyToProduce * msg.payload.po_outputitem.numericParameters[3].value\n    } catch (error) {\n      productionOrder.qtyPlanned = msg.payload.poData.QtyToProduce\n    };\n    \n  }\n  else\n  {\n    productionOrder.qtyPlanned = convertKgToPcs(msg.payload.poData.OutputUom, msg.payload.po_outputitem, msg.payload.poData.QtyToProduce)\n  }\n  \n}\nelse\n{\n  productionOrder.itemKey = msg.payload.poData.OutputItem\n  productionOrder.qtyPlanned = convertKgToPcs(msg.payload.poData.OutputUom, msg.payload.po_outputitem, msg.payload.poData.QtyToProduce)\n}\n\n\nproductionOrder.InventoryCode5 = msg.payload.poData.PlantID\n\n\n\n\n//productionOrder.qtyPlanned = convertKgToPcs(msg.payload.poData.OutputUom,msg.payload.po_outputitem, msg.payload.poData.QtyToProduce)\nmsg.payload.varConvertedQtyPlanned = productionOrder.qtyPlanned\nvar counterTextParam = 0\nif (msg.payload.poData.SapProductionBatch) {\n  var varSapProductionBatch = {\n    \"key\": \"string\",\n    \"value\": \"string\"\n  }\n  varSapProductionBatch.key = \"usrTxt1\"\n  varSapProductionBatch.value = msg.payload.poData.SapProductionBatch\n  productionOrder.userFields.text[counterTextParam] = varSapProductionBatch\n  counterTextParam = counterTextParam + 1\n}\n\nif (msg.payload.poData.Plant) {\n  var varPlant = {\n    \"key\": \"string\",\n    \"value\": \"string\"\n  }\n  varPlant.key = \"usrTxt3\"\n  varPlant.value = msg.payload.poData.Plant\n  productionOrder.userFields.text[counterTextParam] = varPlant\n  counterTextParam = counterTextParam + 1\n}\n\nvar numericCounter = 0\n\nif (msg.payload.poData.NumberOfEmployees)\n{\n   var varNumberOfEmployees = {\n     \"key\": \"string\",\n     \"value\": 0\n   }\n  varNumberOfEmployees.key = \"usrNum1\"\n  varNumberOfEmployees.value = msg.payload.poData.NumberOfEmployees\n  productionOrder.userFields.numeric[numericCounter] = varNumberOfEmployees\n  numericCounter = numericCounter + 1\n}\n\n\n\nmsg.payload.productionOrder = productionOrder\nmsg.payload.planningCounter = 0\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 240,
        "wires": [
            [
                "37f1a0ddbeaa04d1"
            ]
        ]
    },
    {
        "id": "fc790cda.b4257",
        "type": "subflow:c32ccc5d.5d3cc",
        "z": "1541bf07.4e6891",
        "name": "",
        "env": [],
        "x": 1720,
        "y": 320,
        "wires": [
            [
                "93a00fc39f627937"
            ]
        ]
    },
    {
        "id": "bbf28894.c57678",
        "type": "debug",
        "z": "1541bf07.4e6891",
        "name": "AfterDelete",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 520,
        "wires": []
    },
    {
        "id": "f5d3d09c.6f7fc",
        "type": "debug",
        "z": "1541bf07.4e6891",
        "name": "CreateJasonObjects",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1360,
        "y": 160,
        "wires": []
    },
    {
        "id": "49d6f174.742bc",
        "type": "subflow:3226c621.b984ca",
        "z": "1541bf07.4e6891",
        "name": "",
        "env": [],
        "x": 420,
        "y": 280,
        "wires": [
            [
                "7acdc0e1fa113a76"
            ]
        ]
    },
    {
        "id": "7e9182e914e3fd9d",
        "type": "subflow:f8154ed1dd94890b",
        "z": "1541bf07.4e6891",
        "name": "",
        "env": [],
        "x": 2200,
        "y": 260,
        "wires": [
            [
                "77a6a6af850763d0"
            ]
        ]
    },
    {
        "id": "93a00fc39f627937",
        "type": "switch",
        "z": "1541bf07.4e6891",
        "name": "PlanOrNot",
        "property": "payload.arrPlanningOperation.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1930,
        "y": 320,
        "wires": [
            [
                "7e9182e914e3fd9d"
            ],
            [
                "77a6a6af850763d0"
            ]
        ]
    },
    {
        "id": "7acdc0e1fa113a76",
        "type": "switch",
        "z": "1541bf07.4e6891",
        "name": "",
        "property": "payload.po_outputitem",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 650,
        "y": 300,
        "wires": [
            [
                "129de75ea9bb0f53"
            ],
            [
                "5a36c569adf810ac"
            ]
        ]
    },
    {
        "id": "52d6fd5495973653",
        "type": "debug",
        "z": "1541bf07.4e6891",
        "name": "No output item found",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 440,
        "wires": []
    },
    {
        "id": "129de75ea9bb0f53",
        "type": "subflow:9448532d880def76",
        "z": "1541bf07.4e6891",
        "name": "",
        "env": [],
        "x": 880,
        "y": 200,
        "wires": [
            [
                "bfb0aaf2.edf918",
                "999379cc703e605f"
            ]
        ]
    },
    {
        "id": "a4eed7e6f2cb55ef",
        "type": "switch",
        "z": "1541bf07.4e6891",
        "name": "Create Phantom",
        "property": "msg.payload.phantomItem",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1360,
        "y": 320,
        "wires": [
            [
                "fc790cda.b4257"
            ],
            [
                "4298a4786ba732b5"
            ]
        ]
    },
    {
        "id": "4298a4786ba732b5",
        "type": "subflow:51da8aadacf633ba",
        "z": "1541bf07.4e6891",
        "name": "",
        "env": [],
        "x": 1580,
        "y": 500,
        "wires": [
            [
                "fc790cda.b4257"
            ]
        ]
    },
    {
        "id": "abb974422dee0e8f",
        "type": "subflow:1f5d8b704aa78a4b",
        "z": "1541bf07.4e6891",
        "name": "",
        "env": [],
        "x": 1050,
        "y": 60,
        "wires": [
            [
                "65100a0c81d5cbb8"
            ]
        ]
    },
    {
        "id": "65100a0c81d5cbb8",
        "type": "subflow:a134d3847bdd336b",
        "z": "1541bf07.4e6891",
        "name": "",
        "env": [],
        "x": 1390,
        "y": 60,
        "wires": [
            [
                "4083fb22.c08274",
                "79dc60220d70acd9"
            ]
        ]
    },
    {
        "id": "4c32a809724da75b",
        "type": "function",
        "z": "1541bf07.4e6891",
        "name": "init",
        "func": "msg.payload.machineOperationMapFromOBJT = new Map()\nmsg.payload.machineWIPINMapFromOBJT = new Map()\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 60,
        "wires": [
            [
                "abb974422dee0e8f"
            ]
        ]
    },
    {
        "id": "37f1a0ddbeaa04d1",
        "type": "function",
        "z": "1541bf07.4e6891",
        "name": "wipInPlanning",
        "func": "\n\nif (msg.payload.machineWIPINMapFromOBJT) {\n    if (msg.payload.productionOrder) {\n        if (msg.payload.productionOrder.operations) {\n\n            for (var operationIndex in msg.payload.productionOrder.operations) {\n                var prodOperation = msg.payload.productionOrder.operations[operationIndex]\n                if (prodOperation.inputs) {\n                    if (prodOperation.inputs.length > 0) {\n\n                        var planningObject\n\n                        for (var planObjIndex in msg.payload.arrPlanningOperation) {\n                            planningObject = msg.payload.arrPlanningOperation[planObjIndex]\n                            if (planningObject.name === prodOperation.name) {\n                                break;\n                            }\n                        }\n\n                        var arrWipIns = msg.payload.machineWIPINMapFromOBJT.get(planningObject.resource.key)\n                        if (arrWipIns) {\n                            var assignedLociDItem = new Map()\n\n                            for (var inputIndex in prodOperation.inputs) {\n                                var objInput = prodOperation.inputs[inputIndex]\n                                var comp\n\n                                for (var indexComp in msg.payload.poData.Components) {\n\n                                    comp = msg.payload.poData.Components[indexComp]\n                                    if (comp.InputItem === objInput.itemKey) {\n                                        break;\n                                    }\n                                }\n\n                                for (var indexWip in arrWipIns) {\n                                    var objWipIn = arrWipIns[indexWip]\n                                    if (comp.ItemCat === objWipIn.InputCategory && comp.BulkItem === false) {\n                                        if (comp.UomKey === 'KGM' && objWipIn.ConsumptionUom === 'kg' && objWipIn.InputSequence === comp.Sequence) {\n\n                                            if (comp.ItemCat === '1000') {\n                                                if (!assignedLociDItem.has(objWipIn.ID)) {\n                                                    assignedLociDItem.set(objWipIn.ID, comp)\n                                                    objInput.wipInLocationId = objWipIn.ID\n                                                    break\n                                                }\n\n                                            }\n                                            else {\n                                                objInput.wipInLocationId = objWipIn.ID\n                                                break\n                                            }\n\n\n                                        }\n                                        if (comp.UomKey === 'KGM' && objWipIn.ConsumptionUom === 'kg' && comp.ItemCat === '3000' && objWipIn.InputCategory === '3000')\n                                        {\n\n           \n                                                objInput.wipInLocationId = objWipIn.ID\n                                                break\n                                            \n                                        }\n                                        if (comp.UomKey != 'KGM' && objWipIn.ConsumptionUom != 'kg') {\n\n                                            if (comp.ItemCat === '1000') {\n                                                if (!assignedLociDItem.has(objWipIn.ID)) {\n                                                    assignedLociDItem.set(objWipIn.ID, comp)\n                                                    objInput.wipInLocationId = objWipIn.ID\n                                                    break\n                                                }\n\n                                            }\n                                            else {\n                                                objInput.wipInLocationId = objWipIn.ID\n                                                break\n                                            }\n\n\n                                        }\n\n\n\n                                    }\n                                }\n\n\n\n\n                            }\n\n\n\n\n\n\n\n\n                        }\n                    }\n                }\n            }\n        }\n\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 320,
        "wires": [
            [
                "a4eed7e6f2cb55ef",
                "f5d3d09c.6f7fc"
            ]
        ]
    },
    {
        "id": "79dc60220d70acd9",
        "type": "debug",
        "z": "1541bf07.4e6891",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 180,
        "wires": []
    },
    {
        "id": "999379cc703e605f",
        "type": "debug",
        "z": "1541bf07.4e6891",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 320,
        "wires": []
    },
    {
        "id": "bfe4a173b1a4e80c",
        "type": "fs-ops-move",
        "z": "1541bf07.4e6891",
        "name": "MoveFileToError",
        "sourcePath": "INTERFACE_SAP_TO_OBJ_DIR",
        "sourcePathType": "env",
        "sourceFilename": "file",
        "sourceFilenameType": "msg",
        "destPath": "errordir",
        "destPathType": "msg",
        "destFilename": "file",
        "destFilenameType": "msg",
        "link": false,
        "x": 240,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "a10a209b8629c47a",
        "type": "catch",
        "z": "1541bf07.4e6891",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 80,
        "y": 100,
        "wires": [
            [
                "bfe4a173b1a4e80c"
            ]
        ]
    },
    {
        "id": "6140250958440b7e",
        "type": "fs-ops-move",
        "z": "1541bf07.4e6891",
        "name": "MoveFileToArchive",
        "sourcePath": "INTERFACE_SAP_TO_OBJ_DIR",
        "sourcePathType": "env",
        "sourceFilename": "file",
        "sourceFilenameType": "msg",
        "destPath": "archivedir",
        "destPathType": "msg",
        "destFilename": "file",
        "destFilenameType": "msg",
        "link": false,
        "x": 570,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "77a6a6af850763d0",
        "type": "fs-ops-move",
        "z": "1541bf07.4e6891",
        "name": "MoveFileToArchive",
        "sourcePath": "INTERFACE_SAP_TO_OBJ_DIR",
        "sourcePathType": "env",
        "sourceFilename": "file",
        "sourceFilenameType": "msg",
        "destPath": "archivedir",
        "destPathType": "msg",
        "destFilename": "file",
        "destFilenameType": "msg",
        "link": false,
        "x": 2430,
        "y": 380,
        "wires": [
            [
                "1728339f.9a83fc"
            ]
        ]
    },
    {
        "id": "5a36c569adf810ac",
        "type": "fs-ops-move",
        "z": "1541bf07.4e6891",
        "name": "MoveFileToError",
        "sourcePath": "INTERFACE_SAP_TO_OBJ_DIR",
        "sourcePathType": "env",
        "sourceFilename": "file",
        "sourceFilenameType": "msg",
        "destPath": "errordir",
        "destPathType": "msg",
        "destFilename": "file",
        "destFilenameType": "msg",
        "link": false,
        "x": 780,
        "y": 400,
        "wires": [
            [
                "52d6fd5495973653"
            ]
        ]
    },
    {
        "id": "8dab1cf2.8c679",
        "type": "subflow:f510047e.e49ad8",
        "z": "b9d45f72.fdae2",
        "name": "",
        "env": [],
        "x": 210,
        "y": 60,
        "wires": [
            [
                "deff4aa1.5b8738"
            ]
        ]
    },
    {
        "id": "deff4aa1.5b8738",
        "type": "switch",
        "z": "b9d45f72.fdae2",
        "name": "",
        "property": "file",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "QCAdjust",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 530,
        "y": 60,
        "wires": [
            [
                "c4112f2e.c6909"
            ],
            []
        ]
    },
    {
        "id": "c4112f2e.c6909",
        "type": "file in",
        "z": "b9d45f72.fdae2",
        "name": "",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 800,
        "y": 60,
        "wires": [
            [
                "6c8aaced.5cfd94"
            ]
        ]
    },
    {
        "id": "6c8aaced.5cfd94",
        "type": "xml",
        "z": "b9d45f72.fdae2",
        "name": "XML > Json",
        "property": "payload",
        "attr": "",
        "chr": "",
        "x": 1030,
        "y": 60,
        "wires": [
            [
                "21e5d278.3e656e"
            ]
        ]
    },
    {
        "id": "5feab3ef.82de3c",
        "type": "debug",
        "z": "b9d45f72.fdae2",
        "name": "QCmessage",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1470,
        "y": 180,
        "wires": []
    },
    {
        "id": "f63012c7.1917",
        "type": "function",
        "z": "b9d45f72.fdae2",
        "name": "AdjustLotQCtoJason",
        "func": "msg.payload.arrAdjustQCLotRequest= []\n\nfor (var indexObjtLot in msg.payload.arrObjectiveLot)\n{\n  var AdjustQCLotRequest = {\n    \"itemKey\": \"string\",\n    \"lotId\": \"string\",\n    \"sublotId\": \"string\",\n    \"toQualityControlStatusKey\": \"BLOCKED\"\n  }\n\n  AdjustQCLotRequest.itemKey = msg.payload.itemKey\n \n    AdjustQCLotRequest.lotId = msg.payload.arrObjectiveLot[indexObjtLot].LOTID\n\n  AdjustQCLotRequest.sublotId = msg.payload.sublotId\n\n\n  if (msg.payload.toSAPQC) {\n\n\n    if (msg.payload.qcStatusMap.has(msg.payload.toSAPQC)) {\n\n\n      AdjustQCLotRequest.toQualityControlStatusKey = msg.payload.qcStatusMap.get(msg.payload.toSAPQC)\n\n    }\n  }\n\n  msg.payload.arrAdjustQCLotRequest[indexObjtLot] = AdjustQCLotRequest\n\n}\n\nmsg.payload.adjustLotReqCounter = 0\nmsg.payload.adjustLotReqArrLength = msg.payload.arrAdjustQCLotRequest.length\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 220,
        "wires": [
            [
                "a8daf3db.11b4e"
            ]
        ]
    },
    {
        "id": "21e5d278.3e656e",
        "type": "function",
        "z": "b9d45f72.fdae2",
        "name": "filterIdocQCdata",
        "func": "\nvar sapData = msg.payload[\"ns1:MT_QCAdjust\"].QCAdjust[0]\n\nif (sapData.material) { msg.payload.itemKey = sapData.material[0] }\nif (sapData.receiving_batch) { msg.payload.sublotId = sapData.receiving_batch[0].substr(1, sapData.receiving_batch[0].length) }\nif (sapData.receiving_batch) { msg.payload.toSAPQC = sapData.receiving_batch[0].substr(0, 1) }\n\n\nconst qcStatusMap = new Map()\nmsg.payload.qcStatusMap = qcStatusMap\nmsg.payload.arrObjectiveLot = []\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 160,
        "wires": [
            [
                "116bacd03a4e9405"
            ]
        ]
    },
    {
        "id": "a8daf3db.11b4e",
        "type": "subflow:1540ec98.e32783",
        "z": "b9d45f72.fdae2",
        "name": "",
        "env": [],
        "x": 1240,
        "y": 220,
        "wires": [
            [
                "16e858602a7fb3d3",
                "5feab3ef.82de3c"
            ]
        ]
    },
    {
        "id": "116bacd03a4e9405",
        "type": "subflow:a3987006252c27b3",
        "z": "b9d45f72.fdae2",
        "name": "",
        "x": 480,
        "y": 160,
        "wires": [
            [
                "5cf8a14f207195f6"
            ]
        ]
    },
    {
        "id": "5cf8a14f207195f6",
        "type": "subflow:3a5d69670370d7ac",
        "z": "b9d45f72.fdae2",
        "name": "",
        "env": [],
        "x": 710,
        "y": 160,
        "wires": [
            [
                "f63012c7.1917"
            ]
        ]
    },
    {
        "id": "4b310814fab30767",
        "type": "fs-ops-move",
        "z": "b9d45f72.fdae2",
        "name": "MoveFileToError",
        "sourcePath": "INTERFACE_SAP_TO_OBJ_DIR",
        "sourcePathType": "env",
        "sourceFilename": "file",
        "sourceFilenameType": "msg",
        "destPath": "errordir",
        "destPathType": "msg",
        "destFilename": "file",
        "destFilenameType": "msg",
        "link": false,
        "x": 280,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "ab254fc78cfff8ce",
        "type": "catch",
        "z": "b9d45f72.fdae2",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 120,
        "y": 100,
        "wires": [
            [
                "4b310814fab30767"
            ]
        ]
    },
    {
        "id": "16e858602a7fb3d3",
        "type": "fs-ops-move",
        "z": "b9d45f72.fdae2",
        "name": "MoveFileToArchive",
        "sourcePath": "INTERFACE_SAP_TO_OBJ_DIR",
        "sourcePathType": "env",
        "sourceFilename": "file",
        "sourceFilenameType": "msg",
        "destPath": "archivedir",
        "destPathType": "msg",
        "destFilename": "file",
        "destFilenameType": "msg",
        "link": false,
        "x": 1490,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "2759f4d702367a76",
        "type": "subflow:f510047e.e49ad8",
        "z": "6b777b1f31c1b35c",
        "name": "",
        "env": [],
        "x": 350,
        "y": 180,
        "wires": [
            [
                "a394e59a869a5579"
            ]
        ]
    },
    {
        "id": "a394e59a869a5579",
        "type": "switch",
        "z": "6b777b1f31c1b35c",
        "name": "",
        "property": "file",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "DEBMAS",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 270,
        "y": 240,
        "wires": [
            [
                "0e22cdf057d225fd"
            ],
            []
        ]
    },
    {
        "id": "0e22cdf057d225fd",
        "type": "file in",
        "z": "6b777b1f31c1b35c",
        "name": "",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 460,
        "y": 240,
        "wires": [
            [
                "87a65f4cc36b6466"
            ]
        ]
    },
    {
        "id": "44404fc2dd1830f4",
        "type": "xml",
        "z": "6b777b1f31c1b35c",
        "name": "XML > Json",
        "property": "payload",
        "attr": "",
        "chr": "",
        "x": 990,
        "y": 240,
        "wires": [
            [
                "fe5798b34bb7e80e",
                "c0796bbe96663c60"
            ]
        ]
    },
    {
        "id": "3bf17921492e88f7",
        "type": "debug",
        "z": "6b777b1f31c1b35c",
        "name": "BeforeAPIcall",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 520,
        "wires": []
    },
    {
        "id": "fe5798b34bb7e80e",
        "type": "function",
        "z": "6b777b1f31c1b35c",
        "name": "CustomerJason",
        "func": "\nvar sapCustomerData = msg.payload.DEBMAS01.IDOC[0].E1KNA1M[0]\n\nvar id = sapCustomerData.KUNNR[0]\nid = id.replace(/^0+/, '')\n\nvar langIsoCode = (sapCustomerData.SPRAS_ISO[0] == null) ? \"en\" : sapCustomerData.SPRAS_ISO[0].toLowerCase()\n\nvar customer = {\n    \"assetControlled\": true,\n    \"id\": id,\n    \"name\": sapCustomerData.NAME1[0],\n    \"description\": sapCustomerData.NAME1[0],\n    \"languageISOCode\": langIsoCode,\n    \"postalAddresses\": [\n        {\n            \"category\": \"Postal Address\",\n            \"city\": sapCustomerData.ORT01[0],\n            \"countryISO2Code\": sapCustomerData.LAND1[0],\n            \"countryName\": sapCustomerData.LAND1[0],\n            \"languageISOCode\": langIsoCode,\n            \"name\": sapCustomerData.NAME1[0],\n            \"street\": sapCustomerData.STRAS[0],\n            \"zipPostalCode\": sapCustomerData.PSTLZ[0]\n\n    \n        }\n    ],\n    \"userFields\": {\n        \"text\": [\n            {\n                \"key\": \"usrTxt1\",\n                \"value\": (sapCustomerData.STCEG) ? sapCustomerData.STCEG[0]: \"\"\n            }\n        ]\n    }\n}\n\nmsg.payload.arrCustomers = []\n\nmsg.payload.arrCustomers[0] = customer\nmsg.payload.arrCustomerLength = msg.payload.arrCustomers.length\nmsg.payload.customerCounter = 0\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 400,
        "wires": [
            [
                "0a27e61d9845cf8d",
                "3bf17921492e88f7"
            ]
        ]
    },
    {
        "id": "0a27e61d9845cf8d",
        "type": "subflow:436dd2ee6d1e0587",
        "z": "6b777b1f31c1b35c",
        "name": "",
        "x": 740,
        "y": 400,
        "wires": [
            [
                "04e609c0c164eb94"
            ]
        ]
    },
    {
        "id": "c0796bbe96663c60",
        "type": "debug",
        "z": "6b777b1f31c1b35c",
        "name": "BeforeConvToJason",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1260,
        "y": 240,
        "wires": []
    },
    {
        "id": "87a65f4cc36b6466",
        "type": "simple-queue",
        "z": "6b777b1f31c1b35c",
        "name": "",
        "firstMessageBypass": true,
        "bypassInterval": "0",
        "x": 790,
        "y": 240,
        "wires": [
            [
                "44404fc2dd1830f4"
            ]
        ]
    },
    {
        "id": "04e609c0c164eb94",
        "type": "change",
        "z": "6b777b1f31c1b35c",
        "name": "TriggerNextMessageInQueue",
        "rules": [
            {
                "t": "set",
                "p": "trigger",
                "pt": "msg",
                "to": "1",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1280,
        "y": 400,
        "wires": [
            [
                "be32f433558544ec"
            ]
        ]
    },
    {
        "id": "17c7692ac5bd498c",
        "type": "catch",
        "z": "6b777b1f31c1b35c",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 1200,
        "y": 520,
        "wires": [
            [
                "59bd58fe8a218890",
                "04e609c0c164eb94"
            ]
        ]
    },
    {
        "id": "59bd58fe8a218890",
        "type": "debug",
        "z": "6b777b1f31c1b35c",
        "name": "ERROR",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1460,
        "y": 520,
        "wires": []
    },
    {
        "id": "be32f433558544ec",
        "type": "fs-ops-move",
        "z": "6b777b1f31c1b35c",
        "name": "MoveFileToArchive",
        "sourcePath": "INTERFACE_SAP_TO_OBJ_DIR",
        "sourcePathType": "env",
        "sourceFilename": "file",
        "sourceFilenameType": "msg",
        "destPath": "archivedir",
        "destPathType": "msg",
        "destFilename": "file",
        "destFilenameType": "msg",
        "link": false,
        "x": 1110,
        "y": 320,
        "wires": [
            [
                "87a65f4cc36b6466"
            ]
        ]
    },
    {
        "id": "76ea4f88abb03a9a",
        "type": "subflow:c32ccc5d.5d3cc",
        "z": "29afaf8580d8a87f",
        "name": "",
        "env": [],
        "x": 960,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "b12b5d09cd2e095e",
        "type": "inject",
        "z": "29afaf8580d8a87f",
        "g": "ba27338732d11b37",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 120,
        "wires": [
            [
                "c819f8386a4a0d13"
            ]
        ]
    },
    {
        "id": "c819f8386a4a0d13",
        "type": "template",
        "z": "29afaf8580d8a87f",
        "g": "ba27338732d11b37",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n  \"id\": \"Test_Hans\",\n  \"itemKey\": \"1203\",\n  \"qtyPlanned\": 1000,\n  \"recipeKey\": \"TEMPLATE RECIPE\",\n  \"recipeVariantKey\": \"3\",\n  \"operations\": [\n    {\n      \"inputs\": [\n        {\n          \"itemKey\": \"2064\",\n          \"quantity\": 1000\n        }\n      ],\n      \"name\": \"Packing\"\n    }\n  ]\n}",
        "output": "str",
        "x": 340,
        "y": 120,
        "wires": [
            [
                "e6351cdc769ec034"
            ]
        ]
    },
    {
        "id": "e6351cdc769ec034",
        "type": "kafkajs-producer",
        "z": "29afaf8580d8a87f",
        "g": "ba27338732d11b37",
        "name": "",
        "client": "9f2e1f0c.45d84",
        "topic": "production.production-order.created",
        "advancedoptions": false,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "x": 530,
        "y": 120,
        "wires": []
    },
    {
        "id": "3ca4b86148727390",
        "type": "kafkajs-consumer",
        "z": "29afaf8580d8a87f",
        "name": "",
        "client": "9f2e1f0c.45d84",
        "groupid": "",
        "topic": "production.production-order.created",
        "advancedoptions": false,
        "autocommitinterval": 5000,
        "autocommitthreshold": 100,
        "sessiontimeout": 30000,
        "rebalancetimeout": 60000,
        "heartbeatinterval": 3000,
        "metadatamaxage": 300000,
        "maxbytesperpartition": 1048576,
        "minbytes": 1,
        "maxbytes": 10485760,
        "maxwaittimeinms": 5000,
        "frombeginning": false,
        "clearoffsets": false,
        "allowautotopiccreation": false,
        "x": 400,
        "y": 300,
        "wires": [
            [
                "a64dac21a8d635d0"
            ]
        ]
    },
    {
        "id": "a64dac21a8d635d0",
        "type": "subflow:e240094c.8dfd48",
        "z": "29afaf8580d8a87f",
        "name": "",
        "env": [],
        "x": 640,
        "y": 360,
        "wires": [
            [
                "76ea4f88abb03a9a",
                "f361cbb7c466104a"
            ]
        ]
    },
    {
        "id": "f361cbb7c466104a",
        "type": "debug",
        "z": "29afaf8580d8a87f",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 300,
        "wires": []
    },
    {
        "id": "7683a50695c310e6",
        "type": "subflow:f510047e.e49ad8",
        "z": "efeb392078a408b4",
        "name": "",
        "env": [],
        "x": 330,
        "y": 140,
        "wires": [
            [
                "88fc70470f1a242c"
            ]
        ]
    },
    {
        "id": "88fc70470f1a242c",
        "type": "switch",
        "z": "efeb392078a408b4",
        "name": "",
        "property": "file",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "CREMAS",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 250,
        "y": 200,
        "wires": [
            [
                "80d6605cf4c0cab6"
            ],
            []
        ]
    },
    {
        "id": "80d6605cf4c0cab6",
        "type": "file in",
        "z": "efeb392078a408b4",
        "name": "",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 440,
        "y": 200,
        "wires": [
            [
                "bd6b22d0282c0801"
            ]
        ]
    },
    {
        "id": "5eb66faecdc0cf47",
        "type": "xml",
        "z": "efeb392078a408b4",
        "name": "XML > Json",
        "property": "payload",
        "attr": "",
        "chr": "",
        "x": 970,
        "y": 200,
        "wires": [
            [
                "a76053ed8c3a40bb",
                "0bf32350bac41d15"
            ]
        ]
    },
    {
        "id": "b5ed3aeb7f099584",
        "type": "debug",
        "z": "efeb392078a408b4",
        "name": "BeforeAPIcall",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 520,
        "wires": []
    },
    {
        "id": "0bf32350bac41d15",
        "type": "function",
        "z": "efeb392078a408b4",
        "name": "SupplierJason",
        "func": "\nvar sapSupplierData = msg.payload.CREMAS01.IDOC[0].E1LFA1M[0]\n\nvar id = sapSupplierData.LIFNR[0]\nid = id.replace(/^0+/, '')\n\nvar langIsoCode = (sapSupplierData.LAND1[0] != \"PL\") ? \"en\" : sapSupplierData.LAND1[0].toLowerCase()\n\nvar supplier = {\n    \"assetControlled\": true,\n    \"id\": id,\n    \"name\": sapSupplierData.NAME1[0],\n    \"description\": sapSupplierData.NAME1[0],\n    \"languageISOCode\": langIsoCode,\n    \"postalAddresses\": [\n        {\n            \"category\": \"Postal Address\",\n            \"city\": sapSupplierData.ORT01[0],\n            \"countryISO2Code\": sapSupplierData.LAND1[0],\n            \"countryName\": sapSupplierData.LAND1[0],\n            \"languageISOCode\": langIsoCode,\n            \"name\": sapSupplierData.NAME1[0],\n            \"street\": sapSupplierData.STRAS[0],\n            \"zipPostalCode\": sapSupplierData.PSTLZ[0]\n\n    \n        }\n    ]\n    ,\n    \"userFields\": {\n        \"text\": [\n            {\n                \"key\": \"usrTxt1\",\n                \"value\": (sapSupplierData.STCEG) ? sapSupplierData.STCEG[0] : \"\"\n            }\n        ]\n    }\n}\n\nmsg.payload.supplier = supplier\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 360,
        "wires": [
            [
                "b5ed3aeb7f099584",
                "5c3f1504b26d2b84"
            ]
        ]
    },
    {
        "id": "a76053ed8c3a40bb",
        "type": "debug",
        "z": "efeb392078a408b4",
        "name": "BeforeConvToJason",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1240,
        "y": 200,
        "wires": []
    },
    {
        "id": "bd6b22d0282c0801",
        "type": "simple-queue",
        "z": "efeb392078a408b4",
        "name": "",
        "firstMessageBypass": true,
        "bypassInterval": "0",
        "x": 770,
        "y": 200,
        "wires": [
            [
                "5eb66faecdc0cf47"
            ]
        ]
    },
    {
        "id": "c282fcba68bbc89c",
        "type": "change",
        "z": "efeb392078a408b4",
        "name": "TriggerNextMessageInQueue",
        "rules": [
            {
                "t": "set",
                "p": "trigger",
                "pt": "msg",
                "to": "1",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1320,
        "y": 360,
        "wires": [
            [
                "4b2c94a5db6699b1"
            ]
        ]
    },
    {
        "id": "7181e9bdc9536ec8",
        "type": "catch",
        "z": "efeb392078a408b4",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 1180,
        "y": 480,
        "wires": [
            [
                "8b0c379bf38922fa",
                "c282fcba68bbc89c"
            ]
        ]
    },
    {
        "id": "8b0c379bf38922fa",
        "type": "debug",
        "z": "efeb392078a408b4",
        "name": "ERROR",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1440,
        "y": 480,
        "wires": []
    },
    {
        "id": "7a45992a3ca9b664",
        "type": "change",
        "z": "efeb392078a408b4",
        "name": "Prepare API Call params",
        "rules": [
            {
                "t": "set",
                "p": "call.path",
                "pt": "msg",
                "to": "/api/v2/suppliers/",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "call.resource",
                "pt": "msg",
                "to": "payload.id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "urlsubpath",
                "pt": "msg",
                "to": "call.path&call.resource",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "PUT",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "category",
                "pt": "msg",
                "to": "Create Supplier",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 360,
        "wires": [
            [
                "1c4b17e8cce50ae4"
            ]
        ]
    },
    {
        "id": "1c4b17e8cce50ae4",
        "type": "subflow:6ad93671.a35278",
        "z": "efeb392078a408b4",
        "name": "",
        "env": [],
        "x": 1020,
        "y": 360,
        "wires": [
            [
                "c282fcba68bbc89c"
            ]
        ]
    },
    {
        "id": "5c3f1504b26d2b84",
        "type": "change",
        "z": "efeb392078a408b4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.supplier",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 520,
        "y": 360,
        "wires": [
            [
                "7a45992a3ca9b664"
            ]
        ]
    },
    {
        "id": "4b2c94a5db6699b1",
        "type": "fs-ops-move",
        "z": "efeb392078a408b4",
        "name": "MoveFileToArchive",
        "sourcePath": "INTERFACE_SAP_TO_OBJ_DIR",
        "sourcePathType": "env",
        "sourceFilename": "file",
        "sourceFilenameType": "msg",
        "destPath": "archivedir",
        "destPathType": "msg",
        "destFilename": "file",
        "destFilenameType": "msg",
        "link": false,
        "x": 1110,
        "y": 280,
        "wires": [
            [
                "bd6b22d0282c0801"
            ]
        ]
    },
    {
        "id": "c6a52f46a58a2280",
        "type": "cronplus",
        "z": "7572dd85c30fac5f",
        "name": "",
        "outputField": "paylo",
        "timeZone": "",
        "persistDynamic": false,
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "topic1",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 0 12 * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 260,
        "y": 160,
        "wires": [
            [
                "3a7d68a2f7d3726a"
            ]
        ]
    },
    {
        "id": "0bc44d220d13d8b6",
        "type": "debug",
        "z": "7572dd85c30fac5f",
        "name": "CRONTRIGGERTEST",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 400,
        "wires": []
    },
    {
        "id": "3a7d68a2f7d3726a",
        "type": "template",
        "z": "7572dd85c30fac5f",
        "name": "",
        "field": "selectQuery",
        "fieldType": "flow",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Select distinct Inbound.ID as InboundID from OBJT_INBOUNDORDER as Inbound with (nolock)\nleft join OBJT_INBOUNDOPERATION as InboundLines with (nolock) on InboundLines.INBOUNDORDEROID = Inbound.OID\nleft join OBJT_INBOUNDITEMQTY as InboundQty with (nolock) on InboundQty.INBOUNDOPERATIONOID = InboundLines.OID\nleft join OBJT_ITEM as Item with (nolock) on Item.OID = InboundQty.ITEMOID\nwhere InboundQty.QTYTARGET > InboundQty.VALUE and Item.CATEGORY = 'ZFRE' and Inbound.STATUS <= 3 and Inbound.DTSDUEBEFORE < dateadd(DD,-1,getdate())",
        "output": "str",
        "x": 500,
        "y": 240,
        "wires": [
            [
                "8c2a4ea0e8de92c9"
            ]
        ]
    },
    {
        "id": "8c2a4ea0e8de92c9",
        "type": "MSSQL",
        "z": "7572dd85c30fac5f",
        "mssqlCN": "2c935d8d.e39c82",
        "name": "",
        "outField": "payload.result",
        "returnType": 0,
        "throwErrors": 1,
        "query": "",
        "modeOpt": "",
        "modeOptType": "query",
        "queryOpt": "selectQuery",
        "queryOptType": "flow",
        "paramsOpt": "",
        "paramsOptType": "none",
        "rows": "",
        "rowsType": "msg",
        "params": [],
        "x": 660,
        "y": 240,
        "wires": [
            [
                "397632c45a28fdbe"
            ]
        ]
    },
    {
        "id": "397632c45a28fdbe",
        "type": "function",
        "z": "7572dd85c30fac5f",
        "name": "",
        "func": "var arrInboundOrderIDs = msg.payload.result\nmsg.payload.uploadInboundOrderCounter =0\nmsg.payload.nrOfInboundOrdersToProcess =arrInboundOrderIDs.length\nvar arrInboundOrderMessages =[];\nmsg.payload.arrInboundOrderMessages = arrInboundOrderMessages\n\n\nif (arrInboundOrderIDs){\nfor (var index in arrInboundOrderIDs) {\n    \nvar apiMessage = {\n  \"receiptOrderKey\" : arrInboundOrderIDs[index].InboundID\n}\n\narrInboundOrderMessages[index] = apiMessage\n\n}\n}\n\nmsg.payload.arrInboundOrderMessages = arrInboundOrderMessages\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 240,
        "wires": [
            [
                "097af811f6d74fe8"
            ]
        ]
    },
    {
        "id": "097af811f6d74fe8",
        "type": "subflow:2696630a8bfd33d3",
        "z": "7572dd85c30fac5f",
        "name": "",
        "env": [],
        "x": 770,
        "y": 360,
        "wires": [
            [
                "0bc44d220d13d8b6"
            ]
        ]
    },
    {
        "id": "461e119ad039bc88",
        "type": "debug",
        "z": "0ed3fbcc7ca1ad55",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 290,
        "y": 140,
        "wires": []
    },
    {
        "id": "756a29958cbf34b8",
        "type": "template",
        "z": "0ed3fbcc7ca1ad55",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Hi\n\nThis is a test mail\n\n000000000000000024\n000000000000008341\n000000000000000048\n000000000000000055\n\nMet vriendelijke groeten - Cordialement - Kind regards,\nGlenn Boudaer\n\n[cid:d09bf2c9-499f-4ea3-86aa-4c411fcc58a1.jpg]          Glenn Boudaer\nSoftware Engineer * Objective Belgium\n\n+32 52 43 20 80\nglenn.boudaer@objt.com\nMeerbos 2, B-9260 Wichelen\nwww.objt.com<https://objt.com/?utm_campaign=Outlook%20Signature&utm_source=Organic&utm_medium=CodeTwo>\n\n[cid:redbanner_6dee30fb-d035-444e-a069-33a72ce16d97.png]    [cid:linkedin2.0_bc515bb4-ebbd-476a-9654-2b7195a6e489.png] <https://www.linkedin.com/company/228628/admin/>  [cid:facebook2.0_2d41f5b0-22eb-4bb2-bafc-ccbe7992d44b.png] <https://www.facebook.com/objectiveinternational/>  [cid:youtube2.0_bb930da1-4712-413e-9354-6776e55badf7.png] <https://www.youtube.com/channel/UCq5FJke06KAZTq87NrmC-nA>  [cid:twitter2.0_076a7f0b-04f1-4fe9-94ca-2bb67965a3ed.png] <https://twitter.com/Objective_Intl>\n\nVAT Reg N?: BE0458.980.046 - RPR Gent, afd. Dender...",
        "output": "str",
        "x": 280,
        "y": 100,
        "wires": [
            [
                "461e119ad039bc88",
                "0b0a7b825a93477e"
            ]
        ]
    },
    {
        "id": "849b7adad1b22b73",
        "type": "inject",
        "z": "0ed3fbcc7ca1ad55",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 100,
        "wires": [
            [
                "756a29958cbf34b8"
            ]
        ]
    },
    {
        "id": "0b0a7b825a93477e",
        "type": "function",
        "z": "0ed3fbcc7ca1ad55",
        "name": "",
        "func": "msg.payload = msg.payload.match(/[0-9]{18}/g)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 100,
        "wires": [
            [
                "ea66826418d84507"
            ]
        ]
    },
    {
        "id": "ea66826418d84507",
        "type": "split",
        "z": "0ed3fbcc7ca1ad55",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 590,
        "y": 100,
        "wires": [
            [
                "6a31ddb1e254c429"
            ]
        ]
    },
    {
        "id": "6a31ddb1e254c429",
        "type": "change",
        "z": "0ed3fbcc7ca1ad55",
        "name": "Set gateway parameters",
        "rules": [
            {
                "t": "set",
                "p": "keys.key",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 190,
        "y": 240,
        "wires": [
            [
                "0135745ceccaf924"
            ]
        ]
    },
    {
        "id": "d2bd9c748397c8c5",
        "type": "subflow:ee7c6c85b250bda0",
        "z": "0ed3fbcc7ca1ad55",
        "name": "",
        "env": [
            {
                "name": "METHOD",
                "value": "PATCH",
                "type": "str"
            },
            {
                "name": "PATH",
                "value": "/apigw/api/v1/lpns/{key}",
                "type": "str"
            }
        ],
        "x": 630,
        "y": 240,
        "wires": [
            [
                "bc22224bd95a87da",
                "ebc9e99481d75a9b"
            ],
            [
                "d0323da6c808edb2"
            ]
        ]
    },
    {
        "id": "bc22224bd95a87da",
        "type": "change",
        "z": "0ed3fbcc7ca1ad55",
        "name": "Set LPN",
        "rules": [
            {
                "t": "set",
                "p": "LPN",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 880,
        "y": 220,
        "wires": [
            [
                "744d09b5169e46eb"
            ]
        ]
    },
    {
        "id": "ebc9e99481d75a9b",
        "type": "debug",
        "z": "0ed3fbcc7ca1ad55",
        "name": "Successfull gateway call",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 120,
        "wires": []
    },
    {
        "id": "d0323da6c808edb2",
        "type": "debug",
        "z": "0ed3fbcc7ca1ad55",
        "name": "Failed gateway call",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 320,
        "wires": []
    },
    {
        "id": "744d09b5169e46eb",
        "type": "debug",
        "z": "0ed3fbcc7ca1ad55",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 220,
        "wires": []
    },
    {
        "id": "0135745ceccaf924",
        "type": "template",
        "z": "0ed3fbcc7ca1ad55",
        "name": "",
        "field": "request",
        "fieldType": "msg",
        "format": "json",
        "syntax": "mustache",
        "template": "{\n    \"usrFlg1\": true\n}",
        "output": "str",
        "x": 400,
        "y": 240,
        "wires": [
            [
                "d2bd9c748397c8c5"
            ]
        ]
    },
    {
        "id": "56ac8f626c660f71",
        "type": "subflow:f510047e.e49ad8",
        "z": "4cf7a170bd3086fc",
        "name": "",
        "env": [],
        "x": 190,
        "y": 40,
        "wires": [
            [
                "ce644af77459507a"
            ]
        ]
    },
    {
        "id": "ce644af77459507a",
        "type": "switch",
        "z": "4cf7a170bd3086fc",
        "name": "StockFile check",
        "property": "file",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "StockFile",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 500,
        "y": 80,
        "wires": [
            [
                "f884a20c1e18a899"
            ],
            []
        ]
    },
    {
        "id": "f884a20c1e18a899",
        "type": "file in",
        "z": "4cf7a170bd3086fc",
        "name": "",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 700,
        "y": 80,
        "wires": [
            [
                "42b6aa1cd5e6f2ae"
            ]
        ]
    },
    {
        "id": "42b6aa1cd5e6f2ae",
        "type": "csv",
        "z": "4cf7a170bd3086fc",
        "name": "",
        "sep": ";",
        "hdrin": "",
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": false,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 890,
        "y": 80,
        "wires": [
            [
                "b4d673fe3ddcd176"
            ]
        ]
    },
    {
        "id": "08ac60ef5104b4bb",
        "type": "function",
        "z": "4cf7a170bd3086fc",
        "name": "PreProcessInfo",
        "func": "\n\n\n\nconst itemPackagingMap = new Map()\nconst itemPackagingMapToCreate = new Map()\nconst mapItemPackConfig = new Map()\nconst locationStockRecordMap = new Map()\n\nvar arrPackConfig = []\nvar arrPackConfigCounter = 0\n\n\nvar arrPackConfigToMapToItem = []\n\n\nvar arrLocationKeys = []\nvar itemkeyCounter = 0\nvar locationKeyCounter = 0\n\nvar mappingCounter = 0\n\nfor (var index in msg.payload.arrStockRecords) {\n  var stockObject = msg.payload.arrStockRecords[index]\n\n  var itemKey = stockObject.col1\n  if (msg.payload.itemMap.has(itemKey)) {\n         \n    if (!(itemPackagingMap.has(itemKey))){\n          itemPackagingMap.set(itemKey, itemKey)  \n    }\n        \n\n  var locationKey = stockObject.col10\n  if (locationStockRecordMap.has(locationKey))\n  {\n    var arrSRperLocation2 = locationStockRecordMap.get(locationKey)\n    var arrLength = arrSRperLocation2.length\n    arrSRperLocation2[arrLength] = stockObject\n  }\n  else{\n    var arrSRperLocation = []\n    arrSRperLocation[0] = stockObject\n    locationStockRecordMap.set(locationKey, arrSRperLocation )\n    arrLocationKeys[locationKeyCounter] = locationKey\n    locationKeyCounter = locationKeyCounter +1\n  }\n\n\n  var curPackConfig =\n  {\n    name : \"test\",\n    nrOfLayers : 0,\n    nrOfBoxesPerLayer : 0,\n    layerName : \"\",\n    containerName : \"\"}\n\n  curPackConfig.nrOfLayers = stockObject.col23\n  if (curPackConfig.nrOfLayers === 1)\n  {\n    curPackConfig.nrOfBoxesPerLayer = 1\n  }\n  else\n  {\n    curPackConfig.nrOfBoxesPerLayer = stockObject.col22\n  }\n  curPackConfig.containerName = stockObject.col12\n  var strLayers = \"\"\n  strLayers = curPackConfig.nrOfLayers\n  if (strLayers.length === 1)\n  {\n    strLayers = \"0\" + strLayers\n  }\n  var strNrOfBoxesPerLayer = \"\"\n  strNrOfBoxesPerLayer = curPackConfig.nrOfBoxesPerLayer\n  if (strNrOfBoxesPerLayer.length === 1) {\n    strNrOfBoxesPerLayer = \"0\" + strNrOfBoxesPerLayer\n  }\n\n  var boxHeight = '0'\n\n  if (parseInt(curPackConfig.nrOfLayers) === 1)\n  {\n    boxHeight = '1800'\n  }\n  else if (parseInt(curPackConfig.nrOfLayers) > 1 && parseInt(curPackConfig.nrOfLayers) < 7)\n  {\n    boxHeight = '310'\n  }\n  else if (parseInt(curPackConfig.nrOfLayers) === 7) {\n    boxHeight = '250'\n  }\n  else if (parseInt(curPackConfig.nrOfLayers) === 8) {\n    boxHeight = '225'\n  }\n  else if (parseInt(curPackConfig.nrOfLayers) === 9) {\n    boxHeight = '200'\n  }\n  else if (parseInt(curPackConfig.nrOfLayers) === 10) {\n    boxHeight = '180'\n  }\n  else if (parseInt(curPackConfig.nrOfLayers) > 10) {\n    boxHeight = '120'\n  }\n\n  curPackConfig.layerName = 'LAY_'  + boxHeight\n\n\n  if (boxHeight.toString.length === 3)\n  {\n    curPackConfig.name = strLayers + strNrOfBoxesPerLayer + curPackConfig.containerName + '0' + boxHeight\n  }\n  else{\n    curPackConfig.name = strLayers + strNrOfBoxesPerLayer + curPackConfig.containerName + boxHeight\n  }\n\n  var packConfig = {\n    \"name\": \"\",\n    \"description\": \"\",\n    \"skuLevel\": {\n      \"cubics\": false,\n      \"depth\": false,\n      \"height\": false,\n      \"volume\": false,\n      \"weight\": true,\n      \"width\": false\n    },\n    \"packagingLevels\": []\n  }\n\n  packConfig.name = curPackConfig.name\n\n  if (parseInt(curPackConfig.nrOfLayers) === 1)\n  {\n    var packOctoLevel02 = {\n      \"containerTypeKey\": \"OCTO\",\n      \"cubics\": false,\n      \"depth\": false,\n      \"factor\": 1,\n      \"fixed\": false,\n      \"height\": false,\n      \"level\": 2,\n      \"volume\": false,\n      \"weight\": false,\n      \"width\": false\n    }\n\n    packConfig.packagingLevels[0] = packOctoLevel02\n\n    var packOctoLevel06 = {\n      \"containerTypeKey\": curPackConfig.containerName,\n      \"cubics\": true,\n      \"depth\": false,\n      \"factor\": 1,\n      \"fixed\": false,\n      \"height\": true,\n      \"level\": 6,\n      \"volume\": false,\n      \"weight\": true,\n      \"width\": true\n    }\n\n    packConfig.packagingLevels[1] = packOctoLevel06\n  }\n  else\n  {\n    var packLevel02 = {\n      \"containerTypeKey\": \"CRT\",\n      \"cubics\": false,\n      \"depth\": false,\n      \"factor\": 1,\n      \"fixed\": false,\n      \"height\": false,\n      \"level\": 2,\n      \"volume\": false,\n      \"weight\": false,\n      \"width\": false\n    }\n\n    packConfig.packagingLevels[0] = packLevel02\n\n\n    var packLevel04 = {\n      \"containerTypeKey\": curPackConfig.layerName,\n      \"cubics\": false,\n      \"depth\": false,\n      \"factor\": parseInt(curPackConfig.nrOfBoxesPerLayer),\n      \"fixed\": false,\n      \"height\": true,\n      \"level\": 4,\n      \"volume\": false,\n      \"weight\": false,\n      \"width\": false\n    }\n\n    packConfig.packagingLevels[1] = packLevel04\n\n    var packLevel06 = {\n      \"containerTypeKey\": curPackConfig.containerName,\n      \"cubics\": true,\n      \"depth\": false,\n      \"factor\": (parseInt(curPackConfig.nrOfLayers) * parseInt(curPackConfig.nrOfBoxesPerLayer)),\n      \"fixed\": false,\n      \"height\": true,\n      \"level\": 6,\n      \"volume\": false,\n      \"weight\": true,\n      \"width\": true\n    }\n\n    packConfig.packagingLevels[2] = packLevel06\n\n  }\n\n\n\n  if (!itemPackagingMapToCreate.has(packConfig.name))\n  {\n    itemPackagingMapToCreate.set(packConfig.name, packConfig)\n    arrPackConfig[arrPackConfigCounter] = packConfig\n    arrPackConfigCounter = arrPackConfigCounter + 1\n  }\n\n  var itemPackConfigKey = itemKey + '-' +packConfig.name\n  if (!mapItemPackConfig.has(itemPackConfigKey)){\n      var tempObj ={\n         ItemKey : \"\",\n        PackConfigName : \"\"\n      }\n\n    mapItemPackConfig.set(itemPackConfigKey, itemPackConfigKey)\n    tempObj.ItemKey = itemKey\n    tempObj.PackConfigName = packConfig.name\n\n    arrPackConfigToMapToItem[mappingCounter] = tempObj\n    mappingCounter = mappingCounter +1\n\n  }\n\n  stockObject.packConfigName = packConfig.name\n  stockObject.packConfig = packConfig\n  }\n\n}\n\n\nmsg.payload.itemPackagingMapToCreate = itemPackagingMapToCreate\nmsg.payload.locationStockRecordMap = locationStockRecordMap\nmsg.payload.itemPackagingMap = itemPackagingMap\nmsg.payload.arrLocationKeys = arrLocationKeys\nmsg.payload.itemkeyCounter = 0\nmsg.payload.arrPackConfig = arrPackConfig\nmsg.payload.packConfig = arrPackConfig[0]\nmsg.payload.arrPackConfigCounter = 0\nmsg.payload.arrStockRecordCounter = 0\nmsg.payload.arrPackConfigToMapToItemLength = arrPackConfigToMapToItem.length\nmsg.payload.arrPackConfigToMapToItem = arrPackConfigToMapToItem\nmsg.payload.ItemKey =\"\"\nmsg.payload.PackConfigTemplateName = \"\"\nmsg.payload.packConfigFactor = parseInt(1)\nmsg.payload.mapItemPackConfig = mapItemPackConfig\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 200,
        "wires": [
            [
                "0a85b42ec09c8648",
                "588206c55675555a"
            ]
        ]
    },
    {
        "id": "e2b21df41e4821fa",
        "type": "subflow:9448532d880def76",
        "z": "4cf7a170bd3086fc",
        "name": "",
        "env": [],
        "x": 420,
        "y": 200,
        "wires": [
            [
                "08ac60ef5104b4bb"
            ]
        ]
    },
    {
        "id": "459d3e6a7c61feaf",
        "type": "debug",
        "z": "4cf7a170bd3086fc",
        "name": "AfterProcess",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "inventory",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 580,
        "wires": []
    },
    {
        "id": "0a85b42ec09c8648",
        "type": "debug",
        "z": "4cf7a170bd3086fc",
        "name": "BeforeProcess",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1760,
        "y": 180,
        "wires": []
    },
    {
        "id": "b4d673fe3ddcd176",
        "type": "change",
        "z": "4cf7a170bd3086fc",
        "name": "CopyPayload",
        "rules": [
            {
                "t": "set",
                "p": "sourcepayload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1050,
        "y": 80,
        "wires": [
            [
                "5a1c96f359c3c388"
            ]
        ]
    },
    {
        "id": "9fd058b648b49c8c",
        "type": "function",
        "z": "4cf7a170bd3086fc",
        "name": "ProcessInfo",
        "func": "function convertToDate(x) {\n\n    const myArray = x.split(\".\")\n\n    var day = myArray[0]\n    var month = myArray[1]\n   \n    var year = myArray[2]\n    //var result = new Date()\n    //result.setYear(year)\n    //result.setMonth(month - 1)\n    //result.setDate(day)\n    //result.setHours(2)\n    //result.setMinutes(1)\n    if (day.toString().length == 1) {\n        day  = \"0\" + day\n    }\n\n    if (month.toString().length == 1) {\n        month = \"0\" + month\n    }\n\n    return year + \"-\" + month + \"-\" + day\n}\n\nvar inventory = {\n    \"location\":[]\n}\n\n\n\n\nvar locationCounter = 0\nfor (var index in msg.payload.arrLocationKeys) {\n\n    var locationKey = msg.payload.arrLocationKeys[index]\n    var loc = {\n        \"fullname\" : \"\",\n        \"container\" : [],\n        \"lastLoc\" : false\n    }\n\n    loc.fullname = locationKey\n\n    var containerCounter =  0\n    var arrSRperLocation = msg.payload.locationStockRecordMap.get(locationKey)\n    for (var index2 in arrSRperLocation) {\n\n        var sr = arrSRperLocation[index2]\n\n        var packagingInfo = msg.payload.itemPackagingMap.get(sr.col1.toString())\n        var sapBatch = sr.col15.substr(1, sr.col15.length)\n        var cont = {\n            \"name\" : sr.col11,\n            \"packaging\": sr.packConfigName,\n            \"containertype\": sr.col12,\n            \"inventoryitem\" : {\n               \"itemname\": sr.col1,\n                \"lotid\" : sr.col14,\n                \"sublotid\": sapBatch,\n                \"dtsproduction\": convertToDate(sr.col17),\n                \"dtsbestbefore\": convertToDate(sr.col16),\n                \"qty\" : parseFloat(sr.col19),\n                \"qualitycontrolstatusid\": \"UNRESTRICTED\",\n                \"inventorycode5\" : sr.col2\n            },\n            lastCont : false\n        }\n\n        if (parseInt(index2) == (arrSRperLocation.length - 1))\n        {\n            cont.lastCont = true\n        }\n\n        loc.container[containerCounter] = cont\n        containerCounter = containerCounter + 1\n\n    }\n \n    if (parseInt(index) == (msg.payload.arrLocationKeys.length - 1)) {\n        loc.lastLoc = true\n    }\n\n    inventory.location[locationCounter] = loc\n    locationCounter = locationCounter +1\n}\n\n\nmsg.payload.inventory = inventory\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 200,
        "wires": [
            [
                "b2099e1e99e0e6ee",
                "62c135d8e74c456d"
            ]
        ]
    },
    {
        "id": "42f6446d9052df96",
        "type": "xml",
        "z": "4cf7a170bd3086fc",
        "name": "Jason To Xml",
        "property": "inventory",
        "attr": "",
        "chr": "",
        "x": 840,
        "y": 440,
        "wires": [
            [
                "d8f8d268fbfa6322",
                "459d3e6a7c61feaf"
            ]
        ]
    },
    {
        "id": "d8f8d268fbfa6322",
        "type": "change",
        "z": "4cf7a170bd3086fc",
        "name": "Set filename and payload",
        "rules": [
            {
                "t": "set",
                "p": "filename",
                "pt": "msg",
                "to": "$env('INTERFACE_DOWNLOAD_DIR')&'/INV_'&$now('[D01][M01][Y0001]-[H01][m01][s01]','+0100')",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "inventory",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "renamecommand",
                "pt": "msg",
                "to": "filename&' '&filename&'.xml'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1070,
        "y": 440,
        "wires": [
            [
                "11d3caf94f4c1240"
            ]
        ]
    },
    {
        "id": "11d3caf94f4c1240",
        "type": "file",
        "z": "4cf7a170bd3086fc",
        "name": "Write to XML",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1310,
        "y": 440,
        "wires": [
            [
                "ded1c275fbe101b2"
            ]
        ]
    },
    {
        "id": "ded1c275fbe101b2",
        "type": "exec",
        "z": "4cf7a170bd3086fc",
        "command": "mv ",
        "addpay": "renamecommand",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Rename",
        "x": 1480,
        "y": 440,
        "wires": [
            [
                "a9a92920e8dc09ad"
            ],
            [
                "da133676013e245e"
            ],
            [
                "91e3b3a8106041e5"
            ]
        ]
    },
    {
        "id": "a9a92920e8dc09ad",
        "type": "debug",
        "z": "4cf7a170bd3086fc",
        "name": "node1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1650,
        "y": 400,
        "wires": []
    },
    {
        "id": "da133676013e245e",
        "type": "debug",
        "z": "4cf7a170bd3086fc",
        "name": "node2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1650,
        "y": 440,
        "wires": []
    },
    {
        "id": "91e3b3a8106041e5",
        "type": "debug",
        "z": "4cf7a170bd3086fc",
        "name": "command ok",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1670,
        "y": 480,
        "wires": []
    },
    {
        "id": "62c135d8e74c456d",
        "type": "debug",
        "z": "4cf7a170bd3086fc",
        "name": "ProcessInfoDebug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 360,
        "wires": []
    },
    {
        "id": "b2099e1e99e0e6ee",
        "type": "template",
        "z": "4cf7a170bd3086fc",
        "name": "StockToJason",
        "field": "inventory",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n    \"inventory\" : {\n        \"location\":\n        [\n            {{#payload.inventory.location}}\n            {\n\t\t    \"fullname\": \"{{{fullname}}}\",\n\t        \"container\": [\n                    {{#container}}\n                    {\n                        \"name\": \"{{{name}}}\",\n                        \"packaging\": \"{{{packaging}}}\",\n                        \"containertype\": \"{{{containertype}}}\",\n                        \"inventoryitem\": {\n                            \"itemname\": \"{{{inventoryitem.itemname}}}\",\n\t                        \"lotid\": \"{{{inventoryitem.lotid}}}\" ,\n                            \"sublotid\": \"{{{inventoryitem.sublotid}}}\" ,\n                            \"dtsproduction\": \"{{{inventoryitem.dtsproduction}}}\",\n                            \"dtsbestbefore\": \"{{{inventoryitem.dtsbestbefore}}}\",\n                            \"qty\": \"{{{inventoryitem.qty}}}\",\n                            \"qualitycontrolstatusid\": \"{{{inventoryitem.qualitycontrolstatusid}}}\",\n                            \"inventorycode5\" :  \"{{{inventoryitem.inventorycode5}}}\"\n                        }\n                    }{{^lastCont}},{{/lastCont}}\n                    {{/container}}\n                ]\n               }{{^lastLoc}},{{/lastLoc}}\n               {{/payload.inventory.location}}\n            ]\n    } \n}\n\n\n",
        "output": "json",
        "x": 580,
        "y": 420,
        "wires": [
            [
                "42f6446d9052df96"
            ]
        ]
    },
    {
        "id": "588206c55675555a",
        "type": "subflow:e2dafa3d42a6d9a8",
        "z": "4cf7a170bd3086fc",
        "name": "",
        "env": [],
        "x": 900,
        "y": 200,
        "wires": [
            [
                "9fd058b648b49c8c"
            ]
        ]
    },
    {
        "id": "5a1c96f359c3c388",
        "type": "function",
        "z": "4cf7a170bd3086fc",
        "name": "getItemInfo",
        "func": "msg.payload = {}\n\nvar arrStockRecords = msg.sourcepayload\n\n\nconst itemMap = new Map()\n\n\n\n\n\n\n\nvar arrItemKeys = []\n\nvar itemkeyCounter = 0\n\n\n\n\nfor (var index in arrStockRecords) {\n  var stockObject = arrStockRecords[index]\n\n  var itemKey = stockObject.col1.trim()\n  if (!(itemMap.has(itemKey))) {\n          itemMap.set(itemKey, itemKey)\n         \n          arrItemKeys[itemkeyCounter] = itemKey\n\n          itemkeyCounter = itemkeyCounter + 1\n        }\n\n \n}\n\n\nmsg.payload.arrStockRecords = arrStockRecords\nmsg.payload.itemMap = itemMap\n\nmsg.payload.arrItemKeys = arrItemKeys\nmsg.payload.numberOfItemKeys = arrItemKeys.length\nmsg.payload.itemkeyCounter = 0\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 200,
        "wires": [
            [
                "e2b21df41e4821fa"
            ]
        ]
    },
    {
        "id": "519e02057504bceb",
        "type": "catch",
        "z": "4cf7a170bd3086fc",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 400,
        "y": 680,
        "wires": [
            [
                "641d41754604c2e4"
            ]
        ]
    },
    {
        "id": "641d41754604c2e4",
        "type": "debug",
        "z": "4cf7a170bd3086fc",
        "name": "ERROR",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 720,
        "wires": []
    },
    {
        "id": "954ffd176cb55f46",
        "type": "function",
        "z": "4cf7a170bd3086fc",
        "name": "PreProcessInfoStandaard",
        "func": "msg.payload = {}\n\nmsg.payload.arrStockRecords = msg.sourcepayload\n\n\nmsg.payload.itemMap = new Map()\nmsg.payload.itemPackagingMap = new Map()\nmsg.payload.arrItemKeys = []\nmsg.payload.locationStockRecordMap = new Map()\n\nmsg.payload.itemPackagingMap = new Map()\nmsg.payload.mapItemPackConfig = new Map()\n\n\n\n\nmsg.payload.arrLocationKeys = []\n\nvar itemkeyCounter = 0\nvar locationKeyCounter = 0\n\nvar mappingCounter = 0\n\nfor (var index in msg.payload.arrStockRecords) {\n    var stockObject = msg.payload.arrStockRecords[index]\n\n    var itemKey = stockObject.col1\n\n    if (!(msg.payload.itemMap.has(itemKey))) {\n        msg.payload.itemMap.set(itemKey, itemKey)\n\n        msg.payload.arrItemKeys[itemkeyCounter] = itemKey\n\n        itemkeyCounter = itemkeyCounter + 1\n    }\n\n    var locationKey = stockObject.col10\n    if (msg.payload.locationStockRecordMap.has(locationKey)) {\n        var arrSRperLocation2 = msg.payload.locationStockRecordMap.get(locationKey)\n        var arrLength = arrSRperLocation2.length\n        arrSRperLocation2[arrLength] = stockObject\n    }\n    else {\n        var arrSRperLocation = []\n        arrSRperLocation[0] = stockObject\n        msg.payload.locationStockRecordMap.set(locationKey, arrSRperLocation)\n\n        msg.payload.arrLocationKeys[locationKeyCounter] = locationKey\n        locationKeyCounter = locationKeyCounter + 1\n    }\n\n\n\n}\n\n\n\n\nmsg.payload.itemkeyCounter = 0\nmsg.payload.numberOfItemKeys = msg.payload.arrItemKeys.length\n\nmsg.payload.arrPackConfigCounter = 0\nmsg.payload.arrStockRecordCounter = 0\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 280,
        "wires": [
            [
                "e74bc302a4d2e543"
            ]
        ]
    },
    {
        "id": "e74bc302a4d2e543",
        "type": "subflow:31ab2e331f379432",
        "z": "4cf7a170bd3086fc",
        "name": "",
        "x": 520,
        "y": 280,
        "wires": [
            [
                "9fd058b648b49c8c"
            ]
        ]
    },
    {
        "id": "981849a1b3ee8881",
        "type": "template",
        "z": "16409cda02999332",
        "name": "",
        "field": "selectQuery",
        "fieldType": "flow",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Select distinct ReceiptLocation.FULLNAME as ReceiptLocation ,Item.Name as ItemID,Inbound.Status,Inbound.ID as InboundID, Inbound.USRNUM1 as BrutoWeight, Inbound.USRNUM2 as TarraWeight, Inbound.USRFLG1 as InboundFinished \nfrom OBJT_INBOUNDORDER as Inbound with (nolock) \nleft join (Select  * from OBJT_ORDERRESOURCELINK with (nolock) where RESOURCECLASSNAME = 'objt.common.inventorymgt.bo.WarehouseLocation') as OrderLocLink on OrderLocLink.ORDEROID = Inbound.OID\nleft join OBJT_WAREHOUSELOCATION as ReceiptLocation With (nolock) on ReceiptLocation.OID =  OrderLocLink.RESOURCEOID\nleft join OBJT_INBOUNDOPERATION as InboundLines with (nolock) on InboundLines.INBOUNDORDEROID = Inbound.OID\nleft join OBJT_INBOUNDITEMQTY as InboundQty with (nolock) on InboundQty.INBOUNDOPERATIONOID = InboundLines.OID\nleft join OBJT_ITEM as Item with (nolock) on Item.OID = InboundQty.ITEMOID\nwhere Inbound.USRFLG1 = 'T' and ReceiptLocation.FULLNAME is not null And Inbound.STATUS in (2,3,10)",
        "output": "str",
        "x": 140,
        "y": 160,
        "wires": [
            [
                "cc3f25440d616498"
            ]
        ]
    },
    {
        "id": "cc3f25440d616498",
        "type": "MSSQL",
        "z": "16409cda02999332",
        "mssqlCN": "2c935d8d.e39c82",
        "name": "",
        "outField": "payload.result",
        "returnType": 0,
        "throwErrors": 1,
        "query": "",
        "modeOpt": "",
        "modeOptType": "query",
        "queryOpt": "selectQuery",
        "queryOptType": "flow",
        "paramsOpt": "",
        "paramsOptType": "none",
        "rows": "",
        "rowsType": "msg",
        "params": [],
        "x": 380,
        "y": 160,
        "wires": [
            [
                "c9b73cc75341398d",
                "242f1f59e1f30039"
            ]
        ]
    },
    {
        "id": "c9b73cc75341398d",
        "type": "function",
        "z": "16409cda02999332",
        "name": "filterSQLdata",
        "func": "var tempInboundOrderInfo = msg.payload.result\nmsg.payload.inboundKeyMap = new Map\nmsg.payload.itemPackagingMap = new Map\nvar localItemMap = new Map\nmsg.payload.arrItemKeys = []\nmsg.payload.itemkeyCounter = 0\n\n \n msg.payload.arrInboundOrderInfo = []\nvar infoCounter = 0\n\nfor (let varInfoIndex = 0; varInfoIndex < tempInboundOrderInfo.length; varInfoIndex++) {\n    const element = tempInboundOrderInfo[varInfoIndex];\n\n    if (!msg.payload.inboundKeyMap.has(element.InboundID))\n    {\n        msg.payload.inboundKeyMap.set(element.InboundID, element)\n        msg.payload.arrInboundOrderInfo[infoCounter] = element\n        infoCounter = infoCounter  + 1\n    }\n\n    if (!localItemMap.has(element.ItemID))\n    {\n        msg.payload.arrItemKeys[msg.payload.itemkeyCounter] = element.ItemID\n        localItemMap.set(element.ItemID, element.ItemID)\n        msg.payload.itemkeyCounter = msg.payload.itemkeyCounter + 1\n\n    }\n\n    \n}\n\n\n\nmsg.payload.InboundOrderCounter = 0\nmsg.payload.nrOfInboundOrdersToProcess = msg.payload.arrInboundOrderInfo.length\nmsg.payload.numberOfItemKeys = msg.payload.itemkeyCounter\nmsg.payload.itemkeyCounter =0\nvar arrUploadedInboundOrders = []\nmsg.payload.arrUploadedInboundOrders = arrUploadedInboundOrders\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 160,
        "wires": [
            [
                "a09631ac70b2d20c"
            ]
        ]
    },
    {
        "id": "bd82a9abade5a911",
        "type": "subflow:9d4da4af07865061",
        "z": "16409cda02999332",
        "name": "",
        "x": 1350,
        "y": 160,
        "wires": [
            [
                "5971ebeecefa42ca",
                "4dabe9f7c90675f0"
            ]
        ]
    },
    {
        "id": "5971ebeecefa42ca",
        "type": "debug",
        "z": "16409cda02999332",
        "name": "AfterUploadInboundOrders",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 60,
        "wires": []
    },
    {
        "id": "8247e18bcf410ab1",
        "type": "cronplus",
        "z": "16409cda02999332",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "persistDynamic": false,
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "topic1",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */10 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 140,
        "y": 60,
        "wires": [
            [
                "981849a1b3ee8881"
            ]
        ]
    },
    {
        "id": "242f1f59e1f30039",
        "type": "debug",
        "z": "16409cda02999332",
        "name": "AfterSQL",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 60,
        "wires": []
    },
    {
        "id": "4dabe9f7c90675f0",
        "type": "change",
        "z": "16409cda02999332",
        "name": "resetInboundOrderCounter",
        "rules": [
            {
                "t": "set",
                "p": "payload.InboundOrderCounter",
                "pt": "msg",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1600,
        "y": 160,
        "wires": [
            [
                "44e43ef59d32d93b"
            ]
        ]
    },
    {
        "id": "44e43ef59d32d93b",
        "type": "subflow:99f7d9ef22663ce3",
        "z": "16409cda02999332",
        "name": "",
        "x": 280,
        "y": 280,
        "wires": [
            [
                "e9c57fef313c81d6"
            ]
        ]
    },
    {
        "id": "e9c57fef313c81d6",
        "type": "debug",
        "z": "16409cda02999332",
        "name": "EndFreshReceipt",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 280,
        "wires": []
    },
    {
        "id": "55c6ab16ac384108",
        "type": "subflow:31ab2e331f379432",
        "z": "16409cda02999332",
        "name": "",
        "x": 1080,
        "y": 160,
        "wires": [
            [
                "bd82a9abade5a911"
            ]
        ]
    },
    {
        "id": "a09631ac70b2d20c",
        "type": "switch",
        "z": "16409cda02999332",
        "name": "InboundsToProcess",
        "property": "payload.nrOfInboundOrdersToProcess",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 810,
        "y": 160,
        "wires": [
            [
                "55c6ab16ac384108"
            ],
            [
                "e9c57fef313c81d6"
            ]
        ]
    },
    {
        "id": "40e189b07e9ef101",
        "type": "subflow:f510047e.e49ad8",
        "z": "9ac5e7d9bdac33ea",
        "name": "",
        "env": [],
        "x": 210,
        "y": 80,
        "wires": [
            [
                "6175c5014b938d04"
            ]
        ]
    },
    {
        "id": "6175c5014b938d04",
        "type": "switch",
        "z": "9ac5e7d9bdac33ea",
        "name": "StockQCstatusFile check",
        "property": "file",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "StockQCFile",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 290,
        "y": 160,
        "wires": [
            [
                "7e9773fe8e483b6d"
            ],
            []
        ]
    },
    {
        "id": "7e9773fe8e483b6d",
        "type": "file in",
        "z": "9ac5e7d9bdac33ea",
        "name": "",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 500,
        "y": 160,
        "wires": [
            [
                "77f4ec24b59acee0"
            ]
        ]
    },
    {
        "id": "77f4ec24b59acee0",
        "type": "csv",
        "z": "9ac5e7d9bdac33ea",
        "name": "",
        "sep": ";",
        "hdrin": "",
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": false,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 650,
        "y": 160,
        "wires": [
            [
                "f23be72ba71d4d89"
            ]
        ]
    },
    {
        "id": "f23be72ba71d4d89",
        "type": "change",
        "z": "9ac5e7d9bdac33ea",
        "name": "CopyPayload",
        "rules": [
            {
                "t": "set",
                "p": "sourcepayload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 810,
        "y": 160,
        "wires": [
            [
                "d3b75973662c9cd5"
            ]
        ]
    },
    {
        "id": "d3b75973662c9cd5",
        "type": "function",
        "z": "9ac5e7d9bdac33ea",
        "name": "getLPN_QC_Info",
        "func": "msg.payload = {}\n\nvar arrQCrecords = msg.sourcepayload\n\nmsg.payload.arrAdjustQCLPN = []\nfor (var index in arrQCrecords) {\n  var lpnQCObject = arrQCrecords[index]\n\n  var adjustQCLPN ={\n    \"lpnKey\": \"\",\n    \"toQualityControlStatusKey\": \"\"\n  }\n\n  adjustQCLPN.lpnKey = lpnQCObject.col1\n  //adjustQCLPN.toQualityControlStatusKey = \"UNRESTRICTED\"\n  adjustQCLPN.toQualityControlStatusKey = lpnQCObject.col2\n  msg.payload.arrAdjustQCLPN[index] = adjustQCLPN\n} \n\n\nmsg.payload.adjustQcLpnCounter =  0\nmsg.payload.arrAdjustQCLPNLength = msg.payload.arrAdjustQCLPN.length\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 260,
        "wires": [
            [
                "c654bb798b1f0a28",
                "28d2aabf0c0b015c"
            ]
        ]
    },
    {
        "id": "c654bb798b1f0a28",
        "type": "debug",
        "z": "9ac5e7d9bdac33ea",
        "name": "AdjustQC",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 280,
        "wires": []
    },
    {
        "id": "28d2aabf0c0b015c",
        "type": "subflow:1a3593e9db49782d",
        "z": "9ac5e7d9bdac33ea",
        "name": "",
        "x": 530,
        "y": 420,
        "wires": [
            [
                "8dde97efe2c1cfbd"
            ]
        ]
    },
    {
        "id": "8dde97efe2c1cfbd",
        "type": "debug",
        "z": "9ac5e7d9bdac33ea",
        "name": "ENDAdjustQC",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 420,
        "wires": []
    }
]